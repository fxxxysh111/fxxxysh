<!DOCTYPE html>
<html class="">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="none" name="msapplication-config"/>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="tag:blogs.harvardbusiness.org,2007-03-31:999.211366" name="item-id"/>
  <meta content="article" property="og:type"/>
  <meta content="Managing up" property="article:section"/>
  <meta content="@harvardbiz" name="twitter:site"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="item-name"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="page-category-name"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="https://www.facebook.com/HBR" property="article:publisher"/>
  <meta content="2018-09-17T14:05:51Z" property="article:modified_time"/>
  <meta content="https://hbr.org/resources/images/article_assets/2018/09/sep18_7_5988-040881.jpg" property="og:image"/>
  <meta content="https://hbr.org/resources/images/article_assets/2018/09/sep18_7_5988-040881-383x215.jpg" property="og:image"/>
  <meta content="https://hbr.org/resources/images/hbr_opengraph_940x490.png" property="og:image"/>
  <meta content="summary_large_image" name="twitter:card"/>
  <meta content="2018-09-07T12:05:37Z" property="article:published_time"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="Managing up" property="article:tag"/>
  <meta content="Managing yourself" property="article:tag"/>
  <meta content="Difficult conversations" property="article:tag"/>
  <meta content="Stress" property="article:tag"/>
  <meta content="https://hbr.org/resources/images/article_assets/2018/09/sep18_7_5988-040881.jpg" name="twitter:image"/>
  <meta content="130" name="primary-editor"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="@harvardbiz" name="twitter:creator"/>
  <meta content="Digital Article" name="article-content-type"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
  <meta content="initial-scale=1,width=device-width" name="viewport"/>
  <meta content="1699" name="page-category-id"/>
  <meta content="24F9A0CC1185E84BB43B43215DE77D83" name="uid"/>
  <meta content="E1414B866877AF782826DDFC14B1F5CD" name="sid"/>
  <meta content="state:guest" name="shopper-attributes"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="ITEM" name="page-type"/>
  <meta content="300" name="page-id"/>
  <meta content="537063787" name="ox-group"/>
  <meta content="item_page.articles,item_page.top_right,item_page.bottom,item_page.red_strip_engage,item_page.subscribe_now_footer_engage,item_page.topbar_subscribe_engage,item_page.mag_cover_engage,item_page.subscribe,item_page.article_slider_engage,item_page.exit_popup_slider,item_page.books_recirc" name="rr-placements"/>
 </head>
 <body>
  <div class="container" id="main">
   <div class="component" data-moveable="false" data-order="0" data-params="region=openx;location=leaderboard" data-type="webscript" id="">
    <section class="backdrop-darker" js-target="openx-container">
     <div class="row">
      <div class="small-12 column text-center">
       <div class="mvs ad-container">
        <div id="DFP_ARTICLE_pos1">
        </div>
       </div>
      </div>
     </div>
    </section>
   </div>
   <div class="component" data-moveable="false" data-order="1" data-params="region=persistent-banner" data-type="webscript" id="">
    <section class="persistent-banner clearfix hide-for-print">
     <div class="row">
      <div class="small-12 column text-center">
       <span class="quota">
        <strong>
         <span class="quota-remaining" js-target="quota-remaining">
          2
         </span>
         /
         <span class="quota-limit" js-target="quota-limit">
          3<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[search]<li>[ahref]</li>[link]
         </span>
        </strong>
        <span class="hide-for-small is-transparent">
         Free Articles left[link][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<li>[link]</li>[search][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
        </span>
        <span class="hide-for-medium-up font-light is-transparent">
         Remaining
        </span>
        <i class="icon icon-caret-right baseline-shift-down">
        </i>
       </span>
       <span class="subscribe-now">
        [ahref]
        
        <span class="mhs hide-for-registered is-transparent ">
         | <li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search][search][search][ahref][ahref]<li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][ahref][search]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
        </span>
        <personalization-placement class="personalization-placement is-inline-block" data-placement-id="red_strip_engage">
         [ahref]
         
        </personalization-placement>
        <i class="icon icon-shield-reverse is-transparent baseline-shift-down antialiased">
        </i>
       </span>
      </div>
     </div>
    </section>
   </div>
   <div class="component" data-moveable="false" data-order="2" data-params="region=header" data-type="webscript" id="">
    <div class="sticky-top-header">
     <header class="top-header hide-for-print" role="banner">
      <div class="top-header--bar flex-row backdrop-transparent-white pls" js-target="header-bar">
       [ahref]
       
       [ahref]
       
       <div class="flex-1 flex-row mls justify-start align-items-center">
        <span class="header-article-title">
         <li>[ahref]</li>[link][link][search][search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link]<li>[link]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
        </span>
       </div>
       <form action="/search" class="flex-row align-items-center mrs mlm hide-small width-search-input" method="get">
        <button class="attached-search-button">
         <svg class="size-32x32 svg-ie">
          <use xlink:href="/resources/css/images/icons.svg#search">
          </use>
         </svg>
        </button>
        <div class="relative flex-1">
         <div class="autosuggest-shift-left-34 backdrop-white mts width-100pct zindex-highest hide" data-purpose="search-auto-suggest">
          <div class="font-sans-serif">
           <ul class="no-bullet ptm mbs" data-container="results">
            <li class="pbm pts line-height-tight font-size-large text-gray-dark">
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark">
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark">
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark">
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark">
            </li>
            <li class="pbl pts line-height-tight font-size-large text-gray-dark has-border-bottom">
            </li>
            <li class="ptl font-size-xsmall text-gray-light font-bold">
             SUGGESTED TOPICS
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark no-bullet">
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark no-bullet">
            </li>
            <li class="pbm pts line-height-tight font-size-large text-gray-dark no-bullet">
            </li>
           </ul>
          </div>
         </div>
        </div>
       </form>
       [link]
       
       [ahref]
       
       <personalization-placement class="personalization-placement global-header-button font-size-small flex-row hide-small mlm pls" data-placement-id="topbar_subscribe_engage">
        [link]
        
       </personalization-placement>
       [link]
       
       <div class="global-header-button flex-row justify-center align-items-center hide-for-registered mlm" data-help-box-target="sign-in-benefits">
        <span class="font-size-large hide-small font-weight-light nowrap">
         <li>[ahref]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<li>[link]</li><li>[ahref]</li><li>[ahref]</li>[ahref]
        </span>
       </div>
      </div>
      <div class="header-menu absolute backdrop-off-white pam" data-menu="cart" js-target="global-header-menu">
       <svg class="border-caret absolute bottom-100pct hide-for-small" height="16px" js-target="global-header-menu-caret" width="24px">
        <path d="M 0 16 l 12 -14 l 12 14" stroke-width="4px">
        </path>
       </svg>
       <div class="right">
        [ahref]
        
       </div>
       <h3 class="mtl subheader">
        [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
       </h3>
       <div class="cart-container" js-target="global-header-cart-contents">
        <div class="message mbs mtm">
         Your Shopping Cart is empty.
        </div>
        [ahref]
        
       </div>
      </div>
      <div class="header-menu absolute backdrop-off-white pam hide-medium-up" data-menu="search" js-target="global-header-menu">
       <form action="/search" class="flex-row mtl" method="get">
        <button class="attached-search-button">
         <svg class="size-32x32 svg-ie">
          <use xlink:href="/resources/css/images/icons.svg#search">
          </use>
         </svg>
        </button>
       </form>
      </div>
      <div class="header-menu absolute backdrop-dark pam" data-menu="user" js-target="global-header-menu">
       <svg class="border-caret-dark absolute bottom-100pct hide-for-small" height="16px" js-target="global-header-menu-caret" width="24px">
        <path d="M 0 16 l 12 -14 l 12 14" stroke-width="4px">
        </path>
       </svg>
       <div class="right">
        [ahref]
        
       </div>
       <h3 class="white mvl text-overflow" js-target="user-menu-name">
        [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
       </h3>
       [link]
       
       [ahref]
       
       [ahref]
       
       [link]
       
       [ahref]
       
       [ahref]
       
      </div>
      <div class="absolute backdrop-white width-100pct hide-small pbm hide" data-purpose="search-auto-suggest">
       <div class="font-sans-serif">
        <ul class="no-bullet ptm mbs invisible" data-container="dimensions">
         <li class="pbm pts line-height-tight font-size-large text-gray-dark">
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark">
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark">
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark">
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark">
         </li>
         <li class="pbl pts line-height-tight font-size-large text-gray-dark has-border-bottom">
         </li>
         <li class="ptl font-size-xsmall text-gray-light font-bold">
          SUGGESTED TOPICS
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark no-bullet">
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark no-bullet">
         </li>
         <li class="pbm pts line-height-tight font-size-large text-gray-dark no-bullet">
         </li>
        </ul>
       </div>
      </div>
     </header>
    </div>
    <section class="site-logo">
     <div class="brand">
      [ahref]
      
     </div>
    </section>
   </div>
   <div class="component" data-moveable="false" data-order="4" data-params="region=article;ad-placements=title-300" data-type="webscript" id="">
    <article-content class="article-content">
     <div js-target="article-content">
      <div class="row">
       <div class="content-area--article article-header column">
        <aside class="sidebar--circulator hide-for-small hide-for-print">
         <personalization-placement class="personalization-placement" data-placement-id="top_right">
          <div class="container mvl">
           <div class="text-center island">
            <div class="loading mrl is-inline-block">
             <div class="pie rotation">
             </div>
             <div class="pie filler">
             </div>
             <div class="mask">
             </div>
            </div>
            <span class="is-inline-block mtm lighter-gray font-light font-size-xlarge">
             Loading...
									[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li>[link][ahref]
            </span>
           </div>
          </div>
         </personalization-placement>
        </aside>
        <div class="topic mbs">
         [link]
         
        </div>
        <h1 class="article-hed">
         <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
        </h1>
        <div class="byline">
         <ul class="byline-list">
          <li>
           [link]
           
          </li>
         </ul>
        </div>
        <div class="publication-date text-gray">
         September 07, 2018
        </div>
       </div>
      </div>
      <section class="fixedsticky sticky-tools">
       <div class="sticky-backdrop">
        <div class="row">
         <div class="content-area--article column width-76pct">
          <div class="article-tools">
           <stream-item class="stream-item" data-authors="Mary Abbajay" data-content-image="/resources/images/article_assets/2018/09/sep18_7_5988-040881-383x215.jpg" data-content-type="Digital Article" data-id="tag:blogs.harvardbusiness.org,2007-03-31:999.211366" data-summary="<p>When to leave and when to stick it out.</p>
" data-title="What to Do When You Have a Bad Boss" data-topic="Managing up" data-url="/2018/09/what-to-do-when-you-have-a-bad-boss">
            <ul class="plain-inline-list nowrap">
             <li class="utility text-center hide-small ">
              [ahref]
              
             </li>
             <li class="utility text-center " data-help-box-target="article-saves">
              [ahref]
              
             </li>
             <li class="utility text-center has-border-right-for-small">
              [link]
              
             </li>
             <li class="utility text-center">
              [ahref]
              
             </li>
             <li class="utility text-center has-padding-left-for-small">
              [ahref]
              
             </li>
             <li class="utility text-center hide-small">
              [ahref]
              
             </li>
             <li class="utility text-center hide-small hide-for-non-subscriber">
              [ahref]
              
             </li>
             <li class="utility text-center">
              [ahref]
              
             </li>
            </ul>
           </stream-item>
          </div>
         </div>
        </div>
        <div class="row hide-small">
         <div class="progress-meter">
          <div class="progress-meter-granules">
           <div class="meter-granules-filled">
           </div>
          </div>
         </div>
        </div>
       </div>
      </section>
      <div class="row">
       <div class="content-area--article column">
        [link]
        
        <div class="promo--right hide-for-small hide-for-print">
         <div class="advertising mbl">
          <div id="DFP_TITLE_pos2">
          </div>
         </div>
         <personalization-placement class="personalization-placement hide-for-small" data-placement-id="articles">
          <div class="container mvl">
           <div class="text-center island">
            <div class="loading mrl is-inline-block">
             <div class="pie rotation">
             </div>
             <div class="pie filler">
             </div>
             <div class="mask">
             </div>
            </div>
            <span class="is-inline-block mtm lighter-gray font-light font-size-xlarge">
             Loading...
									<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][ahref]<li>[link]</li><li>[ahref]</li><li>[link]</li>[search]<li>[ahref]</li><li>[link]</li>[search]
            </span>
           </div>
          </div>
         </personalization-placement>
        </div>
        <div class="article-executive-summary is-hidden">
         <h4 class="text-gray-light mbn mt-large2">
          Executive Summary
         </h4>
         <p>
          <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
         </p>
        </div>
        <div class="article article-first-row">
         <div class="mbn pbn">
          <figure>
          </figure>
         </div>
         <p>
          Despite the
          [link]
          
          companies spend annually on managerial and leadership development, bad bosses are common in the American workforce.
          [ahref]
          
          found that 56% of American workers claim their boss is mildly or highly toxic.
          [ahref]
          
          found that 75% of Americans say their “boss is the most stressful part of their workday.”
         </p>
         <p>
          And
          [ahref]
          
          found that one in two employees have left a job “to get away from their manager at some point in their career.”
         </p>
         <p>
          Surprisingly, though,
          [link]
          
          found that employees end up working longer (two years, on average) for toxic bosses than nontoxic bosses. Why?
         </p>
         <p>
          Quitting is hard[search]<li>[ahref]</li>[link][ahref][search][search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
         </p>
         <p>
          People stay in jobs with bosses they don’t like for a multitude of reasons. Some of the most common reasons I’ve heard during my 20 years of organizational consulting and coaching include:[link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>
         </p>
         <ul>
          <li>
           I don’t have the energy to look for a new job.
          </li>
          <li>
           I really like my job/colleagues/commute.
          </li>
          <li>
           I need the salary. I can’t afford to take a pay cut.
          </li>
          <li>
           There aren’t any other jobs that would be better.
          </li>
          <li>
           I don’t want to lose the benefits.
          </li>
          <li>
           I’ve invested too much to start over in a new organization.
          </li>
          <li>
           This job pays too well to leave.
          </li>
          <li>
           I don’t have the skills to get a different job.
          </li>
          <li>
           Things might get better.
          </li>
         </ul>
         <p>
          [link][link][link]<li>[ahref]</li><li>[search]</li><li>[search]</li><li>[link]</li><li>[link]</li><li>[search]</li><li>[link]</li>[search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
         </p>
         <p>
          Loss aversion is another psychological process that makes it hard to give up something you have. We tend to strive to keep what we’ve worked hard to obtain. In the workplace this could be salary, status, stability, seniority, social connections, and all the other benefits we’ve accumulated over the years.
         </p>
         <p>
          Additionally, research tells us that people stay in toxic situations when they are engaged in “high meaning” work. In other words, when people are emotionally attached and engaged in their job, they stay, even when they work for bosses who treat them poorly.
         </p>
         <p>
          Last,
          [ahref]
          
          that a mean boss will change his or her ways, that the organization will take some action, and that things will improve.
         </p>
         <p>
          [link]<li>[search]</li>[link][link][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
         </p>
         <p>
          <strong>
           How to manage
          </strong>
         </p>
         <div class="promo--right">
          <div class="advertising">
           <div id="DFP_IC_pos3">
           </div>
          </div>
         </div>
         <p>
          [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>[search]<li>[search]</li>
         </p>
         <p>
          <strong>
           Forget giving feedback. Make requests instead.
          </strong>
          It’s usually a good idea to try to talk to your boss and see what’s going on. But chances are a difficult boss may not be open to hearing feedback about his or her failings. So try making specific requests to get what you need. Be specific about the resources and support you need to do your job, explain your rationale, and articulate how this will benefit them and the organization. Think about timing, and try to have these conversations when your boss is calm and in an upbeat mood. Make sure to prepare, practice, and anticipate reactions.
         </p>
         <p>
          <strong>
           Engage with your support network
          </strong>
          . A strong support network is critical when dealing with an emotionally challenging situation. Surround yourself with friends and people who support and encourage you. Have outlets outside work for socializing and reducing stress. Talk to a coach, therapist, or other trained professional.
         </p>
         <p>
          <strong>
           Get plenty of exercise and sleep.
          </strong>
          Taking care of your physical and mental well-being is essential. If feasible, take a temporary break from work. Find activities outside of work that bring you joy and satisfaction. Consider mindfulness and relaxation practices such as yoga and meditation. Practice positive self-talk by reminding yourself that you are not the problem. Remember, you can’t control how your boss behaves, but you can control how you respond to their behavior.
         </p>
         <p>
          <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
         </p>
         <p>
          [search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]
         </p>
         <p>
          <strong>
           Know when to go
          </strong>
         </p>
         <p>
          Of course, be ready to accept that quitting could be the best solution. There are some unequivocal signs that it’s time to move on to the next job. If you dread going to work every day, if you feel physically or mentally unsafe at work, if you spend more time thinking about your boss than your work, if stress from work permeates the rest of your life, if your self-esteem has plummeted, it’s time to go. You must give yourself permission to make a career change — to let go of hope that things will get better, and to overcome the fear of quitting.[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>
         </p>
         <p>
          Once you make the decision to quit, it’s important to do it as professionally and gracefully as possible. While it might be tempting to go out in a blaze of anger and curse words, this rarely works out well in the long run. Don’t burn bridges. Here are a few tips:[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[link]</li>[link][ahref]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[ahref][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref]
         </p>
         <p>
          <strong>
           Line up your next move.
          </strong>
          There is no magic bullet here: you just need start the job search.
         </p>
         <p>
          <strong>
           Give proper notice:
          </strong>
          The standard for most industries is two weeks. Giving more time is always an option but try not to give less if you can help it. Write a proper resignation letter and tell your supervisor — in person — that you are leaving. Don’t forget, letters of resignation often end up in employee files and might be used if your former boss is ever called for a reference. Make sure your letter is professional.
         </p>
         <p>
          <strong>
           Create a transition timeline.
          </strong>
          Clearly articulate your plans for transition. Be clear about what you are going to do before you leave and stick to it. If you promise to finish projects, then finish them. Don’t bite off more that you can chew, but don’t leave things on the plate that you promised to take care of. Leave your boss and your team fully updated on the status of all your projects, etc.
         </p>
         <p>
          <li>[search]</li><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][search][link]<li>[ahref]</li>
         </p>
         <p>
          [search][link][search]<li>[link]</li>[ahref][ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][ahref]
         </p>
         <p>
          Remember, it’s okay to quit. Your personal and professional future may depend on it.
         </p>
        </div>
       </div>
      </div>
      <section class="authors mvl" js-target="authors-section">
       <div class="row">
        <div class="content-area--article column">
         <hr/>
         <div class="is-inline-block width-100pct">
          <p class="mbn description-text ">
           [link]
           
           is the president and co-founder of Careerstone Group, LLC, a woman-owned, full service organizational and leadership development consultancy that delivers leading-edge talent and organizational development solutions to the public and private sectors. She currently serves on the regional Market President’s Board of BB&amp;T Bank. She was Chairman of the Board for Leadership Greater Washington where she led the adult Signature program, the Youth Leadership Program and the Rising Leaders Program.
          </p>
         </div>
         <hr/>
        </div>
       </div>
      </section>
      <section class="tagged mvl pvl">
       <div class="row">
        <div class="content-area--article column">
         <h5>
          This article is about
          [link]
          
         </h5>
         <div>
          <follow-subscribe class="follow-topic" data-activity="topic" data-name="Managing up">
           <div class="follow-this">
            [link]
            
           </div>
           <div class="unfollow-this">
            [ahref]
            
           </div>
          </follow-subscribe>
         </div>
         <div class="ptm hide-for-small clearfix">
          <div class="pvs mrm left">
           Related Topics:
          </div>
          <ul class=" piped-inline-list left">
           <li class="font-national eyebrow--small">
            [ahref]
            
           </li>
           <li class="font-national eyebrow--small">
            [ahref]
            
           </li>
           <li class="font-national eyebrow--small">
            [link]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </section>
      <personalization-placement class="personalization-placement" data-placement-id="bottom">
       <div class="container mvl">
        <div class="text-center island">
         <div class="loading mrl is-inline-block">
          <div class="pie rotation">
          </div>
          <div class="pie filler">
          </div>
          <div class="mask">
          </div>
         </div>
         <span class="is-inline-block mtm lighter-gray font-light font-size-xlarge">
          Loading...
						<li>[ahref]</li>[search]<li>[link]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><li>[search]</li>
         </span>
        </div>
       </div>
      </personalization-placement>
      <personalization-placement class="personalization-placement" data-placement-id="books_recirc">
       <div class="container mvl">
        <div class="text-center island">
         <div class="loading mrl is-inline-block">
          <div class="pie rotation">
          </div>
          <div class="pie filler">
          </div>
          <div class="mask">
          </div>
         </div>
         <span class="is-inline-block mtm lighter-gray font-light font-size-xlarge">
          Loading...
				[search][search]<li>[link]</li>[link]<li>[search]</li>[link]<li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[ahref]<li>[ahref]</li><li>[search]</li><li>[link]</li>
         </span>
        </div>
       </div>
      </personalization-placement>
      [link]
      
      <article-comments class="article-comments backdrop-lighter-2 clearfix" data-category-id="" data-gigya-id="tag:blogs.harvardbusiness.org,2007-03-31:999.211366" data-is-first-time="true">
       <article-comments-post class="article-comments-post">
       </article-comments-post>
       <article-comments-legend class="article-comments-legend">
       </article-comments-legend>
       <article-comments-list class="article-comments-list">
       </article-comments-list>
      </article-comments>
     </div>
    </article-content>
    <div class="is-hidden" js-target="slider-promo-content">
     <personalization-placement class="personalization-placement pvl phm clearfix" data-placement-id="article_slider_engage">
     </personalization-placement>
    </div>
    <div class="is-hidden" js-target="exit-popup-slider-content">
     <personalization-placement class="personalization-placement pvl phm text-center clearfix" data-placement-id="exit_popup_slider">
     </personalization-placement>
    </div>
   </div>
   <div class="component" data-moveable="false" data-order="5" data-params="region=site-paywall" data-type="webscript" id="">
   </div>
   <div class="component" data-moveable="false" data-order="97" data-params="region=openx;location=partner-center" data-type="webscript" id="">
    <section class="partner-center row clearfix" js-target="openx-container">
     <div class="content-area column cushion">
      <div class="row">
       <div class="small-12 column">
        <h4 class="section-label">
         Partner Center
        </h4>
       </div>
      </div>
      <div class="row collapse">
       <div class="small-6 medium-3 column">
        <div class="ad-container ad-230">
         <div id="DFP_PC_pos11">
         </div>
        </div>
       </div>
       <div class="small-6 medium-3 column">
        <div class="ad-container ad-230">
         <div id="DFP_PC_pos12">
         </div>
        </div>
       </div>
       <div class="small-6 medium-3 column">
        <div class="ad-container ad-230">
         <div id="DFP_PC_pos13">
         </div>
        </div>
       </div>
       <div class="small-6 medium-3 column">
        <div class="ad-container ad-230">
         <div id="DFP_PC_pos14">
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
   </div>
   <div class="component" data-moveable="false" data-order="98" data-params="region=global-nav" data-type="webscript" id="">
    <nav class="global-nav backdrop-off-white flex-col justify-between ptm hide-for-print" data-page="article" data-state="">
     <div class="phl">
      [ahref]
      
      [link]
      
      [ahref]
      
      [link]
      
      [link]
      
      [ahref]
      
      [ahref]
      
      [ahref]
      
      [link]
      
     </div>
     <personalization-placement class="personalization-placement" data-placement-id="mag_cover_engage">
      <div class="flex-row justify-center hide-small">
       [ahref]
       
      </div>
      [link]
      
     </personalization-placement>
    </nav>
   </div>
   <div class="component" data-moveable="false" data-order="99" data-params="document=footer" data-type="static-content" id="">
    <footer class="footer hide-for-print flex-row justify-center">
     <div class="has-border-top footer-container">
      <div class="backdrop-white hide-for-print mbs">
       <div class="footer-container--top mt-large2 mb-large2">
        <span class="footer-logo">
         <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[search]</li>
        </span>
        <div class="panel-container">
         <div class="panel-inner-container">
          <span class="panel nowrap flex-col text-center justify-center">
           [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<li>[search]</li>[ahref]<li>[ahref]</li>
          </span>
          <span class="placeholder">
          </span>
         </div>
        </div>
       </div>
       <footer-menu>
        <div class="footer-content--container flex-row-wrap justify-between flex-direction--row">
         <div class="footer-content--list flex-col" js-target="footer-item">
          <div class="flex-row justify-between">
           <h6>
            EXPLORE HBR
           </h6>
           <span class="footer-item--arrow icon icon-caret-right font-size-medium mbm mtm">
            <li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[ahref][search][search]
           </span>
          </div>
          <ul class="no-bullet tidy-list hide-for-small--list mbn">
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="footer-content--list flex-col" js-target="footer-item">
          <div class="flex-row justify-between">
           <h6>
            HBR STORE
           </h6>
           <span class="footer-item--arrow icon icon-caret-right font-size-medium mbm mtm">
           </span>
          </div>
          <ul class="no-bullet tidy-list hide-for-small--list mbn">
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
          </ul>
         </div>
         <div class="footer-content--list flex-col" js-target="footer-item">
          <div class="flex-row justify-between">
           <h6>
            ABOUT HBR
           </h6>
           <span class="footer-item--arrow icon icon-caret-right font-size-medium mbm mtm">
           </span>
          </div>
          <ul class="no-bullet tidy-list hide-for-small--list mbn">
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/media-inquiries">
             Media Inquiries
            </a>
           </li>
           <li>
            [link]
            
           </li>
           <li>
            [link]
            
           </li>
          </ul>
         </div>
         <div class="footer-content--list flex-col" js-target="footer-item">
          <div class="flex-row justify-between">
           <h6>
            HBR SUBSCRIBER ASSISTANCE
           </h6>
           <span class="footer-item--arrow icon icon-caret-right font-size-medium mbm mtm">
           </span>
          </div>
          <ul class="no-bullet tidy-list hide-for-small--list mbn">
           <li class="text-overflow">
            U.S./Canada:
            <br>
             <li>[ahref]</li>[link][search][search][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref][link]<li>[ahref]</li>[search][ahref]<li>[search]</li><li>[link]</li><li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<li>[link]</li><li>[link]</li><li>[ahref]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][search]
            </br>
            [ahref]
            
            <br/>
            <a href="m">
             harvard@cdsfulfillment.com
            </a>
            <br/>
            [link]
            
           </li>
           <li class="text-overflow">
            International:
            <br/>
            [ahref]
            
            <br/>
            [ahref]
            
            <br/>
            [ahref]
            
            <br/>
            [link]
            
           </li>
          </ul>
         </div>
         <div class="footer-content--list flex-col" js-target="footer-item">
          <div class="flex-row justify-between">
           <h6>
            HBR.ORG CUSTOMER ASSISTANCE
           </h6>
           <span class="footer-item--arrow icon icon-caret-right font-size-medium mbm mtm">
           </span>
          </div>
          <ul class="no-bullet tidy-list hide-for-small--list mbn">
           <li class="text-overflow">
            U.S./Canada:
            <br>
             <li>[ahref]</li>[link][link][search]<li>[search]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
            </br>
            [link]
            
           </li>
           <li>
            <li class="text-overflow">
             International:
             <br/>
             [link]
             
            </li>
            <li class="text-overflow">
             Email:
             <br>
              [link][link][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
             </br>
             [ahref]
             
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </li>
          </ul>
         </div>
         <div class="footer-content--list footer-content--last-list flex-col">
          <div class="flex-row justify-between">
           <h6>
            FOLLOW HBR
           </h6>
          </div>
          <ul class="icon-ul tidy-list mbn">
           <li>
            <i class="icon-li icon icon-facebook">
            </i>
            [ahref]
            
           </li>
           <li>
            <i class="icon-li icon icon-twitter">
            </i>
            [link]
            
           </li>
           <li>
            <i class="icon-li icon icon-linkedin">
            </i>
            [ahref]
            
           </li>
           <li>
            <i class="icon-li icon icon-instagram">
            </i>
            [link]
            
           </li>
           <li>
            <h2>
             [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
            </h2>
            <i class="icon-li icon line-height-very-very-tight icon-newsreader">
            </i>
            [link]
            
           </li>
          </ul>
         </div>
        </div>
       </footer-menu>
      </div>
     </div>
    </footer>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0251
  </b>
 </body>
</html>
<div class="flex-row mbl mt-large2">
 <div class="footer-logo hide-for-small">
  <figure class="mts">
  </figure>
 </div>
 <div class="flex-direction--row mbl hide-for-small--list copyright-block">
  <ul class="piped-inline-list is-inline mbn pbn hide-for-small flex-row flex-direction--row copyright">
   <li>
    [link]
    
   </li>
   <li>
    <a class="copyright" href="/corporate/careers">
     Careers
    </a>
   </li>
   <li>
    <a class="copyright" href="/corporate/privacy-policy">
     Privacy Policy
    </a>
   </li>
   <li>
    [ahref]
    
   </li>
   <li>
    [link]
    
   </li>
  </ul>
  <br/>
  <div class="copyright is-inline mrs hide-for-small">
   Harvard Business Publishing:
  </div>
  <ul class="piped-inline-list is-inline copyright hide-for-small flex-row flex-direction--row">
   <li>
    [ahref]
    
   </li>
   <li>
    [link]
    
   </li>
   <li>
    [ahref]
    
   </li>
   <li>
    [ahref]
    
   </li>
  </ul>
  <div class="copyright flex-row flex-direction--row">
   Copyright © 2018 Harvard Business School Publishing. All rights reserved. Harvard Business Publishing is an affiliate of Harvard Business School.
  </div>
 </div>
</div>
<noscript>
</noscript>
