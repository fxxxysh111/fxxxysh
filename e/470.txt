<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
  <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
  <title>
   [area1][mkey1][keyword1][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
 </head>
 <body>
  <dl id="skiptoContent">
   <dt>
    <strong>
     바로가기 메뉴
    </strong>
   </dt>
   <dd>
    [ahref]
    
   </dd>
   <dd>
    <a href="p">
     본문내용 바로가기
    </a>
   </dd>
  </dl>
  <div id="wrap">
   <div class="mainBox">
    <div id="m_header_wrap">
     <h1>
      <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
     </h1>
     <div id="gnb_util">
      <div class="gnb_util_dl">
       <h2 class="hidden">
        [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
       </h2>
       <ul>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         <a href="/views/cms/hkor/ug/ug01/ug0103.jsp" target="_self" title="열림">
          저작권정책
         </a>
        </li>
        <li>
         [link]
         
        </li>
        <li class="bg_none">
         <span class="zoom">
          [link]
          
          [ahref]
          
          <a href="t">
          </a>
         </span>
        </li>
       </ul>
      </div>
      <div class="gnb_search">
       <h2 class="hidden">
        [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
       </h2>
       <form action="/search/searchMine.jsp" method="post" name="gnbSearchForm">
        <fieldset>
         <legend>
          통합검색 폼
         </legend>
         <div class="wrap">
          <label class="hidden" for="query" onclick="">
           통합검색
          </label>
          <span class="img-type">
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search]<li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </span>
         </div>
        </fieldset>
       </form>
      </div>
     </div>
     <div id="gnb_menu">
      <h2 class="hidden">
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <ul class="naviBox" id="gnb">
       <li class="menu1">
        [ahref]
        
        <ul class="menu2dep_1">
         <li>
          [ahref]
          
         </li>
         <li>
          [link]
          
         </li>
         <li>
          [link]
          
         </li>
         <li>
          <a href="/hmine/mi/mi04/mi0401/mineUser/getAboutMineral.do?mine_kind_c=01" target="_self">
           광물 분류
          </a>
         </li>
        </ul>
       </li>
       <li class="menu2">
        [link]
        
        <ul class="menu2dep_2">
         <li>
          [ahref]
          
         </li>
         <li>
          [link]
          
         </li>
         <li>
          <a href="/views/cms/hmine/ro/ro03/ro030101.jsp" target="_self">
           퇴적암
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li class="menu3">
        [ahref]
        
        <ul class="menu2dep_3">
         <li>
          <a href="/views/cms/hmine/eh/eh01/eh0101.jsp" target="_self">
           탄생
          </a>
         </li>
         <li>
          <a href="/views/cms/hmine/eh/eh02/eh0201.jsp" target="_self">
           역사
          </a>
         </li>
         <li>
          <a href="/views/cms/hmine/eh/eh03/eh0301.jsp" target="_self">
           판구조론
          </a>
         </li>
        </ul>
       </li>
       <li class="menu4">
        [ahref]
        
        <ul class="menu2dep_4">
         <li>
          <a href="/views/cms/hmine/mh/mh01/mh010101.jsp" target="_self">
           광업의 기원
          </a>
         </li>
         <li>
          [link]
          
         </li>
         <li>
          <a href="/views/cms/hmine/mh/mh03.jsp" target="_self">
           조선시대
          </a>
         </li>
         <li>
          <a href="/views/cms/hmine/mh/mh04.jsp" target="_self">
           개항 이후
          </a>
         </li>
         <li>
          <a href="/views/cms/hmine/mh/mh05.jsp" target="_self">
           일제강점기
          </a>
         </li>
         <li>
          [link]
          
         </li>
        </ul>
       </li>
       <li class="menu5">
        <a class="" href="/hmine/mc/mc01/bbs/bbsList.do?bbs_cd_n=69" target="_self">
         광물정보
        </a>
        <ul class="menu2dep_5">
         <li>
          <a href="/hmine/mc/mc01/bbs/bbsList.do?bbs_cd_n=69" target="_self">
           현미경으로 보는 광물
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [search]
          
         </li>
         <li>
          <a href="/hmine/mc/mc04/bbs/bbsList.do?bbs_cd_n=68" target="_self">
           자주묻는 질문
          </a>
         </li>
        </ul>
       </li>
      </ul>
     </div>
     <div class="m_header_img">
      <map id="main_map" name="main_map">
       <area alt="암석이란" coords="55,362,55" href="/views/cms/hmine/ro/ro01/ro0101.jsp" shape="circle"/>
       <area alt="광물이란" coords="903,360,56" href="/views/cms/hmine/mi/mi01/mi0101.jsp" shape="circle"/>
       <area alt="광업의역사-광업은 언제부터 시작하고, 어떻게 발전했을까?" coords="18,552,224,646" href="/views/cms/hmine/mh/mh01/mh010101.jsp" shape="rect"/>
      </map>
     </div>
    </div>
    <div class="content_wrap" id="content_wrap">
     <div class="m_content">
      <ul>
       <li class="m_con_1">
        <h3 class="hidden">
         [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
        </h3>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li class="bd_none">
          [link]
          
         </li>
        </ul>
       </li>
       <li class="m_con_2">
        <h3 class="hidden">
         [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
        </h3>
        <ul>
         <li>
          [link]
          
         </li>
         <li>
          [link]
          
         </li>
         <li class="bd_none">
          [link]
          
         </li>
        </ul>
       </li>
       <li class="m_con_4">
        <h3 class="hidden">
         [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
        </h3>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li class="bd_none">
          [link]
          
         </li>
        </ul>
       </li>
       <li class="m_con_3">
        <h3 class="hidden">
         [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
        </h3>
        <ul>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
      </ul>
     </div>
    </div>
    <div id="footer">
     <div id="footer_wrap">
      Copyright (c) 2013 KORES. CORP. All rights reserved.
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0473
  </b>
 </body>
</html>
