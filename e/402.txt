<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.33.0-wmf.6" name="generator"/>
  <meta content="origin" name="referrer"/>
  <meta content="origin-when-crossorigin" name="referrer"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-대중교통_지향_개발 rootpage-대중교통_지향_개발 skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   [link]
   
   <div class="mw-body-content" id="siteNotice">
    <div id="mw-dismissablenotice-anonplace">
    </div>
   </div>
   <div class="mw-indicators mw-body-content">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="ko">
    [area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div class="noprint" id="siteSub">
     위키백과, 우리 모두의 백과사전.
    </div>
    <div id="contentSub">
    </div>
    <div id="jump-to-nav">
    </div>
    <a class="mw-jump-link" href="d">
     둘러보기로 가기
    </a>
    [ahref]
    
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="ko">
     <div class="mw-parser-output">
      <p>
       [search][ahref][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
      </p>
      <div class="toc" id="toc">
       <div class="toctitle" dir="ltr" lang="ko">
        <h2>
         <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
        </h2>
        <span class="toctogglespan">
         [search][ahref]<li>[search]</li>[ahref][ahref][link]
        </span>
       </div>
       <ul>
        <li class="toclevel-1 tocsection-1">
         <a href="요">
          <span class="tocnumber">
           1
          </span>
          <span class="toctext">
           개요
          </span>
         </a>
        </li>
        <li class="toclevel-1 tocsection-2">
         [ahref]
         
        </li>
        <li class="toclevel-1 tocsection-3">
         [ahref]
         
        </li>
        <li class="toclevel-1 tocsection-4">
         [link]
         
         <ul>
          <li class="toclevel-2 tocsection-5">
           [link]
           
          </li>
          <li class="toclevel-2 tocsection-6">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="toclevel-1 tocsection-7">
         <a href="주">
          <span class="tocnumber">
           5[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[search][ahref][ahref]
          </span>
          <span class="toctext">
           각주
          </span>
         </a>
        </li>
        <li class="toclevel-1 tocsection-8">
         <a href="크">
          <span class="tocnumber">
           6
          </span>
          <span class="toctext">
           외부 링크
          </span>
         </a>
        </li>
       </ul>
      </div>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <p>
       도시 계획에서 대중 교통의 발달 거리 (TOD)는 공공 교통 수단에서 도보로 이동가능한 거리에 있는 주거공간, 비즈니스 공간 및 여가 공간의 양을 최대화하는 도시 개발 유형이다. 그렇게 함으로써 자가용 사용을 줄이고 지속 가능한 도시 성장을 촉진하여 대중 교통 이용자 수를 늘리는 것이 목표이다.
      </p>
      <p>
       TOD는 일반적으로 고밀도 인구 지역 (예를 들어 기차역 또는 전철 또는 버스 정류장)에 적용되며 이를 통해 지역에서 저밀도 지역이 펼쳐진다. TOD는 또한 일반적으로 블록 크기와 자동차 전용 면적을 줄임으로써 다른 지역보다 걷기 편하도록 설계되었다.
      </p>
      <h2>
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <p>
       [search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][ahref]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
      </p>
      <p>
       현재 미국에서는 TOD에 기반한 철도 교통 밀집도를 나타내는 기준으로 반 마일
       <sup class="reference" id="cite_ref-1">
        [link]
        
       </sup>
       반경의 원을 사용하는 등 대중 교통 지향 개발을 위해 힘쓰고 있다.
      </p>
      <h2>
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <p>
       TOD는 TPD와 비교하여 한 도시의 단위로 토지이용과 교통과의 연관성을 강조하면서 대중 교통 밀집 지역 중심의 복합적인 토지이용과 보행친화적인 도보 환경을 만듦으로써 무분별한 도시 개발을 막고 개인 교통수단의 통행 패턴을 대중 교통 및 녹색 교통 위주의 통행 패턴으로 유도하여 자동차 배출가스로 인한 환경 오염 및 자동차 운행 중 발생하는 소음 공해를 감소시켜 시민의 편리한 사회 생활을 도모하고자 하는 것에 있다. 반면 TPD는 이러한 고밀도 개발 및 토지이용 패턴을 고려하지 않은 단순한 대중 교통을 중심으로 한 주변 개발을 의미한다.
      </p>
      <h2>
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li>
        [link]
        
        ,
        [ahref]
        
        : 과테말라 시티의 빠른 성장을 제어하기 위한 시도로,과테말라 시티의 시장 알바 아주는 중요 간선 도로를 따라 횡단과 대중 교통 중심 개발 TOD 특성을 나타내는 기반의 성장을 제어할 수 있는 정책을 실현했다. 이 정책은 오른쪽 큰 간선 도로에 의해 건축물의 높이,복합 용도 건축물의 건축을 허용하는 것을 목표로 건물은 점차 멀어지면서 간선 도로에서 높이와 밀도가 감소한다. 이와 동시에 간선 급행 버스 체계 Transmetro가 BRT 시스템과 함께 시행되고있다.
       </li>
      </ul>
      <ul>
       <li>
        [ahref]
        
        ,
        <a class="mw-redirect" href="/wiki/%EC%BF%A0%EB%A6%AC%ED%8B%B0%EB%B0%94" title="쿠리티바">
         쿠리티바
        </a>
        : TOD의 초기 가장 성공적인 사례 중 하나로 뽑힌다.
        [ahref]
        
        는 자국의 역사 속에서 매우 이른 시기에 주요 교통 시설을 편성하였다. 쿠리티바는 수년에 걸쳐 높은 수용력의 교통 수단에 인접한 고밀도 개발, 특히
        [ahref]
        
        (Bus Rapid Transit) 시스템을 배치하기 위해 지역의 법률과 교통 계획을 통합했다. 시행 초기에는 자금의 부족으로 장대한 도시 계획의 실패 이후, 쿠리티바는 자국의 경제적 실정을 고려한 보다 경제적인 인프라 구축 작업에 집중하고 있는데 대표적인 예로 운행 및 건설에 상대적으로 적은 자본이 소요되는 routing 시스템과 버스 노선을 채택하여 시행하고 있다.
       </li>
      </ul>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li>
        [ahref]
        
        ,
        <a class="new" href="/w/index.php?title=%EC%95%8C%EB%A7%81%ED%84%B4_%EC%B9%B4%EC%9A%B4%ED%8B%B0&amp;action=edit&amp;redlink=1" title="알링턴 카운티 (없는 문서)">
         알링턴 카운티
        </a>
        : 30여 년 동안, 버지니아 정부는 알링턴 카운티의 워싱턴 메트로 철도 역에서부터 컬럼비아 파이크까지 약 400-800m 가량의 대량 버스 라인 내에서 집중 개발 전략을 추진해왔다. 이렇게 개발된 교통 영역은 정부가 복합적이고 보행친화적인 대중 교통 지향 개발(TOD)을 기반으로 개발한 영역으로 로슬린,스턴,클라렌,법원,펜타곤 시티,크리스탈 시티,리옹 마을,Shirlington,버지니아 광장 및 웨스트 오버 등이 있다.
       </li>
      </ul>
      <ul>
       <li>
        [link]
        
        ,
        [ahref]
        
        지역 : 샌프란시스코 베이 지역은 산호세,샌프란시스코,오클랜드와 프레 몬트 등 9개 군, 101개 도시를 포함하는 지역으로 지방 정부는 자연 지역 보호,교통 혼잡 감소 교통을 목적으로 대중 교통 지향 개발(TOD)을 장려하며 이러한 정책으로 공중 보건을 촉진하고 주거 선택권 또한 증가시킨다. 또한 이 지역은 우선 개발 분야 및 우선 순위 보전 지역 지정되어 있고 자연 출산율과 일자리 창출 등의 이유로 현재 인구 전망이 2035년까지 2백만명으로 성장할 것으로 예측하고 이러한 성장 인구의 50%가 대중 교통 지향 개발(TOD)을 통해 수용 될 수 있도록 추정하여 개발 중이다. 그리고 지난 20년간 몇몇의 주요 역을 잇는 일명 '베이 지역 철도(Bay Area Rapid Tranit)' BART프로젝트가 현재 개발 진행 중이다.
       </li>
      </ul>
      <h2>
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <div class="mw-references-wrap">
       <ol class="references">
        <li id="cite_note-1">
         <span class="mw-cite-backlink">
          ↑<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[ahref]</li><li>[search]</li><li>[ahref]</li>[ahref]<li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[ahref]</li>[link][search]<li>[ahref]</li>
         </span>
         <span class="reference-text">
          800m
         </span>
        </li>
       </ol>
      </div>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <ul>
       <li>
        <a class="external text" href="/" rel="nofollow">
         Transit-Oriented Development
        </a>
       </li>
       <li>
        <a class="external text" href="/index.html" rel="nofollow">
         Transit Oriented Development
        </a>
       </li>
       <li>
        <a class="external text" href="/web/20080915112310/.www.calgary.ca/todplanning/" rel="nofollow">
         Transit Oriented Development in Calgary, Alberta, Canada
        </a>
       </li>
       <li>
        <b>
         <span style="color: #555; font-size: smaller;" title="언어: 핀란드어">
          (핀란드어)[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li><li>[search]</li>[ahref]<li>[search]</li>
         </span>
        </b>
        <a class="external text" href="/web/20071214225628/.www.kaleva.fi/plus/index.cfm?j=698874" rel="nofollow">
         Transit oriented development growing in USA
        </a>
       </li>
       <li>
        <a class="external text" href="/display/live/TOD+Standard" rel="nofollow">
         TOD Standard: Version 2.0
        </a>
        , Institute for Transportation and Development Policy (ITDP), November 2013.
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a class="external text" href="/2391463/From_Intentions_to_Consequences_San_Diego_TOD_Design_Guidelines_and_Rio_Vista_West_Project" rel="nofollow">
         <i>
          From Intentions to Consequences: San Diego TOD Design Guidelines and Rio Vista West Project
         </i>
        </a>
        by Aseem Inam (American Planning Association).
       </li>
       <li>
        <a class="external text" href="/onlinepubs/shrp2/SHRP2_S2-C16-RR-1.pdf" rel="nofollow">
         Effect of Smart Growth Policies on Travel Demand
        </a>
        , Transportation Research Board, SHRP 2 Report S2-C16-RR-1, 2014.
       </li>
       <li>
        [ahref]
        
        ,
        <a href="/wiki/%EB%AF%B8%EA%B5%AD_%ED%9A%8C%EA%B3%84_%EA%B0%90%EC%82%AC%EC%9B%90" title="미국 회계 감사원">
         미국 회계 감사원
        </a>
        , November 2014.
       </li>
      </ul>
      <div aria-labelledby="대중교통" class="navbox" role="navigation" style="padding:3px">
       <table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
        <tbody>
         <tr>
          <th class="navbox-title" colspan="2" scope="col">
           <div class="plainlinks hlist navbar mini">
            <ul>
             <li class="nv-view">
              <a href="/wiki/%ED%8B%80:%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5" title="틀:대중교통">
               <abbr style=";;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none;" title="이 틀을 보기">
                v
               </abbr>
              </a>
             </li>
             <li class="nv-talk">
              [link]
              
             </li>
             <li class="nv-edit">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div id="대중교통" style="font-size:114%;margin:0 4em">
            [ahref]
            
           </div>
          </th>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           <a class="mw-redirect" href="/wiki/%EB%B2%84%EC%8A%A4_%EA%B5%90%ED%86%B5" title="버스 교통">
            버스 교통
           </a>
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [link]
              
              <ul>
               <li>
                [ahref]
                
               </li>
              </ul>
             </li>
             <li>
              [link]
              
              (BRT)
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%9C%A0%EB%9E%8C%EB%B2%84%EC%8A%A4&amp;action=edit&amp;redlink=1" title="유람버스 (없는 문서)">
               유람버스
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EC%9C%A0%EB%8F%84%EB%B2%84%EC%8A%A4" title="유도버스">
               유도버스
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a class="mw-redirect" href="/wiki/%EC%B2%A0%EB%8F%84%EB%8C%80%EC%B2%B4%EB%B2%84%EC%8A%A4" title="철도대체버스">
               철도대체버스
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%ED%8A%B8%EB%A1%A4%EB%A6%AC%EB%B2%84%EC%8A%A4" title="트롤리버스">
               트롤리버스
              </a>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           <a class="mw-redirect" href="/wiki/%EC%B2%A0%EB%8F%84_%EA%B5%90%ED%86%B5" title="철도 교통">
            철도 교통
           </a>
          </th>
          <td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EB%A7%88%EC%B0%A8%EC%B2%A0%EB%8F%84" title="마차철도">
               마차철도
              </a>
             </li>
             <li>
              [ahref]
              
              <ul>
               <li>
                [ahref]
                
               </li>
              </ul>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EB%9D%BC%EC%9D%B4%ED%8A%B8_%EB%A0%88%EC%9D%BC" title="라이트 레일">
               라이트 레일
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%A7%80%EC%97%AD%EC%B2%A0%EB%8F%84&amp;action=edit&amp;redlink=1" title="지역철도 (없는 문서)">
               지역철도
              </a>
              <ul>
               <li>
                [ahref]
                
               </li>
              </ul>
             </li>
             <li>
              <a href="/wiki/%EA%B3%A0%EB%AC%B4%ED%83%80%EC%9D%B4%EC%96%B4_%EC%A7%80%ED%95%98%EC%B2%A0" title="고무타이어 지하철">
               고무타이어 지하철
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%ED%8A%B8%EB%9E%A8%ED%8A%B8%EB%A0%88%EC%9D%B8" title="트램트레인">
               트램트레인
              </a>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           [ahref]
           
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EB%A6%AC%EB%AC%B4%EC%A7%84" title="리무진">
               리무진
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EC%8A%B9%ED%95%A9_%ED%83%9D%EC%8B%9C" title="승합 택시">
               승합 택시
              </a>
             </li>
             <li>
              <a href="/wiki/%ED%83%9D%EC%8B%9C" title="택시">
               택시
              </a>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           [ahref]
           
          </th>
          <td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [search]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%9C%A0%EB%8F%99%EC%A0%81_%EC%B9%B4%ED%92%80&amp;action=edit&amp;redlink=1" title="유동적 카풀 (없는 문서)">
               유동적 카풀
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%8B%A4%EC%8B%9C%EA%B0%84_%EC%B9%B4%ED%92%80&amp;action=edit&amp;redlink=1" title="실시간 카풀 (없는 문서)">
               실시간 카풀
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           <a href="/wiki/%ED%95%B4%EC%9A%B4" title="해운">
            해운
           </a>
           ·
           [link]
           
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              <a class="new" href="/w/index.php?title=%EC%BC%80%EC%9D%B4%EB%B8%94_%ED%8E%98%EB%A6%AC&amp;action=edit&amp;redlink=1" title="케이블 페리 (없는 문서)">
               케이블 페리
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EC%88%98%EC%A4%91%EC%9D%B5%EC%84%A0" title="수중익선">
               수중익선
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EC%88%98%EC%83%81_%ED%83%9D%EC%8B%9C" title="수상 택시">
               수상 택시
              </a>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           기타 교통수단
          </th>
          <td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [link]
              
              <ul>
               <li>
                <a href="/wiki/%EC%BC%80%EC%9D%B4%EB%B8%94%EC%B9%B4" title="케이블카">
                 케이블카
                </a>
               </li>
              </ul>
             </li>
             <li>
              <a href="/wiki/%ED%95%AD%EA%B3%B5%EC%82%AC" title="항공사">
               항공사
              </a>
             </li>
             <li>
              <a href="/wiki/%EC%97%AC%EA%B0%9D%EA%B8%B0" title="여객기">
               여객기
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%9E%90%EC%A0%84%EA%B1%B0_%EB%8C%80%EC%97%AC&amp;action=edit&amp;redlink=1" title="자전거 대여 (없는 문서)">
               자전거 대여
              </a>
             </li>
             <li>
              <a href="/wiki/%EC%B9%B4%EC%85%B0%EC%96%B4%EB%A7%81" title="카셰어링">
               카셰어링
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           교통상의 지점
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%ED%99%95%EC%9E%A5%ED%98%95_%EB%B2%84%EC%8A%A4_%EC%A0%95%EB%A5%98%EC%9E%A5&amp;action=edit&amp;redlink=1" title="확장형 버스 정류장 (없는 문서)">
               확장형 버스 정류장
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EB%B2%84%EC%8A%A4_%ED%84%B0%EB%AF%B8%EB%84%90" title="버스 터미널">
               버스 터미널
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EB%B2%84%EC%8A%A4_%EB%8C%80%ED%94%BC%EC%86%8C&amp;action=edit&amp;redlink=1" title="버스 대피소 (없는 문서)">
               버스 대피소
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EB%8F%84%EC%8B%9C%EA%B0%84_%EC%9D%B4%EB%8F%99%EA%B2%BD%EB%A1%9C&amp;action=edit&amp;redlink=1" title="도시간 이동경로 (없는 문서)">
               도시간 이동경로
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EA%B2%A9%EB%82%A9%EA%B3%A0" title="격납고">
               격납고
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%ED%99%98%EC%8A%B9%EC%97%AD" title="환승역">
               환승역
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EC%A0%84%EC%B2%A0%EC%97%AD" title="전철역">
               전철역
              </a>
             </li>
             <li>
              <a href="/wiki/%ED%8C%8C%ED%81%AC_%EC%95%A4%EB%93%9C_%EB%9D%BC%EC%9D%B4%EB%93%9C" title="파크 앤드 라이드">
               파크 앤드 라이드
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%ED%81%90_%EC%A0%90%ED%94%84&amp;action=edit&amp;redlink=1" title="큐 점프 (없는 문서)">
               큐 점프
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%ED%83%9D%EC%8B%9C_%EC%8A%B9%EC%B0%A8%EC%9E%A5" title="택시 승차장">
               택시 승차장
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a href="/wiki/%EC%8A%B9%EA%B0%95%EC%9E%A5" title="승강장">
               승강장
              </a>
             </li>
             <li>
              <a href="/wiki/%EB%8C%80%ED%94%BC%EC%84%A0" title="대피선">
               대피선
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EC%A0%88%EC%97%B0_%EA%B5%AC%EA%B0%84" title="절연 구간">
               절연 구간
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5%EC%A0%84%EC%9A%A9%EC%A7%80%EA%B5%AC&amp;action=edit&amp;redlink=1" title="대중교통전용지구 (없는 문서)">
               대중교통전용지구
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%ED%99%98%EC%8A%B9%EC%84%BC%ED%84%B0&amp;action=edit&amp;redlink=1" title="환승센터 (없는 문서)">
               환승센터
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%88%98%EC%86%A1%EB%A7%9D&amp;action=edit&amp;redlink=1" title="수송망 (없는 문서)">
               수송망
              </a>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           <a href="/wiki/%EC%9E%85%EC%9E%A5%EA%B6%8C" title="입장권">
            입장권
           </a>
           및
           [link]
           
          </th>
          <td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              <a href="/wiki/%EC%9E%90%EB%8F%99_%EC%9A%94%EA%B8%88_%EC%A7%95%EC%88%98" title="자동 요금 징수">
               자동 요금 징수
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%ED%9A%8C%EC%86%A1" title="회송">
               회송
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%9A%B4%EC%9E%84%ED%9A%8C%EC%88%98%EC%9C%A8&amp;action=edit&amp;redlink=1" title="운임회수율 (없는 문서)">
               운임회수율
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%ED%86%B5%ED%95%A9_%EB%B0%9C%EA%B6%8C_%EC%8B%9C%EC%8A%A4%ED%85%9C&amp;action=edit&amp;redlink=1" title="통합 발권 시스템 (없는 문서)">
               통합 발권 시스템
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%88%98%EB%8F%99%EC%9A%B4%EC%9E%84%EC%88%98%EC%A7%91&amp;action=edit&amp;redlink=1" title="수동운임수집 (없는 문서)">
               수동운임수집
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%9A%B4%EC%9E%84_%ED%95%A0%EC%9D%B8_%EC%8B%9C%EC%8A%A4%ED%85%9C&amp;action=edit&amp;redlink=1" title="운임 할인 시스템 (없는 문서)">
               운임 할인 시스템
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%8A%A4%EB%A7%88%ED%8A%B8%EC%B9%B4%EB%93%9C_%EB%AA%A9%EB%A1%9D&amp;action=edit&amp;redlink=1" title="스마트카드 목록 (없는 문서)">
               스마트카드
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           시설
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              <a class="new" href="/w/index.php?title=%EC%9C%84%ED%83%81%EC%88%98%ED%99%94%EB%AC%BC&amp;action=edit&amp;redlink=1" title="위탁수화물 (없는 문서)">
               위탁수화물
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EC%B9%A8%EB%8C%80%EC%B0%A8" title="침대차">
               침대차
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           스케줄링
          </th>
          <td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EB%8F%84%EC%B0%A9%EC%95%8C%EB%A6%BC_%EB%AC%B8%EC%9E%90%ED%8C%90&amp;action=edit&amp;redlink=1" title="도착알림 문자판 (없는 문서)">
               도착알림 문자판
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%87%BC%ED%8A%B8_%ED%84%B4&amp;action=edit&amp;redlink=1" title="쇼트 턴 (없는 문서)">
               쇼트 턴
              </a>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           그 외
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%ED%98%BC%EC%9E%A1&amp;action=edit&amp;redlink=1" title="혼잡 (없는 문서)">
               혼잡
              </a>
             </li>
             <li>
              <a class="mw-redirect" href="/wiki/%ED%96%89%EC%84%A0%ED%91%9C" title="행선표">
               행선표
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EC%A0%81%EC%9E%90_%EB%85%B8%EC%84%A0&amp;action=edit&amp;redlink=1" title="적자 노선 (없는 문서)">
               적자 노선
              </a>
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/wiki/%EB%85%B8%EC%84%A0%EB%8F%84" title="노선도">
               노선도
              </a>
             </li>
             <li>
              <a class="new" href="/w/index.php?title=%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5%EA%B2%BD%EC%B0%B0&amp;action=edit&amp;redlink=1" title="대중교통경찰 (없는 문서)">
               대중교통경찰
              </a>
              <ul>
               <li>
                [link]
                
               </li>
              </ul>
             </li>
             <li>
              <a class="mw-selflink selflink">
               대중교통 지향 개발
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
            </ul>
           </div>
          </td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <noscript>
     </noscript>
    </div>
    <div class="printfooter">
     원본 주소 "
     [link]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      [ahref]
      
      :
      <ul>
       <li>
        [link]
        
       </li>
       <li>
        [link]
        
       </li>
       <li>
        <a href="/wiki/%EB%B6%84%EB%A5%98:%EB%8F%84%EC%8B%9C_%EA%B3%84%ED%9A%8D" title="분류:도시 계획">
         도시 계획
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <ul>
      <li id="pt-anonuserpage">
       로그인하지 않음
      </li>
      <li id="pt-anontalk">
       <a accesskey="n" href="/wiki/%ED%8A%B9%EC%88%98:%EB%82%B4%EC%82%AC%EC%9A%A9%EC%9E%90%ED%86%A0%EB%A1%A0" title="현재 사용하는 IP 주소에 대한 토론 문서 [n]">
        토론
       </a>
      </li>
      <li id="pt-anoncontribs">
       [ahref]
       
      </li>
      <li id="pt-createaccount">
       [link]
       
      </li>
      <li id="pt-login">
       [ahref]
       
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-main">
        <span>
         문서[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link]<li>[ahref]</li><li>[link]</li>[ahref]
        </span>
       </li>
       <li id="ca-talk">
        <span>
         <li>[ahref]</li>[ahref][search]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li class="collapsible selected" id="ca-view">
        <span>
         <a href="/wiki/%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5_%EC%A7%80%ED%96%A5_%EA%B0%9C%EB%B0%9C">
          읽기
         </a>
        </span>
       </li>
       <li class="collapsible" id="ca-edit">
        <span>
         [ahref][link]<li>[ahref]</li>[link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         <a accesskey="h" href="/w/index.php?title=%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5_%EC%A7%80%ED%96%A5_%EA%B0%9C%EB%B0%9C&amp;action=history" title="이 문서의 과거 편집 내역입니다. [h]">
          역사 보기
         </a>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
     <div id="p-search" role="search">
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     <a class="mw-wiki-logo" href="/wiki/%EC%9C%84%ED%82%A4%EB%B0%B1%EA%B3%BC:%EB%8C%80%EB%AC%B8" title="대문으로 가기">
     </a>
    </div>
    <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
     <h3 id="p-navigation-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-mainpage-description">
        [link]
        
       </li>
       <li id="n-portal">
        [ahref]
        
       </li>
       <li id="n-currentevents">
        [link]
        
       </li>
       <li id="n-recentchanges">
        <a accesskey="r" href="/wiki/%ED%8A%B9%EC%88%98:%EC%B5%9C%EA%B7%BC%EB%B0%94%EB%80%9C" title="위키의 최근 바뀐 목록 [r]">
         최근 바뀜
        </a>
       </li>
       <li id="n-index">
        [link]
        
       </li>
       <li id="n-randompage">
        <a accesskey="x" href="/wiki/%ED%8A%B9%EC%88%98:%EC%9E%84%EC%9D%98%EB%AC%B8%EC%84%9C" title="임의 문서 불러오기 [x]">
         임의 문서로
        </a>
       </li>
       <li id="n-help">
        <a href="/wiki/%EC%9C%84%ED%82%A4%EB%B0%B1%EA%B3%BC:%EB%8F%84%EC%9B%80%EB%A7%90" title="도움말">
         도움말
        </a>
       </li>
       <li id="n-sitesupport">
        <a href="/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_ko.wikipedia.org&amp;uselang=ko" title="지원을 기다립니다">
         기부
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        [link]
        
       </li>
       <li id="t-recentchangeslinked">
        [link]
        
       </li>
       <li id="t-upload">
        <a accesskey="u" href="/wiki/위키백과:파일_올리기" title="파일 올리기 [u]">
         파일 올리기
        </a>
       </li>
       <li id="t-specialpages">
        <a accesskey="q" href="/wiki/%ED%8A%B9%EC%88%98:%ED%8A%B9%EC%88%98%EB%AC%B8%EC%84%9C" title="모든 특수 문서의 목록 [q]">
         특수 문서 목록
        </a>
       </li>
       <li id="t-permalink">
        <a href="/w/index.php?title=%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5_%EC%A7%80%ED%96%A5_%EA%B0%9C%EB%B0%9C&amp;oldid=23101250" title="문서의 이 판에 대한 고유링크">
         고유 링크
        </a>
       </li>
       <li id="t-info">
        [link]
        
       </li>
       <li id="t-wikibase">
        <a accesskey="g" href="/wiki/Special:EntityPage/Q374221" title="데이터 저장소에 연결된 항목을 가리키는 링크 [g]">
         위키데이터 항목
        </a>
       </li>
       <li id="t-cite">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
     <h3 id="p-coll-print_export-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="coll-create_a_book">
        [link]
        
       </li>
       <li id="coll-download-as-rdf2latex">
        [link]
        
       </li>
       <li id="t-print">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
     <h3 id="p-lang-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li class="interlanguage-link interwiki-ar">
        <a class="interlanguage-link-target" href="/wiki/%D8%AA%D9%86%D9%85%D9%8A%D8%A9_%D9%85%D9%88%D8%AC%D9%87%D8%A9_%D8%B9%D8%A7%D8%A8%D8%B1%D8%A9" hreflang="ar" lang="ar" title="تنمية موجهة عابرة – 아랍어">
         العربية
        </a>
       </li>
       <li class="interlanguage-link interwiki-en">
        <a class="interlanguage-link-target" href="/wiki/Transit-oriented_development" hreflang="en" lang="en" title="Transit-oriented development – 영어">
         English
        </a>
       </li>
       <li class="interlanguage-link interwiki-fr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-he">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-it">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-ja">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-nl">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-ru">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-zh">
        [ahref]
        
       </li>
      </ul>
      <div class="after-portlet after-portlet-lang">
       <span class="wb-langlinks-edit wb-langlinks-link">
        [link]
        
       </span>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     이 문서는 2018년 11월 26일 (월) 22:47에 마지막으로 편집되었습니다.
    </li>
    <li id="footer-info-copyright">
     모든 문서는
     [ahref]
     
     에 따라 사용할 수 있으며, 추가적인 조건이 적용될 수 있습니다. 자세한 내용은
     [link]
     
     을 참고하십시오.
     <br>
      <li>[search]</li>[link]<li>[ahref]</li><li>[search]</li>[ahref][ahref]
     </br>
     Wikipedia®는 미국 및 다른 국가에 등록되어 있는
     [ahref]
     
     소유의 등록 상표입니다.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-privacy">
     <a class="extiw" href="/wiki/Privacy_policy" title="wmf:Privacy policy">
      개인정보 정책
     </a>
    </li>
    <li id="footer-places-about">
     [ahref]
     
    </li>
    <li id="footer-places-disclaimer">
     [link]
     
    </li>
    <li id="footer-places-developers">
     <a href="/wiki/Special:MyLanguage/How_to_contribute">
      개발자
     </a>
    </li>
    <li id="footer-places-cookiestatement">
     [link]
     
    </li>
    <li id="footer-places-mobileview">
     <a class="noprint stopMobileRedirectToggle" href="/w/index.php?title=%EB%8C%80%EC%A4%91%EA%B5%90%ED%86%B5_%EC%A7%80%ED%96%A5_%EA%B0%9C%EB%B0%9C&amp;mobileaction=toggle_view_mobile">
      모바일 보기
     </a>
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-copyrightico">
     [link]
     
    </li>
    <li id="footer-poweredbyico">
     [ahref]
     
    </li>
   </ul>
   <div style="clear: both;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0405
  </b>
 </body>
</html>
