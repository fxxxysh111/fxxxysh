<!DOCTYPE html>
<html lang="en-US" prefix="og: http://ogp.me/ns#">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <title>
   [area1][mkey1][keyword1][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="en_US" property="og:locale"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
  <meta content="summary_large_image" name="twitter:card"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:description"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:title"/>
  <meta content="@1071theboss" name="twitter:site"/>
  <meta content="http://1071theboss.com/wp-content/uploads/2018/03/appstore.png" name="twitter:image"/>
  <meta content="@1071theboss" name="twitter:creator"/>
  <meta content="v1" name="tec-api-version"/>
  <meta content="http://1071theboss.com" name="tec-api-origin"/>
  <div id="fb-root">
  </div>
 </head>
 <body class="home page-template-default page page-id-2 fl-builder tribe-no-js tribe-bar-is-disabled fl-theme-builder-header fl-theme-builder-footer fl-framework-bootstrap fl-preset-default fl-full-width fl-search-active" itemscope="itemscope" itemtype="https://schema.org/WebPage">
  <div class="fl-page">
   <header class="fl-builder-content fl-builder-content-89 fl-builder-global-templates-locked" data-overlay="0" data-overlay-bg="transparent" data-post-id="89" data-shrink="0" data-sticky="0" data-type="header" itemscope="itemscope" itemtype="http://schema.org/WPHeader">
    <div class="fl-row fl-row-full-width fl-row-bg-parallax fl-node-5aadbfbb265ae" data-node="5aadbfbb265ae" data-parallax-image="http://1071theboss.com/wp-content/uploads/2018/03/BOSS-red.jpg" data-parallax-speed="2">
     <div class="fl-row-content-wrap">
      <div class="fl-row-content fl-row-fixed-width fl-node-content">
       <div class="fl-col-group fl-node-5aad5fea4d49e fl-col-group-equal-height fl-col-group-align-center fl-col-group-custom-width" data-node="5aad5fea4d49e">
        <div class="fl-col fl-node-5aad5fea4d4c3 fl-col-small" data-node="5aad5fea4d4c3">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-photo fl-node-5aad5fea4d504" data-node="5aad5fea4d504">
           <div class="fl-module-content fl-node-content">
            <div class="fl-photo fl-photo-align-center" itemscope="" itemtype="https://schema.org/ImageObject">
             <div class="fl-photo-content fl-photo-img-png">
              [ahref]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="fl-col fl-node-5aad5fea4d4e3" data-node="5aad5fea4d4e3">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-button fl-node-5aad5fea4d563" data-node="5aad5fea4d563">
           <div class="fl-module-content fl-node-content">
            <div class="fl-button-wrap fl-button-width-full fl-button-left fl-button-has-icon">
             [link]
             
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-separator fl-node-5aad5fea4d5cb fl-visible-desktop-medium" data-node="5aad5fea4d5cb">
           <div class="fl-module-content fl-node-content">
            <div class="fl-separator">
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-button fl-node-5aad5fea4d582" data-node="5aad5fea4d582">
           <div class="fl-module-content fl-node-content">
            <div class="fl-button-wrap fl-button-width-full fl-button-left fl-button-has-icon">
             [ahref]
             
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-separator fl-node-5aad5fea4d5ea fl-visible-desktop-medium" data-node="5aad5fea4d5ea">
           <div class="fl-module-content fl-node-content">
            <div class="fl-separator">
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-button fl-node-5aad5fea4d5a2" data-node="5aad5fea4d5a2" id="Player3">
           <div class="fl-module-content fl-node-content">
            <div class="fl-button-wrap fl-button-width-full fl-button-left fl-button-has-icon">
             <a class="fl-button" href="#" role="button" target="_self">
              <i aria-hidden="true" class="fl-button-icon fl-button-icon-before fa fa-volume-up">
              </i>
              <span class="fl-button-text">
               Listen Live
              </span>
             </a>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="fl-row fl-row-full-width fl-row-bg-color fl-node-5aac7b38c349f" data-node="5aac7b38c349f">
     <div class="fl-row-content-wrap">
      <div class="fl-row-content fl-row-fixed-width fl-node-content">
       <div class="fl-col-group fl-node-5aac7b38c34c4 fl-col-group-equal-height fl-col-group-align-center fl-col-group-custom-width" data-node="5aac7b38c34c4">
        <div class="fl-col fl-node-5aac7b38c3506" data-node="5aac7b38c3506">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-menu fl-node-5aac7b38c3546" data-node="5aac7b38c3546">
           <div class="fl-module-content fl-node-content">
            <div class="fl-menu fl-menu-accordion-collapse fl-menu-responsive-toggle-medium-mobile">
             <button aria-label="Menu" class="fl-menu-mobile-toggle hamburger-label">
              <span class="svg-container">
               <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][ahref]<li>[search]</li>[search]
              </span>
              <span class="fl-menu-mobile-toggle-label">
               Menu[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[link]
              </span>
             </button>
             <div class="fl-clear">
             </div>
             <ul class="menu fl-menu-horizontal fl-toggle-arrows" id="menu-main">
              <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home current-menu-item page_item page-item-2 current_page_item" id="menu-item-250">
               <a href="/">
                Home
               </a>
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category" id="menu-item-239">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category" id="menu-item-454">
               <h1>
                <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
               </h1>
               [link]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children current-menu-ancestor current-menu-parent fl-has-submenu" id="menu-item-867">
               <div class="fl-has-submenu-container">
                [ahref]
                
                <span class="fl-menu-toggle">
                </span>
               </div>
               <ul class="sub-menu">
                <li class="menu-item menu-item-type-taxonomy menu-item-object-tribe_events_cat current-menu-item" id="menu-item-240">
                 [link]
                 
                </li>
                <li class="menu-item menu-item-type-taxonomy menu-item-object-tribe_events_cat" id="menu-item-866">
                 [ahref]
                 
                </li>
                <li class="menu-item menu-item-type-taxonomy menu-item-object-tribe_events_cat" id="menu-item-1631">
                 <a href="/events/category/community-events/">
                  Community Events
                 </a>
                </li>
               </ul>
              </li>
              <li class="menu-item menu-item-type-post_type menu-item-object-page" id="menu-item-1844">
               [link]
               
              </li>
              <li class="menu-item menu-item-type-post_type menu-item-object-page" id="menu-item-1612">
               [link]
               
              </li>
              <li class="menu-item menu-item-type-post_type menu-item-object-page" id="menu-item-2732">
               [link]
               
              </li>
              <li class="menu-item menu-item-type-post_type menu-item-object-page" id="menu-item-1611">
               <a href="/contact/">
                Contact
               </a>
              </li>
             </ul>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </header>
   <div class="fl-page-content" itemprop="mainContentOfPage">
    <div class="fl-content-full container">
     <div class="row">
      <div class="fl-content col-md-12">
       <article class="fl-post post-2 page type-page status-publish hentry" id="fl-post-2" itemscope="itemscope" itemtype="https://schema.org/CreativeWork">
        <div class="fl-post-content clearfix" itemprop="text">
         <div class="fl-builder-content fl-builder-content-2 fl-builder-content-primary fl-builder-global-templates-locked" data-post-id="2">
          <div class="fl-row fl-row-full-width fl-row-bg-parallax fl-node-5aa9f17b75b69" data-node="5aa9f17b75b69" data-parallax-image="http://1071theboss.com/wp-content/uploads/2018/03/BOSS-red.jpg" data-parallax-speed="2">
           <div class="fl-row-content-wrap">
            <div class="fl-row-content fl-row-fixed-width fl-node-content">
             <div class="fl-col-group fl-node-5aa9f17b75d2c fl-col-group-custom-width" data-node="5aa9f17b75d2c">
              <div class="fl-col fl-node-5aa9f17b75d4b" data-node="5aa9f17b75d4b">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-post-slider fl-node-5aa9f17b75d6a" data-node="5aa9f17b75d6a">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-post-slider" itemscope="itemscope" itemtype="https://schema.org/Blog">
                   <div class="fl-post-slider-wrapper">
                    <div class="fl-post-slider-post fl-post-slider-thumb fl-post-slider-has-image swiper-slide" itemscope="itemscope" itemtype="https://schema.org/BlogPosting">
                     <meta content="Generac Inverter Generator courtesy of Aggressive Power Systems!" itemid="http://1071theboss.com/generac-inverter-generator-courtesy-of-aggressive-power-systems/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage">
                      <meta content="2018-12-10" itemprop="datePublished">
                       <meta content="2018-12-11" itemprop="dateModified"/>
                       <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                        <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                       </div>
                       <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                        <meta content="http://1071theboss.com/author/miker/" itemprop="url">
                         <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                        </meta>
                       </div>
                       <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                        <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                        <meta content="1200" itemprop="width"/>
                        <meta content="628" itemprop="height"/>
                       </div>
                       <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                        <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                        <meta content="0" itemprop="userInteractionCount"/>
                       </div>
                       <div class="fl-post-slider-img">
                        <div class="fl-photo fl-photo-crop-panorama fl-photo-align-left" itemscope="" itemtype="https://schema.org/ImageObject">
                         <div class="fl-photo-content fl-photo-img-jpg">
                          [ahref]
                          
                         </div>
                        </div>
                       </div>
                       <div class="fl-post-slider-content">
                        <h3 class="fl-post-slider-title" itemprop="headline">
                         [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                        </h3>
                        <div class="fl-post-slider-feed-content swiper-no-swiping" itemprop="text">
                         <p>
                          Listen to Rob and Wendy every morning as they announce the “Charged Up for the Holiday Song of the Day”! When it plays on Friday, call in to win! For more info visit AgressivePowerSystems.com!<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[link]<li>[link]</li>[search]<li>[link]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                         </p>
                        </div>
                       </div>
                      </meta>
                     </meta>
                    </div>
                    <div class="fl-post-slider-post fl-post-slider-thumb fl-post-slider-has-image swiper-slide" itemscope="itemscope" itemtype="https://schema.org/BlogPosting">
                     <meta content="Kansas at the Hard Rock Hotel and Casino in Atlantic City – May 31st &amp; June 1st!" itemid="http://1071theboss.com/kansas-at-the-hard-rock-hotel-and-casino-in-atlantic-city-may-31st-june-1st/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                     <meta content="2018-12-10" itemprop="datePublished"/>
                     <meta content="2018-12-11" itemprop="dateModified"/>
                     <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </div>
                     <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                      <meta content="http://1071theboss.com/author/miker/" itemprop="url">
                       <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                      </meta>
                     </div>
                     <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                      <meta content="600" itemprop="width"/>
                      <meta content="315" itemprop="height"/>
                     </div>
                     <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                      <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                      <meta content="0" itemprop="userInteractionCount"/>
                     </div>
                     <div class="fl-post-slider-img">
                      <div class="fl-photo fl-photo-crop-panorama fl-photo-align-left" itemscope="" itemtype="https://schema.org/ImageObject">
                       <div class="fl-photo-content fl-photo-img-jpg">
                        [link]
                        
                       </div>
                      </div>
                     </div>
                     <div class="fl-post-slider-content">
                      <h3 class="fl-post-slider-title" itemprop="headline">
                       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                      </h3>
                      <div class="fl-post-slider-feed-content swiper-no-swiping" itemprop="text">
                       <p>
                        Listen to Jeff Rafter every afternoon for your chance to win a pair of tickets! For more info visit HardRockHotelAtlanticCity.com!
                       </p>
                      </div>
                     </div>
                    </div>
                    <div class="fl-post-slider-post fl-post-slider-thumb fl-post-slider-has-image swiper-slide" itemscope="itemscope" itemtype="https://schema.org/BlogPosting">
                     <meta content="Queen at Madison Square Garden in New York City – August 7th!" itemid="http://1071theboss.com/queen-at-madison-square-garden-in-new-york-city-august-7th/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                     <meta content="2018-12-10" itemprop="datePublished"/>
                     <meta content="2018-12-11" itemprop="dateModified"/>
                     <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </div>
                     <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                      <meta content="http://1071theboss.com/author/miker/" itemprop="url">
                       <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                      </meta>
                     </div>
                     <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                      <meta content="1200" itemprop="width"/>
                      <meta content="628" itemprop="height"/>
                     </div>
                     <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                      <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                      <meta content="0" itemprop="userInteractionCount"/>
                     </div>
                     <div class="fl-post-slider-img">
                      <div class="fl-photo fl-photo-crop-panorama fl-photo-align-left" itemscope="" itemtype="https://schema.org/ImageObject">
                       <div class="fl-photo-content fl-photo-img-jpg">
                        [link]
                        
                       </div>
                      </div>
                     </div>
                     <div class="fl-post-slider-content">
                      <h3 class="fl-post-slider-title" itemprop="headline">
                       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                      </h3>
                      <div class="fl-post-slider-feed-content swiper-no-swiping" itemprop="text">
                       <p>
                        Listen to Jeff Rafter every afternoon for your chance to win a pair of tickets before you can buy them! For more info visit Ticketmaster.com!<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><li>[ahref]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                       </p>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="fl-clear">
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-row fl-row-full-width fl-row-bg-photo fl-node-5aa9e6fc328a9" data-node="5aa9e6fc328a9">
           <div class="fl-row-content-wrap">
            <div class="fl-row-content fl-row-fixed-width fl-node-content">
             <div class="fl-col-group fl-node-5aad60faeb54b fl-col-group-equal-height fl-col-group-align-top fl-col-group-custom-width" data-node="5aad60faeb54b">
              <div class="fl-col fl-node-5aad60faeb5c5" data-node="5aad60faeb5c5">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-heading fl-node-5b0312de83bb0" data-node="5b0312de83bb0">
                 <div class="fl-module-content fl-node-content">
                  <h3 class="fl-heading">
                   [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                  </h3>
                 </div>
                </div>
                <div class="fl-module fl-module-separator fl-node-5b031369ceb09" data-node="5b031369ceb09">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-separator">
                  </div>
                 </div>
                </div>
                <div class="fl-module fl-module-post-grid fl-node-5b03128645f9f contest-post" data-node="5b03128645f9f">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-post-feed" itemscope="itemscope" itemtype="https://schema.org/Blog">
                   <div class="fl-post-feed-post fl-post-feed-image-beside fl-post-align-default post-2905 post type-post status-publish format-standard has-post-thumbnail hentry category-featured" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="12 Days of Christmas presented by Freehold Raceway Mall" itemid="http://1071theboss.com/12-days-of-christmas-presented-by-freehold-raceway-mall/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-12-10" itemprop="datePublished"/>
                    <meta content="2018-12-11" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/drocka/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="628" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-image">
                     [ahref]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-header">
                      <h2 class="fl-post-feed-title" itemprop="headline">
                       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
                      </h2>
                     </div>
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Listen to Rob &amp; Wendy each morning starting 12/12 and they’ll let you know the Classic Rock Christmas Song of the Day.  When you hear it play, be caller 107 to 732-774-4444 to win one of this seasons hottest gifts!
                      </p>
                      [link]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                   <div class="fl-post-feed-post fl-post-feed-image-beside fl-post-align-default post-2626 post type-post status-publish format-standard has-post-thumbnail hentry category-featured" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Mistletoe Rock featuring The Nerds at Bar Anticipation 12/13" itemid="http://1071theboss.com/michaels-feat-radiothon-mistletoe-rock-concert/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-11-18" itemprop="datePublished"/>
                    <meta content="2018-12-11" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/drocka/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="628" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-image">
                     [ahref]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-header">
                      <h2 class="fl-post-feed-title" itemprop="headline">
                       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
                      </h2>
                     </div>
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Join us for 107.1 The Boss presents “Mistletoe Rock” featuring The Nerds, 8pm at Bar Anticipation on December 13th! Tickets to “Mistletoe Rock” featuring The Nerds tickets will be available at Bar Anticipation in Lake Como for a $10 donation when doors open to the public starting at 8pm on December 13th.   All ticket proceeds will go to benefit Michael’s Feat.<li>[link]</li><li>[search]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref][search]
                      </p>
                      <a class="fl-post-feed-more" href="/michaels-feat-radiothon-mistletoe-rock-concert/" title="Mistletoe Rock featuring The Nerds at Bar Anticipation 12/13">
                       Learn More
                      </a>
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                  </div>
                  <div class="fl-clear">
                  </div>
                 </div>
                </div>
                <div class="fl-module fl-module-heading fl-node-5b8962760af37" data-node="5b8962760af37">
                 <div class="fl-module-content fl-node-content">
                  <h3 class="fl-heading">
                   [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                  </h3>
                 </div>
                </div>
                <div class="fl-module fl-module-separator fl-node-5b89627b4f469" data-node="5b89627b4f469">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-separator">
                  </div>
                 </div>
                </div>
                <div class="fl-module fl-module-post-grid fl-node-5b9aa90a4c633 contest-post" data-node="5b9aa90a4c633">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-post-feed" itemscope="itemscope" itemtype="https://schema.org/Blog">
                   <div class="fl-post-feed-post fl-post-feed-image-beside fl-post-align-default post-2890 post type-post status-publish format-standard has-post-thumbnail hentry category-contests" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Imagination Movers Contest" itemid="http://1071theboss.com/imagination-movers-contest/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-12-10" itemprop="datePublished"/>
                    <meta content="2018-12-10" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/miker/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="630" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-image">
                     <a href="/imagination-movers-contest/" rel="bookmark" title="Imagination Movers Contest">
                     </a>
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-header">
                      <h2 class="fl-post-feed-title" itemprop="headline">
                       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
                      </h2>
                     </div>
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Enter for your chance to win a family 4-pack of tickets to see the Imagination Movers at the Event Center at iPlay America on Friday, December 28th!
                      </p>
                      [link]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                   <div class="fl-post-feed-post fl-post-feed-image-beside fl-post-align-default post-2848 post type-post status-publish format-standard has-post-thumbnail hentry category-contests" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Michael’s Furniture Gift Card Contest" itemid="http://1071theboss.com/michaels-furniture-gift-card-contest/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-12-05" itemprop="datePublished"/>
                    <meta content="2018-12-04" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/miker/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="628" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-image">
                     [ahref]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-header">
                      <h2 class="fl-post-feed-title" itemprop="headline">
                       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
                      </h2>
                     </div>
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Enter for your chance to win a $2,000 gift card to Michael’s Furniture &amp; Mattress in Brick, NJ!
                      </p>
                      [ahref]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                   <div class="fl-post-feed-post fl-post-feed-image-beside fl-post-align-default post-333 post type-post status-publish format-standard has-post-thumbnail hentry category-contests" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Business of the Day" itemid="http://1071theboss.com/business-of-the-day/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-03-18" itemprop="datePublished"/>
                    <meta content="2018-11-19" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/drocka/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="630" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-image">
                     <a href="/business-of-the-day/" rel="bookmark" title="Business of the Day">
                     </a>
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-header">
                      <h2 class="fl-post-feed-title" itemprop="headline">
                       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
                      </h2>
                     </div>
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       107.1 The Boss and Windows on the Water at Surfrider Beach Club in Sea Bright want to brighten up your workday with a delicious delivery from Chocolate Carousel in Wall.  We could be stopping by your work place with a 107.1 The Boss gift box filled with Cake Pops, Chocolate covered pretzels, assorted baked goods and more for you and your co-workers. <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][search][ahref][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>
                      </p>
                      <a class="fl-post-feed-more" href="/business-of-the-day/" title="Business of the Day">
                       Enter Here
                      </a>
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                   <div class="fl-post-feed-post fl-post-feed-image-beside fl-post-align-default post-122 post type-post status-publish format-standard has-post-thumbnail hentry category-contests" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="NJ Lottery Contest" itemid="http://1071theboss.com/nj-lottery-contest/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-03-17" itemprop="datePublished"/>
                    <meta content="2018-11-19" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/drocka/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="630" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-image">
                     [ahref]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-header">
                      <h2 class="fl-post-feed-title" itemprop="headline">
                       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
                      </h2>
                     </div>
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Enter for your chance to win $50 worth of Scratch Off Games from the New Jersey Lottery! Anything can happen in Jersey! (Must be 21+ to Enter)
                      </p>
                      [ahref]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                  </div>
                  <div class="fl-clear">
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-row fl-row-full-width fl-row-bg-parallax fl-node-5c017c6244d42" data-node="5c017c6244d42" data-parallax-image="http://1071theboss.com/wp-content/uploads/2018/03/BOSS-red.jpg" data-parallax-speed="2" id="apps">
           <div class="fl-row-content-wrap">
            <div class="fl-row-content fl-row-fixed-width fl-node-content">
             <div class="fl-col-group fl-node-5c0177f46044e" data-node="5c0177f46044e">
              <div class="fl-col fl-node-5c0177f460508" data-node="5c0177f460508">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-html fl-node-5c01783753390" data-node="5c01783753390">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-html">
                   <center>
                    <div id="div-gpt-ad-1525284123630-0">
                    </div>
                   </center>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-row fl-row-full-width fl-row-bg-photo fl-node-5ac51110042e9" data-node="5ac51110042e9">
           <div class="fl-row-content-wrap">
            <div class="fl-row-content fl-row-fixed-width fl-node-content">
             <div class="fl-col-group fl-node-5ac51110044ae fl-col-group-equal-height fl-col-group-align-top fl-col-group-custom-width" data-node="5ac51110044ae">
              <div class="fl-col fl-node-5ac51110044e9" data-node="5ac51110044e9">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-heading fl-node-5ac515c009286" data-node="5ac515c009286">
                 <div class="fl-module-content fl-node-content">
                  <h3 class="fl-heading">
                   [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                  </h3>
                 </div>
                </div>
                <div class="fl-module fl-module-separator fl-node-5ac515f40e552" data-node="5ac515f40e552">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-separator">
                  </div>
                 </div>
                </div>
                <div class="fl-module fl-module-post-grid fl-node-5ac5111004523 contest-post" data-node="5ac5111004523">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-post-feed" itemscope="itemscope" itemtype="https://schema.org/Blog">
                   <div class="fl-post-feed-post fl-post-feed-image-beside-content fl-post-align-default post-2931 post type-post status-publish format-standard has-post-thumbnail hentry category-news tag-david-gilmour tag-nick-mason tag-pink-floyd tag-roger-waters" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Nick Mason On Pink Floyd Feud: “It’s Really Disappointing”" itemid="http://1071theboss.com/nick-mason-on-pink-floyd-feud-its-really-disappointing/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-12-11" itemprop="datePublished"/>
                    <meta content="2018-12-11" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/michelea/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="600" itemprop="width"/>
                     <meta content="600" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-header">
                     <h2 class="fl-post-feed-title" itemprop="headline">
                      [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
                     </h2>
                     <div class="fl-post-feed-meta">
                      <span class="fl-post-feed-author">
                       By
                       [link]
                       
                      </span>
                      <span class="fl-sep">
                       | <li>[search]</li><li>[link]</li>[search]<li>[link]</li>[search]<li>[search]</li>
                      </span>
                      <span class="fl-post-feed-date">
                       December 11, 2018					<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>[link][search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li>[link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link]
                      </span>
                     </div>
                    </div>
                    <div class="fl-post-feed-image">
                     [link]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Founding Pink Floyd drummer Nick Mason has a message for his ex-band mates: Can’t we all just get along? “I don’t think we’re going to tour as Pink Floyd again,” he said in a recent interview. “But it would seem silly at this stage of our lives to still be fighting.” Speaking to Rolling Stone,…[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[ahref]<li>[link]</li><li>[link]</li><li>[link]</li>
                      </p>
                      [link]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                   <div class="fl-post-feed-post fl-post-feed-image-beside-content fl-post-align-default post-2929 post type-post status-publish format-standard has-post-thumbnail hentry category-news tag-queen" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Queen Celebrates Another Major Career Achievement" itemid="http://1071theboss.com/queen-celebrates-another-major-career-achievement/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-12-11" itemprop="datePublished"/>
                    <meta content="2018-12-11" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/michelea/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1200" itemprop="width"/>
                     <meta content="628" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-header">
                     <h2 class="fl-post-feed-title" itemprop="headline">
                      <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
                     </h2>
                     <div class="fl-post-feed-meta">
                      <span class="fl-post-feed-author">
                       By
                       [ahref]
                       
                      </span>
                      <span class="fl-sep">
                       | [ahref]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[link][ahref][ahref]<li>[ahref]</li><li>[ahref]</li><li>[search]</li>[ahref]<li>[link]</li><li>[search]</li>[ahref]<li>[ahref]</li><li>[link]</li><li>[search]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                      </span>
                      <span class="fl-post-feed-date">
                       December 11, 2018
                      </span>
                     </div>
                    </div>
                    <div class="fl-post-feed-image">
                     [ahref]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Congratulations to Queen! The band–who just announced a second date August 7 at Madison Square Garden–has learned that the song, “Bohemian Rhapsody,” is the most-streamed song from the 20th Century, as well as the most-streamed Classic Rock song of all time with over 1.6 billion streams. “So the River of Rock Music has metamorphosed into…[search][ahref][ahref]<li>[ahref]</li>[link]<li>[search]</li>[link][link]<li>[link]</li><li>[link]</li>
                      </p>
                      [search]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                   <div class="fl-post-feed-post fl-post-feed-image-beside-content fl-post-align-default post-2926 post type-post status-publish format-standard has-post-thumbnail hentry category-news tag-bruce-springsteen" itemscope="" itemtype="https://schema.org/BlogPosting">
                    <meta content="Bruce Springsteen Announces New York City Pop-Up Store" itemid="http://1071theboss.com/bruce-springsteen-announces-new-york-city-pop-up-store/" itemprop="mainEntityOfPage" itemscope="" itemtype="https://schema.org/WebPage"/>
                    <meta content="2018-12-11" itemprop="datePublished"/>
                    <meta content="2018-12-11" itemprop="dateModified"/>
                    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                    </div>
                    <div itemprop="author" itemscope="" itemtype="https://schema.org/Person">
                     <meta content="http://1071theboss.com/author/michelea/" itemprop="url">
                      <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
                     </meta>
                    </div>
                    <div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                     <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
                     <meta content="1000" itemprop="width"/>
                     <meta content="1000" itemprop="height"/>
                    </div>
                    <div itemprop="interactionStatistic" itemscope="" itemtype="https://schema.org/InteractionCounter">
                     <meta content="https://schema.org/CommentAction" itemprop="interactionType"/>
                     <meta content="0" itemprop="userInteractionCount"/>
                    </div>
                    <div class="fl-post-feed-header">
                     <h2 class="fl-post-feed-title" itemprop="headline">
                      <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
                     </h2>
                     <div class="fl-post-feed-meta">
                      <span class="fl-post-feed-author">
                       By
                       [link]
                       
                      </span>
                      <span class="fl-sep">
                       |
                      </span>
                      <span class="fl-post-feed-date">
                       December 11, 2018					[link][link][link][ahref][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[ahref][search]
                      </span>
                     </div>
                    </div>
                    <div class="fl-post-feed-image">
                     [ahref]
                     
                    </div>
                    <div class="fl-post-feed-text">
                     <div class="fl-post-feed-content" itemprop="text">
                      <p>
                       Attention last minute holiday shoppers: The Jersey Shore Santa Claus is coming to town! This weekend, Bruce Springsteen is giving fans a special holiday treat with the official opening of a Springsteen on Broadway pop-up retail store on December 14 and 15. Presented by Sony Music and Live Nation, the merchandise store will commemorate the final…
                      </p>
                      [ahref]
                      
                     </div>
                    </div>
                    <div class="fl-clear">
                    </div>
                   </div>
                  </div>
                  <div class="fl-clear">
                  </div>
                  <div class="fl-builder-pagination">
                   <ul class="page-numbers">
                    <li>
                     <span aria-current="page" class="page-numbers current">
                      1<li>[link]</li><li>[search]</li>[link][ahref][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>
                     </span>
                    </li>
                    <li>
                     <a class="page-numbers" href="/paged-4/2/">
                      2
                     </a>
                    </li>
                    <li>
                     [link]
                     
                    </li>
                    <li>
                     <span class="page-numbers dots">
                      …
                     </span>
                    </li>
                    <li>
                     [ahref]
                     
                    </li>
                    <li>
                     <a class="next page-numbers" href="/paged-4/2/">
                      Next »
                     </a>
                    </li>
                   </ul>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div class="fl-col fl-node-5ac511100455b fl-col-small" data-node="5ac511100455b">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-sidebar fl-node-5bfc21f7de37d" data-node="5bfc21f7de37d">
                 <div class="fl-module-content fl-node-content">
                  <aside class="widget_text widget fl-widget widget_custom_html" id="custom_html-2">
                   <div class="textwidget custom-html-widget">
                    <center>
                     <div id="div-gpt-ad-1520877525920-0" style="height:250px; width:300px;">
                     </div>
                    </center>
                   </div>
                  </aside>
                  <aside class="widget_text widget fl-widget widget_custom_html" id="custom_html-6">
                   <div class="textwidget custom-html-widget">
                    <center>
                     [link]
                     
                    </center>
                   </div>
                  </aside>
                  <aside class="widget fl-widget wunderground" id="wunderground_forecast_widget-3">
                   <h4 class="fl-widget-title">
                    Weather Forecast
                   </h4>
                   <div class="wu-wrapper wu-table-vertical wp_wunderground">
                    <div class="wu-forecast-wrapper">
                     <table class="wu-table-1">
                      <tbody>
                       <tr class="forecast">
                        <td class="wu-icon">
                        </td>
                        <td>
                         <div class="wu-forecast-body">
                          <div class="wu-forecast-header">
                           <span class="wu-day-title">
                            Wednesday[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link]<li>[ahref]</li><li>[ahref]</li><li>[link]</li>
                           </span>
                           <span class="wu-date">
                            12/12
                           </span>
                           <span class="wu-cond-pop" title="0% Chance of Precipitation">
                            0%
                           </span>
                          </div>
                          <div class="wu-cond-text">
                           Clear
                          </div>
                          <div class="wu-forecast-text">
                           Sunny, along with a few afternoon clouds. High 42F. Winds NW at 10 to 20 mph.
                          </div>
                         </div>
                        </td>
                       </tr>
                      </tbody>
                     </table>
                    </div>
                    <div class="wu-copyright">
                     <a href="/q/zmw:07753.2.99999" rel="external" title="View the Neptune City forecast on Wunderground.com">
                     </a>
                    </div>
                   </div>
                  </aside>
                  <aside class="widget_text extendedwopts-hide extendedwopts-mobile widget fl-widget widget_custom_html" id="custom_html-5">
                   <div class="textwidget custom-html-widget">
                    <center>
                     <div class="fb-page" data-adapt-container-width="true" data-hide-cover="false" data-href="https://www.facebook.com/1071theboss" data-show-facepile="false" data-small-header="false" data-width="300">
                      <blockquote cite="https://www.facebook.com/1071theboss" class="fb-xfbml-parse-ignore">
                       [link]
                       
                      </blockquote>
                     </div>
                    </center>
                   </div>
                  </aside>
                  <aside class="widget_text widget fl-widget widget_custom_html" id="custom_html-4">
                   <div class="textwidget custom-html-widget">
                    <center>
                     <div id="div-gpt-ad-1520877525920-1" style="height:250px; width:300px;">
                     </div>
                    </center>
                   </div>
                  </aside>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-row fl-row-full-width fl-row-bg-parallax fl-node-5aad625916198" data-node="5aad625916198" data-parallax-image="http://1071theboss.com/wp-content/uploads/2018/03/BOSS-red.jpg" data-parallax-speed="2" id="apps">
           <div class="fl-row-content-wrap">
            <div class="fl-row-content fl-row-fixed-width fl-node-content">
             <div class="fl-col-group fl-node-5aad62226cb00" data-node="5aad62226cb00">
              <div class="fl-col fl-node-5aad62226cb23 fl-col-small" data-node="5aad62226cb23">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-photo fl-node-5aad62226cb81" data-node="5aad62226cb81">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-photo fl-photo-align-center" itemscope="" itemtype="https://schema.org/ImageObject">
                   <div class="fl-photo-content fl-photo-img-png">
                    [link]
                    
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div class="fl-col fl-node-5aad62226cb43 fl-col-small" data-node="5aad62226cb43">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-photo fl-node-5aad62226cba0" data-node="5aad62226cba0">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-photo fl-photo-align-center" itemscope="" itemtype="https://schema.org/ImageObject">
                   <div class="fl-photo-content fl-photo-img-png">
                    <a href="/store/apps/details?id=com.abacast.wwzyfm&amp;hl=en" itemprop="url" target="_self">
                    </a>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div class="fl-col fl-node-5aad62226cb62 fl-col-small" data-node="5aad62226cb62">
               <div class="fl-col-content fl-node-content">
                <div class="fl-module fl-module-photo fl-node-5aad62226cbbf" data-node="5aad62226cbbf">
                 <div class="fl-module-content fl-node-content">
                  <div class="fl-photo fl-photo-align-center" itemscope="" itemtype="https://schema.org/ImageObject">
                   <div class="fl-photo-content fl-photo-img-png">
                    <a href="/Press-Communications-LLC-107-1-Boss/dp/B0797PLT42/ref=sr_1_1?s=digital-skills&amp;ie=UTF8&amp;qid=1520879567&amp;sr=1-1&amp;keywords=107.1+The+Boss" itemprop="url" target="_self">
                    </a>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </article>
      </div>
     </div>
    </div>
   </div>
   <footer class="fl-builder-content fl-builder-content-108 fl-builder-global-templates-locked" data-post-id="108" data-type="footer" itemscope="itemscope" itemtype="http://schema.org/WPFooter">
    <div class="fl-row fl-row-full-width fl-row-bg-color fl-node-5aac9f1a9701b" data-node="5aac9f1a9701b">
     <div class="fl-row-content-wrap">
      <div class="fl-row-content fl-row-fixed-width fl-node-content">
       <div class="fl-col-group fl-node-5aac9f1a9707d" data-node="5aac9f1a9707d">
        <div class="fl-col fl-node-5aac9f1a971d8 fl-col-small" data-node="5aac9f1a971d8">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-heading fl-node-5aac9f1a976bb" data-node="5aac9f1a976bb">
           <div class="fl-module-content fl-node-content">
            <h3 class="fl-heading">
             [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
            </h3>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aaca0720d539" data-node="5aaca0720d539">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aaca0720d539">
              <p>
               [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<li>[link]</li>[link][ahref][search]<li>[link]</li>[ahref]<li>[search]</li>
              </p>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aac9f1a97383" data-node="5aac9f1a97383">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <i aria-hidden="true" class="fa fa-mobile-phone">
              </i>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aac9f1a97383">
              <p>
               Text us at 732-774-4444[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
              </p>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aac9f1a973a4" data-node="5aac9f1a973a4">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <i aria-hidden="true" class="fa fa-map-o">
              </i>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aac9f1a973a4">
              <p>
               2355 West Bangs Avenue
               <br/>
               Neptune, NJ 07753
              </p>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="fl-col fl-node-5aac9f1a97159 fl-col-small" data-node="5aac9f1a97159">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-heading fl-node-5aac9f1a974a2" data-node="5aac9f1a974a2">
           <div class="fl-module-content fl-node-content">
            <h3 class="fl-heading">
             [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
            </h3>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aac9f1a97423" data-node="5aac9f1a97423">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <a aria-hidden="true" aria-labelledby="fl-icon-text-5aac9f1a97423" href="/1071theboss" rel="noopener" tabindex="-1" target="_self">
               <i aria-hidden="true" class="fa fa-facebook-official">
               </i>
              </a>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aac9f1a97423">
              [link]
              
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aaca076bffda" data-node="5aaca076bffda">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              [link]
              
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aaca076bffda">
              <a href="/1071theboss" rel="noopener" target="_self">
               <p>
                Instagram
               </p>
              </a>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aaca0dfa0731" data-node="5aaca0dfa0731">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][ahref][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aaca0dfa0731">
              <a href="/1071theboss" rel="noopener" target="_self">
               <p>
                Twitter
               </p>
              </a>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="fl-col fl-node-5aac9f1a970d9 fl-col-small" data-node="5aac9f1a970d9">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-heading fl-node-5aac9f1a9763d" data-node="5aac9f1a9763d">
           <div class="fl-module-content fl-node-content">
            <h3 class="fl-heading">
             [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
            </h3>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aaca1946d500" data-node="5aaca1946d500">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              [link]
              
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aaca1946d500">
              [ahref]
              
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5ad511bb7bb15" data-node="5ad511bb7bb15">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <a aria-hidden="true" aria-labelledby="fl-icon-text-5ad511bb7bb15" href="/rules-and-regulations/" rel="noopener" tabindex="-1" target="_self">
               <i aria-hidden="true" class="fa fa-trophy">
               </i>
              </a>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5ad511bb7bb15">
              <a href="/rules-and-regulations/" rel="noopener" target="_self">
               <p>
                Rules &amp; Regulations[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
               </p>
              </a>
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aaca1c474b4f" data-node="5aaca1c474b4f">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <a aria-hidden="true" aria-labelledby="fl-icon-text-5aaca1c474b4f" href="/privacy-policy/" rel="noopener" tabindex="-1" target="_self">
               <i aria-hidden="true" class="fa fa-eye">
               </i>
              </a>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aaca1c474b4f">
              [link]
              
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5aaca1dd07575" data-node="5aaca1dd07575">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <a aria-hidden="true" aria-labelledby="fl-icon-text-5aaca1dd07575" href="/fm-profile/wwzy" rel="noopener" tabindex="-1" target="_blank">
               <i aria-hidden="true" class="fi-page-doc">
               </i>
              </a>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5aaca1dd07575">
              [link]
              
             </div>
            </div>
           </div>
          </div>
          <div class="fl-module fl-module-icon fl-node-5b23fd405b69e" data-node="5b23fd405b69e">
           <div class="fl-module-content fl-node-content">
            <div class="fl-icon-wrap">
             <span class="fl-icon">
              <li>[link]</li>[link]<li>[ahref]</li>[ahref]<li>[link]</li>[link][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[link]</li>
             </span>
             <div class="fl-icon-text" id="fl-icon-text-5b23fd405b69e">
              [ahref]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="fl-row fl-row-full-width fl-row-bg-color fl-node-5aac9f1a96ec9" data-node="5aac9f1a96ec9">
     <div class="fl-row-content-wrap">
      <div class="fl-row-content fl-row-fixed-width fl-node-content">
       <div class="fl-col-group fl-node-5aac9f1a96eed" data-node="5aac9f1a96eed">
        <div class="fl-col fl-node-5aac9f1a96f73" data-node="5aac9f1a96f73">
         <div class="fl-col-content fl-node-content">
          <div class="fl-module fl-module-rich-text fl-node-5aac9f1a96f98" data-node="5aac9f1a96f98">
           <div class="fl-module-content fl-node-content">
            <div class="fl-rich-text">
             <p style="text-align: center;">
              © 2018 107.1 The Boss. All Rights Reserved.
             </p>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </footer>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0240
  </b>
 </body>
</html>
