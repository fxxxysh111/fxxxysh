<!DOCTYPE html>
<html class="no-js" lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta content="" name="author"/>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="#da532c" name="msapplication-TileColor"/>
  <meta content="/static/favicon/mstile-144x144.png" name="msapplication-TileImage"/>
  <meta content="#ffffff" name="theme-color"/>
 </head>
 <body>
  <div class="page-content">
   <div class="main-nav main-nav-onepage easing-click-group bgc-transparent nav-absolute border-separator">
    <div class="__header bgc-info alert-banner">
     [ahref]
     
    </div>
    <div class="__header" style="background-color:#">
     <div class="container">
      <div class="nav-content-wrapper">
       <div class="pull-left">
        <div class="nav-info nav-item">
         <div>
          <i>
           Creative, Marketing and Digital Staffing Agency
          </i>
         </div>
        </div>
       </div>
       <div class="pull-right">
        <ul class="social nav-item">
         <li>
          [link]
          
         </li>
         <li>
          [link]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [link]
          
         </li>
         <li class="telephone">
          [link]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div class="__middle bgc-dark-o-1">
     <div class="container">
      <div class="nav-content-wrapper">
       <div class="pull-left">
        <div class="megatron inline logo-light">
         <div class="cell-vertical-wrapper">
          <div class="cell-middle">
           [ahref]
           
          </div>
         </div>
        </div>
       </div>
       <div class="pull-right">
        <nav class="main-menu easing-link-group">
         <ul>
          <li class="child selected">
           [link]
           
          </li>
          <li class="child sibling">
           <a href="/clients/">
            Clients
           </a>
          </li>
          <li class="child sibling">
           [ahref]
           
          </li>
          <li class="child sibling">
           [ahref]
           
          </li>
          <li class="child sibling">
           [ahref]
           
          </li>
          <li class="child sibling">
           [ahref]
           
          </li>
         </ul>
        </nav>
        <div class="nav-function nav-item">
         <a class="fullwidth btn-border btn-light" href="/login/" style="padding: 8px 10px 5px 10px">
          Log in
         </a>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="main-nav small-nav bgc-light fixed-tranformed-bg-light nav-fixed border-bottom easing-click-group __header">
    <div class="row bgc-primary">
     <div class="container">
      <div class="col-md-6 hidden-xs">
       <div class="pull-left">
        <div>
         <i>
          Creative, Marketing and Digital Staffing Agency
         </i>
        </div>
       </div>
      </div>
      <div class="col-md-6">
       <div class="pull-right social telephone">
        <a href="0">
         <i class="icon icon-phone-1">
         </i>
         <span style="margin-top: 0px;display: inline-block;vertical-align: middle;margin-left: 4px;
">
          (844) 465-4040
         </span>
        </a>
       </div>
      </div>
     </div>
    </div>
    <div class="container">
     <div class="nav-content-wrapper">
      <div class="pull-left">
       <div class="megatron inline logo-dark logo-only">
        <div class="cell-vertical-wrapper">
         <div class="cell-middle">
          [ahref]
          
         </div>
        </div>
       </div>
      </div>
      <div class="pull-right visible-lg">
       <nav class="main-menu easing-link-group">
        <ul>
         <li class="child selected">
          [link]
          
         </li>
         <li class="child sibling">
          [link]
          
         </li>
         <li class="child sibling">
          [link]
          
         </li>
         <li class="child sibling">
          [link]
          
         </li>
         <li class="child sibling">
          <a href="/events/">
           Events
          </a>
         </li>
         <li class="child sibling">
          <a href="/contact/">
           Contact
          </a>
         </li>
        </ul>
       </nav>
       <div class="nav-function nav-item">
        <a class="fullwidth btn-border btn-primary" href="/login/" style="padding: 8px 10px 5px 10px">
         Log in
        </a>
       </div>
      </div>
      <div class="pull-right nav-item hidden-lg">
       [ahref]
       
      </div>
     </div>
    </div>
   </div>
   <div class="mobile-nav easing-click-group bgc-primary">
    [ahref]
    
    <a class="megatron" href="/">
     <div class="logo" style="width:150px">
     </div>
    </a>
    <nav class="mobile-menu easing-link-group">
     <ul>
      <li class="child selected">
       [link]
       
      </li>
      <li class="child sibling">
       <a href="/clients/">
        Clients
       </a>
      </li>
      <li class="child sibling">
       <a href="/about/">
        About
       </a>
      </li>
      <li class="child sibling">
       [ahref]
       
      </li>
      <li class="child sibling">
       <a href="/events/">
        Events
       </a>
      </li>
      <li class="child sibling">
       <a href="/contact/">
        Contact
       </a>
      </li>
     </ul>
    </nav>
    <div class="search-area">
     <a class="fullwidth btn-border btn-light" href="/login/" style="padding: 8px 10px 5px 10px">
      Log in
     </a>
    </div>
    <div class="social-area">
     <ul class="social circle light">
      <li>
       <a href="/thebossgroup">
        <i class="icon icon-facebook-1">
        </i>
       </a>
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [search]
       
      </li>
     </ul>
    </div>
   </div>
   <header class="page-header bgc-dark-o-6 parallax-wrapper simple-header-no-bg">
    <div class="parallax-background" style="background-image: url('https://blrota-live-febe61eec01b4afba079f098112-c07efe5.divio-media.net/filer_public/b1/f5/b1f5c138-7a22-4e63-b5e6-891ca72e72cc/talent-header-bg.jpg'); background-position: center top; background-size: cover; background-repeat: no-repeat;">
    </div>
    <div class="container">
     <div class="header-content text-center cell-vertical-wrapper">
      <div class="cell-middle text-center col-md-12">
       <h1 class="extended text-responsive">
        [area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]
       </h1>
       <p class="text-responsive nmb common-serif">
        Search our jobs for opportunities that match your needs. [link]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li><li>[link]</li>[search]
       </p>
      </div>
     </div>
    </div>
   </header>
   <div class="page-body" id="page-body">
    <section class="page-section bgc-light" id="our-niche">
     <div class="container">
      <div class="row row">
       <div class="col-xs-12 col-sm-12 col-md-4 section-block large-icon">
        <div class="block-icon-box-vertical-2 large-icon">
         <div class="secondary icon-185055-painting-pallet-streamline circle-icon __icon">
         </div>
         <h3 class="__heading">
          [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
         </h3>
         <p class="__content">
          We represent graphic designers, art directors, creative directors, content writers and editors, illustrators, production artists, proofreaders and many other professionals. [ahref][search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>
         </p>
         <p class="__content">
          [link]
          
         </p>
        </div>
       </div>
       <div class="col-xs-12 col-sm-12 col-md-4 section-block">
        <div class="block-icon-box-vertical-2">
         <div class="circle-icon icon-185041-arrow-streamline-target __icon">
         </div>
         <h3 class="__heading">
          [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
         </h3>
         <p class="__content">
          We place account managers, brand and marketing managers, communications directors, SEO/SEM strategists and other marketing pros with well-known brands and organizations nationwide.
         </p>
         <p class="__content">
          [link]
          
         </p>
        </div>
       </div>
       <div class="col-xs-12 col-sm-12 col-md-4 section-block">
        <div class="block-icon-box-vertical-2">
         <div class="circle-icon icon-185020-macintosh __icon">
         </div>
         <h3 class="__heading">
          [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
         </h3>
         <p class="__content">
          We recruit and place web designers, UX/UI designers, front-end developers, mobile developers, web content creators, video producers and many others working in the digital space across the U.S.<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][ahref][search]
         </p>
         <p class="__content">
          [link]<li>[ahref]</li><li>[ahref]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][ahref]<li>[ahref]</li><li>[link]</li><li>[ahref]</li>
         </p>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section pb-60 pt-60 bgc-dark-o-1" id="Awards">
     <div class="parallax-background" style="background-image: url('https://blrota-live-febe61eec01b4afba079f098112-c07efe5.divio-media.net/filer_public/89/8c/898cdc88-944f-428c-bffc-913c29da075d/b-o-s-bg_02.jpg'); background-position: center center; background-size: length; background-repeat: no-repeat;">
     </div>
     <div class="news-letter">
      <div class="container">
       <div class="__content-wrapper row">
        <div class="col-md-7 col-xs-12 __content-left">
         <div class="cell-vertical-wrapper">
          <div class="cell-middle">
           <h2 class="extended mb-5">
            <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
           </h2>
           <p class="mb-20 fz-5">
            <p>
             The BOSS Group has been named a Best Of Staffing Client and Best of Staffing Talent award winner for the eighth consecutive years. Administered by Inavero in partnership with CareerBuilder, this award recognizes companies who receive high marks for superior client satisfaction. The BOSS Group is the only creative staffing provider to be recognized in both categories for the last eight years.
            </p>
           </p>
          </div>
         </div>
        </div>
        <div class="fadeInRight wow __content-right col-xs-12 col-md-5">
         <div class="cell-vertical-wrapper">
          <div class="cell-middle">
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section bgc-light border-bottom">
     <div class="container">
      <div class="row">
       <div class="col-md-12">
        <header class="hr-header section-header">
         <h2 class="smb extended" style="text-align: center;">
          [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
         </h2>
         <div class="separator-2-color" style="text-align: center;">
         </div>
         <p class="col-md-8 col-md-push-2 common-serif center" style="text-align: center;">
          The BOSS Group has an easy four-step process. Get started today to find work with our amazing clients.
         </p>
        </header>
       </div>
      </div>
      <div class="row">
       <div class="group-process large-icon">
        <div class="col-md-12 block-process">
         <h6 class="__title">
          STEP 01: SEARCH JOBS
         </h6>
         <div class="__icon">
          <div class="icon-magnifying-glass circle-icon">
          </div>
         </div>
         <p class="__content">
          Use our job search tool to find jobs that interest you. Search using keywords, city or zip code to find temporary and full-time opportunities.<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link]<li>[link]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>[search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][link]
         </p>
        </div>
        <div class="col-md-12 block-process">
         <h6 class="__title">
          STEP 02: APPLY
         </h6>
         <div class="__icon">
          <div class="icon-185083-like-love-streamline circle-icon">
          </div>
         </div>
         <p class="__content">
          View specific details of each open job. When you are ready to apply, create a profile and attach your resume. It's that simple!
         </p>
        </div>
        <div class="col-md-12 block-process">
         <h6 class="__title">
          STEP 03: MEET YOUR RECRUITER
         </h6>
         <div class="__icon">
          <div class="icon-185081-speech-streamline-talk-user circle-icon">
          </div>
         </div>
         <p class="__content">
          Talk to a recruiter on the phone, or schedule a personal interview. Tell us all about your unique talents so we can find the job that's right for you. <li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li>[link][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
         </p>
        </div>
        <div class="col-md-12 block-process">
         <h6 class="__title">
          STEP 04: START WORKING
         </h6>
         <div class="__icon">
          <div class="icon-flag circle-icon">
          </div>
         </div>
         <p class="__content">
          Start working on a temporary assignment or on your next career move. We take care of the payroll details so you get paid weekly.
         </p>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section pb-60 pt-60 bgc-dark-o-2" id="Awards">
     <div class="parallax-background" style="background-image: url('https://blrota-live-febe61eec01b4afba079f098112-c07efe5.divio-media.net/filer_public/bb/e5/bbe57f58-1b80-4d8f-9201-879294308cc6/2018-023-cc_web_parallax_bg_2100x1400_12.jpg'); background-position: center center; background-size: length; background-repeat: no-repeat;">
     </div>
     <div class="">
      <div class="container">
       <div class="__content-wrapper row">
        <div class="__content-right fadeInLeft mb-20 wow col-xs-12 col-md-4">
         <div class="text-center cell-vertical-wrapper">
          <div class="cell-middle">
          </div>
         </div>
        </div>
        <div class="col-md-8 col-xs-12 __content-left">
         <div class="cell-vertical-wrapper">
          <div class="cell-middle">
           <h2 class="extended mb-5">
            [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
           </h2>
           <p class="mb-20 fz-5">
            <p>
             We invite creative professionals within the disciplines of print design, web development, marketing, media, editorial, social media, digital, video and many other creative disciplines to join us at our bi-monthly events in seven U.S. cities.<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li>[search]<li>[ahref]</li>
            </p>
            <p>
             [ahref]
             
            </p>
           </p>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section one-child bgc-gray-lightest" id="benefits">
     <div class="container">
      <header class="hr-header section-header text-center">
       <h2 class="smb extended">
        [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
       </h2>
       <div class="separator-2-color" style="text-align: center;">
       </div>
       <h4 class="col-md-8 col-md-push-2 common-serif center">
        We care about you, so enjoy these perks.
       </h4>
      </header>
      <div class="group-icon-box-border-container">
       <div class="clearfix __container-inner">
        <div class="__border-item-darker">
         <div class="wow fadeInUp block-icon-box-vertical">
          <div class="icon-wallet simple-icon __icon">
          </div>
          <h4 class="__heading smb">
           WEEKLY PAYCHECK
          </h4>
          <p class="__content">
           Receive prompt weekly pay upon submittal and approval of your timesheet, as well as holiday pay when eligible.[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
          </p>
         </div>
        </div>
        <div class="__border-item-darker">
         <div class="wow fadeInUp block-icon-box-vertical">
          <div class="icon-185077-first-aid-medecine-shield-streamline simple-icon __icon">
          </div>
          <h4 class="__heading smb">
           HEALTH INSURANCE
          </h4>
          <p class="__content">
           Take advantage of our benefits package including medical, dental and vision. Get peace of mind to stay healthy.
          </p>
         </div>
        </div>
        <div class="__border-item-darker">
         <div class="wow fadeInUp block-icon-box-vertical">
          <div class="simple-icon __icon icon-185073-book-dowload-streamline">
          </div>
          <h4 class="__heading smb">
           401(K) RETIREMENT
          </h4>
          <p class="__content">
           Enroll in our 401(k) retirement plan with company matching when eligible. We know how important saving and investing is for you.<li>[link]</li><li>[search]</li><li>[search]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li><li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li>[search][search]
          </p>
         </div>
        </div>
        <div class="__border-item-darker">
         <div class="wow fadeInUp block-icon-box-vertical">
          <div class="icon-185072-book-read-streamline simple-icon __icon">
          </div>
          <h4 class="__heading smb">
           SUPPLEMENTAL INSURANCE
          </h4>
          <p class="__caption">
           Get extra coverage with access to short term, life &amp; disability insurance, as well as accident and critical illness insurance. <li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </p>
         </div>
        </div>
        <div class="__border-item-darker">
         <div class="wow fadeInUp block-icon-box-vertical">
          <div class="simple-icon icon-185085-happy-smiley-streamline __icon">
          </div>
          <h4 class="__heading smb">
           DEDICATED HR SUPPORT
          </h4>
          <p class="__caption">
           We live and breathe excellence in customer service because we care about you. No matter what issue arises, we are here to help.[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]<li>[link]</li>
          </p>
         </div>
        </div>
        <div class="__border-item-darker">
         <div class="wow fadeInUp block-icon-box-vertical">
          <div class="icon-185083-like-love-streamline simple-icon __icon">
          </div>
          <h4 class="__heading smb">
           TALENT OF THE QUARTER
          </h4>
          <p class="__caption">
           Get the chance to be recognized for your amazing work while exemplifying the BOSS core values.
          </p>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section no-padding">
     <div class="call-to-action-common bgc-info">
      <div class="container">
       <div class="row __content-wrapper">
        <div class="col-lg-9 col-md-8 col-xs-12 __content-left">
         <div class="cell-vertical-wrapper">
          <div class="cell-middle">
           <h2 class="responsive">
            [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
           </h2>
          </div>
         </div>
        </div>
        <div class="fadeInRight __content-right wow col-xs-12 col-lg-3 col-md-4">
         <div class="cell-vertical-wrapper">
          <div class="cell-middle">
           [ahref]
           
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section pt-40 bgc-light">
     <div class="row">
      <div class="col-md-12">
       <header class="hr-header section-header">
        <h2 class="smb extended" style="text-align: center;">
         <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
        </h2>
        <div class="separator-2-color" style="text-align: center;">
        </div>
        <p class="col-md-8 col-md-push-2 center" style="text-align: center;">
         We work with amazing talent. Each quarter, we recognize a professional who we feel best exemplifies The BOSS Group core values of Service Excellence, Passionate Performance, Entrepreneurial Spirit and Employee Centricity. Top performers are selected based on their contributions and impact to our clients as well as their representation of our values. Meet our winners.
        </p>
       </header>
      </div>
     </div>
     <div class="team">
      <div class="container">
       <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-3">
         <div class="block-team">
          <div class="__image">
           <div class="">
           </div>
          </div>
          <div class="__info">
           <h4 class="__name">
            <a href="/talent-of-the-quarter/profile/cheun-haas/">
             Cheun Haas
            </a>
           </h4>
           <p class="__role font-serif-italic">
            Q2
/ 2018
           </p>
           <p class="__text">
            Cheun Haas is honored as the Q2 2018 Talent of the Quarter Award recipient.
           </p>
          </div>
         </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3">
         <div class="block-team">
          <div class="__image">
           <div class="">
           </div>
          </div>
          <div class="__info">
           <h4 class="__name">
            <a href="/talent-of-the-quarter/profile/kelley-barnes/">
             Kelley Barnes
            </a>
           </h4>
           <p class="__role font-serif-italic">
            Q1
/ 2018
           </p>
           <p class="__text">
            We’re so excited to announce that Kelly Barnes has received the Q1 Talent of the Quarter Award.
           </p>
          </div>
         </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3">
         <div class="block-team">
          <div class="__image">
           <div class="">
           </div>
          </div>
          <div class="__info">
           <h4 class="__name">
            <a href="/talent-of-the-quarter/profile/lauren-johnson/">
             Lauren Johnson
            </a>
           </h4>
           <p class="__role font-serif-italic">
            Q4
/ 2017
           </p>
           <p class="__text">
            We are so proud to announce that Lauren Johnson has received the Q4 Talent of the Quarter Award.
           </p>
          </div>
         </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3">
         <div class="block-team">
          <div class="__image">
           <div class="">
           </div>
          </div>
          <div class="__info">
           <h4 class="__name">
            [ahref]
            
           </h4>
           <p class="__role font-serif-italic">
            Q3
/ 2017[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[link]</li>[link][ahref]<li>[search]</li>
           </p>
           <p class="__text">
            We are so excited to recognize Ira Hellman with the Q3 Talent of the Quarter Award.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="row">
       </div>
      </div>
     </div>
     <div class="container text-center">
      [ahref]
      
     </div>
    </section>
    <section class="page-section pt-40 bgc-gray-lightest">
     <div class="container">
      <div class="row">
       <div class="col-md-8 col-md-offset-2">
        <header class="hr-header section-header">
         <h2 class="smb extended" style="text-align: center;">
          <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
         </h2>
         <div class="separator-2-color" style="text-align: center;">
         </div>
        </header>
        <div class="slider slide block-testimonial-2-wrapper control-nav">
         <div class="block-testimonial-4">
          <div class="__content text-center">
           <i class="fa fa-quote-right">
           </i>
           <p class="font-serif-italic">
            You guys have been an excellent resource in getting my foot in the door in my field. I'm forever grateful!
           </p>
           <h6>
            Web Designer
           </h6>
          </div>
         </div>
         <div class="block-testimonial-4">
          <div class="__content text-center">
           <i class="fa fa-quote-right">
           </i>
           <p class="font-serif-italic">
            My recruiter matched me with a position that was closely aligned with my skill-set. I was hired within 24 hours of my first interview with the hiring manager. BOSS recruiters definitely have a good eye for finding the right fit for both talent and client. <li>[search]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><li>[ahref]</li>
           </p>
           <h6>
            Senior Graphic Designer
           </h6>
          </div>
         </div>
         <div class="block-testimonial-4">
          <div class="__content text-center">
           <i class="fa fa-quote-right">
           </i>
           <p class="font-serif-italic">
            My recruiter is awesome in staying in touch and following up on my progress. I love the effort of making social events happen and their fast problem solving whenever I have a concern.
           </p>
           <h6>
            Marketing Manager
           </h6>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="page-section">
     <div class="container">
      <div class="row">
       <div class="col-md-8 col-md-offset-2">
        <header class="hr-header section-header center">
         <h2 class="smb extended center" style="text-align: center;">
          [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
         </h2>
         <div class="separator-2-color" style="text-align: center;">
         </div>
        </header>
        <div class="accordion highlight-caret">
         <div class="accordion-header">
          <div class="__icon">
           <i>
           </i>
          </div>
          <div class="__title">
           <p class="font-heading mb-0">
            How to Work with The BOSS Group
           </p>
          </div>
         </div>
         <div class="accordion-content">
          <a href="/faqs/detail/what-positions-we-staff/">
           What positions do you staff for?
          </a>
          <br>
           <li>[link]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[link]</li><li>[ahref]</li><li>[search]</li>[ahref]
          </br>
          [ahref]
          
          <br>
           <li>[search]</li><li>[ahref]</li><li>[ahref]</li><li>[search]</li>[search]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </br>
          [link]
          
          <br>
           <li>[ahref]</li>[ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li>[link][ahref]
          </br>
          [link]
          
          <br/>
         </div>
         <div class="accordion-header">
          <div class="__icon">
           <i>
           </i>
          </div>
          <div class="__title">
           <p class="font-heading mb-0">
            Talent Benefits<li>[link]</li>[search]<li>[search]</li>[link][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>
           </p>
          </div>
         </div>
         <div class="accordion-content">
          [link]
          
          <br>
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li><li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][link]
          </br>
          [link]
          
          <br/>
         </div>
         <div class="accordion-header">
          <div class="__icon">
           <i>
           </i>
          </div>
          <div class="__title">
           <p class="font-heading mb-0">
            How to Get Paid
           </p>
          </div>
         </div>
         <div class="accordion-content">
          <a href="/faqs/detail/how-do-I-fill-out-a-timesheet/">
           How do I fill out a timesheet?
          </a>
          <br>
           <li>[ahref]</li>[search]<li>[link]</li>[ahref]<li>[link]</li>[link]<li>[link]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref]<li>[link]</li>[search][search][ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]
          </br>
          <a href="/faqs/detail/when-do-I-need-to-submit-my-timesheet-in-order-to-get-paid/">
           When do I need to submit my timesheet in order to get paid?
          </a>
          <br/>
          [ahref]
          
          <br>
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
          </br>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <div class="bgc-dark-o-1" style="background-image: url('https://blrota-live-febe61eec01b4afba079f098112-c07efe5.divio-media.net/filer_public/fc/31/fc315faa-0829-4250-ab93-64fa32c5c623/benefitsbg_02.jpg'); background-position: center top; background-size: cover; background-repeat: no-repeat;">
    </div>
   </div>
   <footer class="page-footer footer-preset-3" id="footer">
    <div class="footer-body bgc-gray-darker">
     <div class="container">
      <div class="row">
       <div class="col-md-4 col-xs-12">
        <div class="footer-widget-about">
         <div class="mb-30">
         </div>
         <p>
          Placing creative, marketing and digital talent with companies across the U.S is our area
of expertise. After 28 years in the creative staffing industry, we have perfected the
aptitude to match highly-skilled talent with our clients’ requirements. We offer
national staffing with best-in-class service. [search]<li>[link]</li>[ahref][link]<li>[link]</li>
         </p>
         <ul class="social circle">
          <li>
           <a href="/thebossgroup" target="_blank">
            <i class="icon icon-facebook-1">
            </i>
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/company/the-boss-group_2" target="_blank">
            <i class="icon icon-linkedin-1">
            </i>
           </a>
          </li>
         </ul>
        </div>
       </div>
       <div class="col-md-5 col-sm-7 col-xs-12">
        <div class="footer-widget-info">
         <h4>
          INFORMATION
         </h4>
         <div class="__content font-heading fz-6-ss __2-col">
          <div>
           <span>
            [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li>[search][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>
           </span>
           <span>
            [search]<li>[ahref]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
           <span>
            CLIENTS[ahref]<li>[search]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref][link]<li>[ahref]</li>[ahref]
           </span>
           <span>
            [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><li>[link]</li>[ahref][link]
           </span>
           <span>
            <li>[search]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref]<li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
           <span>
            <a href="/blog/">
             BLOG
            </a>
           </span>
          </div>
          <div>
           <span>
            <a href="/contact/">
             CONTACT
            </a>
           </span>
           <span>
            <a href="/jobs/creative/">
             CREATIVE POSITIONS
            </a>
           </span>
           <span>
            [link]
            
           </span>
           <span>
            <li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[search]</li>
           </span>
           <span>
            TEMPORARY STAFFING[search][link][search]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[search]</li><li>[link]</li>[search]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><li>[search]</li>[link]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
           </span>
           <span>
            <a href="/clients/creative-staffing-for-full-time-jobs/">
             FULL-TIME STAFFING
            </a>
           </span>
          </div>
         </div>
        </div>
       </div>
       <div class="col-md-3 col-sm-5 col-xs-12">
        <div class="footer-widget-info">
         <h4>
          OUR OFFICES
         </h4>
         <div class="__content font-heading fz-6-ss">
          <div>
           <span>
            <li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li><li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li>[link]<li>[search]</li>[ahref]
           </span>
           <span>
            [link]
            
           </span>
           <span>
            [link]
            
           </span>
           <span>
            <li>[link]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[ahref]
           </span>
           <span>
            <a href="/contact/metro-dallas/">
             DALLAS
            </a>
           </span>
           <span>
            [search][link]<li>[search]</li>[search]<li>[search]</li>[search][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
           </span>
           <span>
            NJ/NY[link]<li>[link]</li>[search]<li>[link]</li>[link][link]<li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><li>[search]</li>
           </span>
           <span>
            [ahref][ahref]<li>[link]</li><li>[ahref]</li><li>[ahref]</li>[search]<li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
           </span>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="footer-foot-1 bgc-primary">
     <div class="container text-center">
      <p class="font-heading fz-6-s">
       <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li><li>[ahref]</li>[search]<li>[search]</li>[ahref]
      </p>
     </div>
    </div>
   </footer>
   <button id="back-to-top-btn">
    <i class="icon-up-open-big">
    </i>
   </button>
   <div id="loadingcontainer">
    <div class="center-spinner">
     <h3>
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
    </div>
   </div>
   <div id="ttdUniversalPixelTag384c8aa1ace7415c80ffc5ce25a65978" style="display:none">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0248
  </b>
 </body>
</html>
