<!DOCTYPE doctype html>
<html class=" " lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][keyword1][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="0DE5BDFFCE78BCE3AD0414EC7947440C" name="msvalidate.01">
   <meta content="L3WTXTbO-wW6k0E248YDQ1tBfWAjssoGGdha2nug-Zc" name="google-site-verification"/>
   <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
   <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
   <meta content="width=device-width" name="viewport"/>
   <meta content="website" property="og:type"/>
   <meta content="https://images.hugoboss.com/is/image/boss/logo_social_sharing?$social_sharing$" property="og:image"/>
   <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
   <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
   <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
   <meta content="US" name="country"/>
   <meta content="en-US" name="language" scheme="rfc1766"/>
   <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="apple-mobile-web-app-title"/>
  </meta>
 </head>
 <body class="body en_US">
  <div class="pt_storefront" id="wrapper">
   <div id="browser-check">
    <noscript>
     <div class="browser-compatibility-alert">
      <p class="browser-error">
       JavaScript is disabled. Please enable JavaScript, or you won't be able to use all of the features of the Online Store.
      </p>
     </div>
    </noscript>
   </div>
   <header class="header-wrapper header-wrapper--allbrands">
    <div class="header-content-wrapper">
     <div class="header_alert">
     </div>
    </div>
    <nav class="main-header main-header--main-nav main-header--allbrands" data-brand-for-header="allbrands">
     <button class="main-header__menu-btn js-tabstart">
      <svg class="main-header__menu-btn-svg main-header__menu-btn-svg--menu">
       <title>
        Menu
       </title>
       <use xlink:href="#icon_menu">
       </use>
      </svg>
      <svg class="main-header__menu-btn-svg main-header__menu-btn-svg--close">
       <title>
        Close
       </title>
       <use xlink:href="#icon_close">
       </use>
      </svg>
     </button>
     [link]
     
     <div class="skiplink" id="skiplinkmain">
      [ahref]
      
     </div>
     <div class="main-logo main-logo--allbrands">
      <span class="main-logo__link-wrapper">
       [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li>[link]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][link]<li>[search]</li><li>[search]</li>
      </span>
     </div>
     <div class="header-search header-search--home">
      <button aria-label="Search" class="header-search__button header-search__button--allbrands" type="button" value="Search">
       <svg class="header-search__icon">
        <use xlink:href="#icon_search">
        </use>
       </svg>
       <span class="header-search__wcag">
        Search
<li>[ahref]</li>[link]<li>[search]</li>[search][ahref][link]<li>[link]</li><li>[link]</li>[link]<li>[ahref]</li>[ahref][link][link]<li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][ahref]<li>[search]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref]
       </span>
      </button>
      <div class="header-search__placeholder header-search__placeholder--allbrands font__copy">
       Search
      </div>
     </div>
     <div class="main-nav main-nav--allbrands widget" data-widgetclass="main-nav">
      <div class="skiplink" id="skipnav">
       <div class="skiplink__link">
        Skip to next navigation entry
       </div>
      </div>
      <div class="main-nav__brand-tabs">
       <ul class="main-nav__brand-list" role="tablist">
        <li class="main-nav__brand-listitem main-nav__brand-listitem--allbrands main-nav__brand-listitem--first main-nav__brand-listitem--active" data-active-class="main-nav__brand-listitem--active" data-slug="allbrands">
         [ahref]
         
        </li>
        <li class="main-nav__brand-listitem main-nav__brand-listitem--boss" data-active-class="main-nav__brand-listitem--boss-active" data-slug="boss">
         [ahref]
         
        </li>
        <li class="main-nav__brand-listitem main-nav__brand-listitem--hugo" data-active-class="main-nav__brand-listitem--hugo-active" data-slug="hugo">
         [link]
         
        </li>
       </ul>
      </div>
      <div class="main-nav__scroller">
       <section class="main-nav__brand-tab main-nav__brand-tab--allbrands" data-slug="allbrands" id="nav-allbrands" role="tabpanel">
        <div class="main-nav__container main-nav__container--active main-nav__container--first-level" id="nav-600000">
         <ul class="nav-list nav-list--first-level">
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level nav-list__listitem--first-level-inspiration">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           <a class="nav-list__link nav-list__link--allbrands nav-list__link--first-level" data-content-slot-to-toggle="content-slot-62000" data-nav-to-toggle="nav-62000" data-related-categories='{ "boss": "62000-1", "hugo": "62000-2"}' href="/us/sale/">
            <span>
             SALE
            </span>
           </a>
          </li>
         </ul>
        </div>
        <div class="main-nav__bottom-wrapper">
         <div class="page-width-wrapper">
          <div class="page-width-wrapper__inner page-width-wrapper__inner--nav">
           <div class="main-nav__container main-nav__container--second-level " id="nav-90000">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              New Arrivals
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-20000">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Men
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-27000" href="/us/men-shoes/">
               Shoes
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-21111" href="/us/men-features/">
               Features
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-10000">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Women
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-16100" href="/us/women-shoes/">
               Shoes
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-50000">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Holiday Gifts
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-52000" href="/us/all-brands/holiday-gifts/gifts-for-her/">
               Gifts for Her
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level main-nav__container--second-level-inspiration " id="nav-60000">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large nav-list__listitem--backbutton-inspiration" data-nav-to-toggle="nav-600000">
              <svg class="nav-list__back-arrow nav-list__back-arrow-inspiration">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Inspiration
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-60200" href="/us/inspiration-11/">
               HUGO
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-62000">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              SALE
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-62100" href="/us/sale-men/">
               Men
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="30000" id="nav-30000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-90000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30889" href="/us/men-new-arrivals-accessoires/">
               Accessories
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30885" href="/us/men-all-new-arrivals/">
               All New Arrivals
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="29000" id="nav-29000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-90000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="21000" id="nav-21000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/men-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21350" href="/us/men-shirts/">
               Shirts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="23400" href="/us/men-t-shirts/">
               T-Shirts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="27000" id="nav-27000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="24000" id="nav-24000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="23900" href="/us/men-bags-luggage/">
               Bags
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="24300" href="/us/men-wallets-key-rings/">
               Wallets and Key Rings
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="24888" href="/us/men-casual-socks-1/">
               All Accessories
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="24200" id="nav-24200">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="21111" id="nav-21111">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21029" href="/us/all-brands/men/features/boss-suit-guide/">
               BOSS Suit Guide
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21023" href="/us/all-brands/men/features/suit-separates/">
               Suit Separates
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="324888" href="/us/all-brands/men/features/premium-golf-collection/">
               Premium Golf Collection
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="11000" id="nav-11000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/women-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="12100" href="/us/women-jeans-2/">
               Jeans
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="16100" id="nav-16100">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="12800" href="/us/women-boots/">
               Boots
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="13200" href="/us/women-pumps/">
               Pumps
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [search]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="14000" id="nav-14000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="14300" href="/us/women-bags/">
               Bags
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="14900" href="/us/women-glasses/">
               Eyewear
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="15000" id="nav-15000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="15002" href="/us/women-boss-perfume/">
               BOSS Perfume
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="51000" id="nav-51000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59504" href="/us/all-brands/holiday-gifts/gifts-for-him/below-150/">
               Below $150
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="52000" id="nav-52000">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59518" id="nav-59518">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59511" href="/us/all-brands/holiday-gifts/holiday-attire/black-tie-for-him/">
               Black Tie for Him
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59522" id="nav-59522">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/all-brands/holiday-gifts/gift-guide/">
               Gift Guide
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59542" href="/us/all-brands/holiday-gifts/gift-guide/12-days-of-gifts/">
               12 Days of Gifts
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59523" id="nav-59523">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59528" href="/us/all-brands/holiday-gifts/holiday-stories/5-gifts-for-him/">
               5 Gifts for Him
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60100" id="nav-60100">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <h3>
               [area4][keyword4][symbolx][area4][keywordx][symbolx][bracketl8][bracketr8][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
              </h3>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60200" id="nav-60200">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="60001" href="/us/inspiration-2/">
               Fashion
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="62100" id="nav-62100">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-62000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="621111" href="/us/sale-men-sweaters-cardigans/">
               Sweaters and Sweatshirts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="621110" href="/us/sale-men-polos/">
               Polo Shirts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="62200" id="nav-62200">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-62000">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62208" href="/us/sale-women-jeans/">
               Jeans
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-90000">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-20000">
            <div class="hb-custom-menu-banner hb-custom-menu-banner--hide-small">
             [link]
             
             <div class="hb-custom-menu-banner__content">
              <div class="cms-textbox-item__headline cms-core__font__h2">
              </div>
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-10000">
            <div class="hb-custom-menu-banner hb-custom-menu-banner--hide-small">
             <a href="/us/search?cgid=29885" title="Shop Now">
             </a>
             <div class="hb-custom-menu-banner__content">
              <div class="cms-textbox-item__headline cms-core__font__h2" style="color:#fff">
              </div>
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-50000">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-60000">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-62000">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--mobile">
           </div>
          </div>
         </div>
        </div>
       </section>
       <section class="main-nav__brand-tab main-nav__brand-tab--boss" data-slug="boss" id="nav-boss" role="tabpanel">
        <div class="main-nav__container main-nav__container--active main-nav__container--first-level" id="nav-600000-1">
         <ul class="nav-list nav-list--first-level">
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level nav-list__listitem--first-level-inspiration">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [ahref]
           
          </li>
         </ul>
        </div>
        <div class="main-nav__bottom-wrapper">
         <div class="page-width-wrapper">
          <div class="page-width-wrapper__inner page-width-wrapper__inner--nav">
           <div class="main-nav__container main-nav__container--second-level " id="nav-90000-1">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-1">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              New Arrivals
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-20000-1">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-1">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Men
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-21000-1" href="/us/boss-men-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-24000-1" href="/us/boss-men-accessories/">
               Accessories
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-10000-1">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-1">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Women
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-11000-1" href="/us/boss-women-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-50000-1">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-1">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Holiday Gifts
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-59518-1" href="/us/boss/holiday-gifts/holiday-attire/">
               Holiday Attire
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-59522-1" href="/us/boss/holiday-gifts/gift-guide/">
               Gift Guide
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-59523-1" href="/us/boss/holiday-gifts/holiday-stories/">
               Holiday Stories
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level main-nav__container--second-level-inspiration " id="nav-60000-1">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large nav-list__listitem--backbutton-inspiration" data-nav-to-toggle="nav-600000-1">
              <svg class="nav-list__back-arrow nav-list__back-arrow-inspiration">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Inspiration
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-60001-1" href="/us/boss-men-shoes-tailored-2/">
               Fashion
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-60002-1" href="/us/boss/inspiration/guides/">
               Guides
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-62000-1">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-1">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              SALE
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="30000-1" id="nav-30000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-90000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30886-1" href="/us/boss-men-this-week/">
               This Week
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30888-1" href="/us/boss-men-new-arrivals-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30885-1" href="/us/boss-men-all-new-arrivals/">
               All New Arrivals
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="29000-1" id="nav-29000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-90000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="29886-1" href="/us/boss-women-this-week/">
               This Week
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="29885-1" href="/us/boss-women-all-new-arrivals/">
               All New Arrivals
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="21000-1" id="nav-21000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/boss-men-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="23800-1" href="/us/boss-men-tracksuits/">
               Tracksuits
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21900-1" href="/us/boss-men-beachwear/">
               Beachwear
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21888-1" href="/us/boss-men-beach-tops-1/">
               All Clothing
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="27000-1" id="nav-27000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="27250-1" href="/us/boss-men-trainers/">
               Sneakers
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="24000-1" id="nav-24000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="23500-1" href="/us/boss-men-belts/">
               Belts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="24300-1" href="/us/boss-men-wallets-key-rings/">
               Wallets and Key Rings
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="24510-1" href="/us/boss-men-ties-bow-ties-pocket-squares/">
               Ties and Pocket Squares
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="21111-1" id="nav-21111-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21120-1" href="/us/boss/men/features/jeans-fit-guide/">
               Jeans Fit Guide
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="324888-1" href="/us/boss-men-golf-clothing/">
               Premium Golf Collection
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="21124-1" href="/us/boss/men/features/gq-recommends/">
               GQ Recommends
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="11000-1" id="nav-11000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="11300-1" href="/us/boss-women-dresses-1/">
               Dresses
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="11888-1" href="/us/boss-women-jeans-1/">
               All Clothing
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="16100-1" id="nav-16100-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="14000-1" id="nav-14000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="14800-1" href="/us/boss-women-watches-1/">
               Watches
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="15000-1" id="nav-15000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="51000-1" id="nav-51000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59506-1" href="/us/boss/holiday-gifts/gifts-for-him/above-300/">
               Above $300
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59507-1" href="/us/boss/holiday-gifts/gifts-for-him/stocking-stuffers/">
               Stocking Stuffers
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="52000-1" id="nav-52000-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59513-1" href="/us/boss/holiday-gifts/gifts-for-her/below-150/">
               Below $150
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59514-1" href="/us/boss/holiday-gifts/gifts-for-her/150---300/">
               $150 - $300
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59516-1" href="/us/boss/holiday-gifts/gifts-for-her/stocking-stuffers/">
               Stocking Stuffers
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59521-1" href="/us/boss/holiday-gifts/gifts-for-her/all-gifts/">
               All Gifts
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59518-1" id="nav-59518-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59511-1" href="/us/boss/holiday-gifts/holiday-attire/black-tie-for-him/">
               Black Tie for Him
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59526-1" href="/us/boss/holiday-gifts/holiday-attire/cocktails-for-her/">
               Cocktails for Her
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59522-1" id="nav-59522-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59523-1" id="nav-59523-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60001-1" id="nav-60001-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/boss-men-shoes-tailored-2/">
               Fashion
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="194022-1" href="/us/boss-men-washable-suit/">
               The Washable Suit
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60002-1" id="nav-60002-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/boss/inspiration/guides/">
               Guides
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="124013" href="/us/boss-men-how-to-wear-a-scarf/">
               How to Wear Scarves
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="125000" href="/us/boss-men-shirt-shapes-dresscodes/">
               BOSS Shirts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60004-1" id="nav-60004-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="60054-1" href="/us/boss-men-sailing-inspiration/">
               Sailing Capsule
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60007-1" id="nav-60007-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/boss-men-voices-2/">
               Stories
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="60031-1" href="/us/boss-men-voices-3/">
               BOSS Movers and Makers
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60006-1" id="nav-60006-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/boss-men-voices-1/">
               Art &amp; Design
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="194000" href="/us/artprize2018/">
               Hugo Boss Art Prize 2018
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="62100-1" id="nav-62100-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-62000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/boss-sale-men/">
               Men
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62104-1" href="/us/boss-sale-men-pants/">
               Trousers
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62114-1" href="/us/boss-sale-men-underwear/">
               Bodywear
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="62200-1" id="nav-62200-1">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-62000-1">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62211-1" href="/us/boss-sale-women-tailored-jackets/">
               Blazers
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62255-1" href="/us/boss-sale-women-jackets-coats/">
               Jackets and Coats
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62272-1" href="/us/boss-sale-women-accessories/">
               Accessories
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-90000-1">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-20000-1">
            <div class="hb-custom-menu-banner hb-custom-menu-banner--hide-small">
             [link]
             
             <div class="hb-custom-menu-banner__content">
              <div class="cms-textbox-item__headline cms-core__font__h2">
              </div>
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-10000-1">
            <div class="hb-custom-menu-banner hb-custom-menu-banner--hide-small">
             [ahref]
             
             <div class="hb-custom-menu-banner__content">
              <div class="cms-textbox-item__headline cms-core__font__h2">
              </div>
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-50000-1">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-60000-1">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-62000-1">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--mobile">
           </div>
          </div>
         </div>
        </div>
       </section>
       <section class="main-nav__brand-tab main-nav__brand-tab--hugo" data-slug="hugo" id="nav-hugo" role="tabpanel">
        <div class="main-nav__container main-nav__container--active main-nav__container--first-level" id="nav-600000-2">
         <ul class="nav-list nav-list--first-level">
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [ahref]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [ahref]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [link]
           
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level nav-list__listitem--first-level-inspiration">
           <a class="nav-list__link nav-list__link--allbrands nav-list__link--first-level" data-content-slot-to-toggle="content-slot-60000-2" data-nav-to-toggle="nav-60000-2" data-related-categories='{ "boss": "60000-1"}' href="/us/hugo-inspiration-1/">
            <span>
             Inspiration
            </span>
           </a>
          </li>
          <li class="nav-list__listitem nav-list__listitem--first-level ">
           [ahref]
           
          </li>
         </ul>
        </div>
        <div class="main-nav__bottom-wrapper">
         <div class="page-width-wrapper">
          <div class="page-width-wrapper__inner page-width-wrapper__inner--nav">
           <div class="main-nav__container main-nav__container--second-level " id="nav-90000-2">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-2">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              New Arrivals
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-20000-2">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-2">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Men
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-21000-2" href="/us/hugo-men-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-21111-2" href="/us/hugo-men-specials/">
               Features
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-10000-2">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-2">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Women
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-50000-2">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-2">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Holiday Gifts
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              <a class="nav-list__link nav-list__link--second-level" data-nav-to-toggle="nav-52000-2" href="/us/hugo/holiday-gifts/gifts-for-her/">
               Gifts for Her
              </a>
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level main-nav__container--second-level-inspiration " id="nav-60000-2">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large nav-list__listitem--backbutton-inspiration" data-nav-to-toggle="nav-600000-2">
              <svg class="nav-list__back-arrow nav-list__back-arrow-inspiration">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              Inspiration
             </li>
             <li class="nav-list__listitem font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--second-level " id="nav-62000-2">
            <ul class="nav-list">
             <li class="nav-list__listitem nav-list__listitem--backbutton font__label font__label--large " data-nav-to-toggle="nav-600000-2">
              <svg class="nav-list__back-arrow ">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              SALE
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="30000-2" id="nav-30000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-90000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30888-2" href="/us/hugo-men-new-arrivals-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="30889-2" href="/us/hugo-men-new-arrivals-accessories/">
               Accessories
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="29000-2" id="nav-29000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-90000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="29888-2" href="/us/hugo-women-new-arrivals-clothing/">
               Clothing
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="29889-2" href="/us/hugo-women-new-arrivals-accessories/">
               Accessories
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="29885-2" href="/us/hugo-women-all-new-arrivals/">
               All New Arrivals
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="21000-2" id="nav-21000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="27000-2" id="nav-27000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="27100-2" href="/us/hugo-men-business-shoes/">
               Business Shoes
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="24000-2" id="nav-24000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="24300-2" href="/us/hugo-men-wallets-key-rings/">
               Wallets and Key Rings
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="21111-2" id="nav-21111-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-20000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="11000-2" id="nav-11000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="11900-2" href="/us/hugo-women-jackets-coats/">
               Jackets and Coats
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="11300-2" href="/us/hugo-women-dresses/">
               Dresses
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="16100-2" id="nav-16100-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/hugo-women-shoes/">
               Shoes
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="14000-2" id="nav-14000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-10000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="14200-2" href="/us/hugo-women-belts/">
               Belts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="51000-2" id="nav-51000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59505-2" href="/us/hugo/holiday-gifts/gifts-for-him/150---300/">
               $150 - $300
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59520-2" href="/us/hugo/holiday-gifts/gifts-for-him/all-gifts/">
               All Gifts
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="52000-2" id="nav-52000-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59513-2" href="/us/hugo/holiday-gifts/gifts-for-her/below-150/">
               Below $150
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59518-2" id="nav-59518-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="59510-2" href="/us/hugo/holiday-gifts/holiday-attire/office-party/">
               Office Party
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59522-2" id="nav-59522-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              <a class="nav-list__back-link" href="/us/hugo/holiday-gifts/gift-guide/">
               Gift Guide
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="59523-2" id="nav-59523-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-50000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60001-2" id="nav-60001-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="500800" href="/us/hugo-women-winter-warmers/">
               Winter warmers for her
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="500600" href="/us/hugo-watches-collection/">
               HUGO Watches
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="500601" href="/us/hugo/inspiration/fashion/hugo-personalization/">
               HUGO Personalization
              </a>
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="60005-2" id="nav-60005-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-60000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="500003" href="/us/hugo-fashion-show/">
               HUGO Fashion Show
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="62100-2" id="nav-62100-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-62000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62111-2" href="/us/hugo-sale-men-tailored-jackets/">
               Sport Coats
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62108-2" href="/us/hugo-sale-men-t-shirts/">
               T-Shirts
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__container main-nav__container--third-level" data-nav="62200-2" id="nav-62200-2">
            <ul class="nav-list nav-list--third-level">
             <li class="nav-list__listitem nav-list__listitem--third-level nav-list__listitem--backbutton nav-list__listitem--desktop-heading font__label font__label--large" data-nav-to-toggle="nav-62000-2">
              <svg class="nav-list__back-arrow">
               <use xlink:href="#icon_arrow_left">
               </use>
              </svg>
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62201-2" href="/us/hugo-sale-women-dresses/">
               Dresses
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [ahref]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              <a class="nav-list__link nav-list__link--third-level" data-nav-id="62255-2" href="/us/hugo-sale-women-jackets-coats/">
               Jackets and Coats
              </a>
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
             <li class="nav-list__listitem nav-list__listitem--third-level font__copy">
              [link]
              
             </li>
            </ul>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-90000-2">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-20000-2">
            <div class="hb-custom-menu-banner hb-custom-menu-banner--hide-small">
             <a href="/us/search?cgid=30885-2" title="Shop Now">
             </a>
             <div class="hb-custom-menu-banner__content">
              <div class="cms-textbox-item__headline cms-core__font__h2" style="color:#fff">
               New Arrivals
              </div>
              [link]
              
             </div>
            </div>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-10000-2">
            <div class="hb-custom-menu-banner hb-custom-menu-banner--hide-small">
             <a href="/us/search?cgid=29885-2" title="Shop Now">
             </a>
             <div class="hb-custom-menu-banner__content">
              <div class="cms-textbox-item__headline cms-core__font__h2">
               New Arrivals
              </div>
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-50000-2">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-60000-2">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--desktop " id="content-slot-62000-2">
           </div>
           <div class="main-nav__content-slot main-nav__content-slot--mobile">
           </div>
          </div>
         </div>
        </div>
       </section>
       <div class="additional-buttons">
        [link]
        
        [ahref]
        
       </div>
      </div>
     </div>
     <div class="context-nav context-nav--allbrands">
      <ul class="context-nav__list context-nav__list--allbrands">
       <li class="context-nav__list-item context-nav__list-item--chat">
        <a class="context-nav__link" data-toprighticonsnavigation="Chat" href="#" role="button" title="Chat">
         <svg class="context-nav__icon">
          <title>
           Chat
          </title>
          <use xlink:href="#icon_chat" xmlns:xlink="http://www.w3.org/1999/xlink">
          </use>
         </svg>
        </a>
       </li>
       <li class="context-nav__list-item context-nav__list-item--store-locator ">
        [ahref]
        
       </li>
       <li class="context-nav__list-item context-nav__list-item--account">
        [ahref]
        
       </li>
       <li class="context-nav__list-item context-nav__list-item--wishlist js-wishlist-data">
        <a class="context-nav__link" data-toprighticonsnavigation="Wishlist" href="/us/wishlist" title="My Wishlist">
         <svg class="context-nav__icon">
          <title>
           My Wishlist
          </title>
          <use xlink:href="#icon_favorite">
          </use>
         </svg>
         <span class="context-nav__list-item__counter context-nav__list-item__counter--allbrands js-wishlist-counter js-wishlist-counter-ref">
          <li>[ahref]</li>[ahref]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[link]</li>
         </span>
        </a>
       </li>
       <li class="context-nav__list-item context-nav__list-item--shopping-bag context-nav__list-item--shopping-bag--onepagecheckout">
        [link]
        
       </li>
      </ul>
     </div>
     <div class="display-none">
      <div class="js-checkout-back pocOverlay" id="checkout-back">
       <div class="form__wrapper--inner">
        <p>
         Are you Sure you want to leave the checkout?
		<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[search]</li><li>[link]</li>
        </p>
        [link]
        
        <button class="js-overlays__button-close button button--primary button--right button--s-full onePageCheckout__continue" type="submit" value="Zur Kasse">
         Continue with Checkout
        </button>
       </div>
      </div>
     </div>
    </nav>
    <div id="skipmain" tabindex="0">
    </div>
   </header>
   <div class="main-nav-backdrop main-nav-backdrop--allbrands">
   </div>
   <div class="header-spacer" tabindex="-1">
   </div>
   <div class="search-header">
    <div class="search-header__input-container">
     <button aria-label="Search" class="header-search__button header-search__button--allbrands" type="submit" value="Search">
      <svg class="header-search__icon" fill="#000000">
       <use xlink:href="#icon_search" xmlns:xlink="http://www.w3.org/1999/xlink">
       </use>
      </svg>
     </button>
     <div class="form__item form__item--search-header">
      <div class="search-header__search-form">
       <form action="/us/search" method="get" name="simpleSearch" role="search">
        <label class="wcagOnly" for="simpleSearch-search-header">
         Search
        </label>
       </form>
       <label aria-hidden="true" class="wcagOnly" for="form__input--search-header__suggestion">
        Search
       </label>
      </div>
     </div>
     <nav class="context-nav context-nav--allbrands context-nav--search-header">
     </nav>
     <button aria-label="Schließen" class="js-search-header__button-close search-header__button-close">
      <svg class="icon icon--close icon--close--standard">
       <use xlink:href="#icon_close" xmlns:xlink="http://www.w3.org/1999/xlink">
       </use>
      </svg>
      <svg class="icon icon--close icon--close--quickview">
       <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
       </use>
      </svg>
     </button>
    </div>
    <div class="search-header__content-wrapper">
     <div class="search-header__content">
      <div class="page-width-wrapper">
       <div class="page-width-wrapper__inner">
        <div class="page-width-wrapper">
         <div class="page-width-wrapper__inner">
          <div class="search-suggestion-wrapper__static-suggestions js--search-suggestion-wrapper__static-suggestions search-header__container" data-as-list="internal_search_header">
           <div class="suggest-headline font__label font__label--large">
            SUGGESTIONS
           </div>
           <div class="html-slot-container clearfix">
            <ul class="js--suggested-phrases">
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              [link]
              
             </li>
             <li>
              <a class="search-header__suggestions font__link--ia" href="#">
               <svg class="icon icon--link">
                <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
                </use>
               </svg>
               Wallet
              </a>
             </li>
             <li>
              <a class="search-header__suggestions font__link--ia" href="#">
               <svg class="icon icon--link">
                <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
                </use>
               </svg>
               Tuxedo
              </a>
             </li>
            </ul>
           </div>
          </div>
          <div class="search-header__search-suggestion-wrapper__content js--search-suggestion-wrapper__content">
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="search-header__background">
    </div>
   </div>
   <div aria-hidden="true" class="recommendation-notification" tabindex="-1">
    <button aria-label="Close" class="js-recommendation__button-close sidebar__button-close sidebar__button-close--white">
     <svg class="icon icon--close">
      <use xlink:href="#icon_close">
      </use>
     </svg>
    </button>
    <div class="recommendation-notification__content-wrapper clearfix">
     [ahref]
     
    </div>
   </div>
   <div class="full-width-wrapper" id="main" role="main">
    <div id="oc">
    </div>
    <div class="html-slot-container clearfix">
     <div class="fs-content-slot-wrapper">
      <section class="cms-media-lightbox">
       <div class="cms-media-lightbox__content">
        [link]
        
        <div class="cms-media-lightbox__video-wrapper">
        </div>
        <div class="cms-media-lightbox__gallery-wrapper">
        </div>
       </div>
      </section>
      <section class="theme-boss cms-core__fullbleed cms-home-hub-slider-2" data-slides="1" data-timer="5">
       <div class="cms-home-hub-slider-2__content">
        <section class="theme-boss widget cms-core__fullbleed cms-home-hub-stage-2 cms-home-hub-stage-2--small cms-core__module-gap--first " data-as-promotion='{ "id" : "home-main_hub_stage_2", "name" : "Holiday Gifting", "creative":"20181207_", "position" : "global--home-main--01-01"}' data-invert="true" data-widgetclass="analytics-promotion-view">
         <div class="cms-stage-video-item cms-stage-video-item__darken cms-stage-video-item__darken--large--0">
          <div class="cms-stage-image-item">
           <div class="stage-image-item__content">
            <div class="cms-stage-video-item__content">
             <div class="cms-home-hub-stage-2__content">
              <div class="cms-home-hub-stage-2__content-top">
              </div>
              <div class="cms-home-hub-stage-2__content-center">
               <h1 class="cms-home-hub-stage-2__headline cms-core__font__h1--large cms-core--invert">
                <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
               </h1>
               <div class="cms-home-hub-stage-2-links">
                <div class="cms-home-hub-stage-2-links-item">
                 [ahref]
                 
                </div>
                <div class="cms-home-hub-stage-2-links-item">
                 [ahref]
                 
                </div>
               </div>
              </div>
              <div class="cms-home-hub-stage-2__content-bottom">
              </div>
             </div>
            </div>
            <div class="cms-stage-video-item__video" data-account-id="1268729919001" data-policy-key="BCpkADawqM1Y866RZKo_d_lZ4BO9M5xFUuhau1_xn-o1cf_aGAKtoqQqehi8CoaMEgTW7OBrgrangdSnSau7mVrQdX377XADeXy_Rv1gTn6IVRadSBXPGBsZLLDNBJtHjELhRuV_VDmeUk7D" data-video-id="5861115093001">
            </div>
           </div>
           <div class="stage-image-item__image stage-image-item__image--small" style="background-position: top center; background-image: url('https://images.hugoboss.com/is/image/boss/S19PS_BOSS_Holiday_009A_sRGB?$large$&amp;align=0,-1&amp;cropN=0,0.082533589251439539347408829174664,0.8212890625,0.51247600767754318618042226487524&amp;fit=crop,1&amp;hei=325&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=1024&amp;op_brightness=-0')">
           </div>
           <div class="stage-image-item__image stage-image-item__image--large" style="background-position: top center; background-image: url('https://images.hugoboss.com/is/image/boss/S19PS_BOSS_Holiday_009A_sRGB?$large$&amp;align=0,-1&amp;cropN=0,0.047984644913627639155470249520154,1.0,0.30710172744721689059500959692898&amp;fit=crop,1&amp;hei=300&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=1920&amp;op_brightness=-0')">
           </div>
          </div>
         </div>
        </section>
       </div>
      </section>
      <section class="cms-two-brands-hero ">
       <section class="theme-boss widget cms-core__fullbleed cms-brand-stage cms-core__module-gap" data-as-promotion='{ "id" : "home-main_brand_stage_tracking", "name" : "Business, casual and athleisure looks for an impeccable modern wardrobe", "creative":"20181207_S19PS_BM_Gift_020_JV_sRGB", "position" : "global--home-main--02"}' data-invert="true" data-widgetclass="analytics-promotion-view">
        <div class="cms-image-item cms-image-item--portrait ">
         <picture class="cms-image-item__picture">
          <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_Gift_020_JV_sRGB?$large$&amp;align=0,-1&amp;cropN=0.1611328125,0.070212765957446808510638297872340,0.5693359375,0.92978723404255319148936170212766&amp;fit=crop,1&amp;hei=720&amp;op_brightness=-10&amp;ts=1544206604114&amp;wid=960 " media="(min-width: 64rem)"/>
          <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_Gift_020_JV_sRGB?$large$&amp;align=0,-1&amp;cropN=0.212890625,0.053191489361702127659574468085106,0.53125,0.86808510638297872340425531914894&amp;fit=crop,1&amp;hei=360&amp;op_brightness=-10&amp;ts=1544206604114&amp;wid=480"/>
         </picture>
        </div>
        <div class="cms-brand-stage__content">
         <div class="cms-brand-stage__content-top--right">
          <svg class="cms-brand-stage__logo cms-brand-stage__logo--boss_white" viewbox="0 0 88 32" xmlns="http://www.w3.org/2000/svg">
           <symbol id="3272b49c-a0f3-4534-8120-7e2cc525b33b">
            <path d="M2.09 31.78v-2.11h2.09v2.11h1.1v-4.87h-1.1v1.98H2.09v-1.98H.99v4.87h1.1zm12.78-4.87v2.65c0 .78 0 1.56-1.1 1.56s-1.1-.78-1.1-1.56v-2.65h-1.1V30c0 1.33.99 1.88 2.2 1.88s2.2-.66 2.2-1.88v-3.1h-1.1v.01zM25.65 30v1c-.22.11-.55.11-.99.11-.99 0-1.43-.67-1.43-1.78 0-1.1.44-1.76 1.32-1.76.66 0 .99.44.99.88h1.1c0-.99-.88-1.54-2.2-1.54-.99 0-2.42.55-2.42 2.54 0 2 1.32 2.55 2.53 2.55.99 0 1.65-.22 2.09-.33v-2.33h-2.09v.78h1.1V30zm50.32-1.66c0-.99-.99-1.54-1.88-1.54-.88 0-1.97.55-1.97 1.54 0 .66.55 1.1 1.21 1.32.22.11.55.22.77.22.67.23.89.34.89.78 0 .56-.55.67-.89.67-.77 0-1.1-.44-1.1-1h-1.1c0 1.11.77 1.66 2.19 1.66 1.11 0 1.99-.55 1.99-1.55 0-.78-.55-1.22-1.32-1.44-.22-.11-.56-.11-.78-.22-.55-.22-.88-.33-.88-.66s.22-.66.88-.66c.56 0 .89.33.89.88h1.1zm10.69 0c0-.99-1-1.54-1.99-1.54-.88 0-1.97.55-1.97 1.54 0 .66.55 1.1 1.21 1.32.22.11.55.22.77.22.66.23.88.34.88.78 0 .56-.55.67-.88.67-.77 0-1.1-.44-1.1-1h-1.1c0 1.11.77 1.66 2.19 1.66 1.1 0 1.99-.55 1.99-1.55 0-.78-.56-1.22-1.33-1.44-.22-.11-.55-.11-.77-.22-.55-.22-.88-.33-.88-.66s.22-.66.88-.66c.55 0 .88.33.88.88h1.22zM35.35 32c1.65 0 2.42-1.1 2.42-2.66 0-1.43-.78-2.65-2.42-2.65-1.66 0-2.43 1.11-2.43 2.65-.11 1.55.65 2.66 2.43 2.66zm0-4.43c1.1 0 1.32.99 1.32 1.87 0 .89-.22 1.89-1.32 1.89s-1.32-1-1.32-1.89c-.01-.88.21-1.87 1.32-1.87zm17.06 4.32c.99 0 1.99-.44 1.99-1.33 0-.78-.56-1.22-1.22-1.22.44 0 .99-.44.99-1.1 0-.88-.66-1.32-1.75-1.32H50.2v4.98l2.21-.01zm-1.1-.77v-1.45h.99c.44 0 .88.11.88.67s-.44.78-.88.78h-.99zm0-2.23v-1.32h.99c.44 0 .66.33.66.66s-.33.66-.77.66h-.88zM63.2 32c1.76 0 2.52-1.1 2.52-2.66 0-1.54-.77-2.65-2.52-2.65-1.77 0-2.54 1.11-2.54 2.65 0 1.55.77 2.66 2.54 2.66zm0-4.43c1.1 0 1.32.99 1.32 1.87 0 .89-.22 1.89-1.32 1.89-1.11 0-1.33-1-1.33-1.89 0-.99.22-1.87 1.33-1.87zm4.52-12.07c.22 2.54-.88 7.19-8.15 7.53-3.2.11-7.27-.89-8.81-1.56v-6.08h.77c.22.77 1.65 6.3 6.94 6.64 3.07.11 5.39-1.11 5.5-3.66.11-2.87-3.2-3.88-6.17-5.1-3.29-1.32-6.6-2.65-7.04-6.2-.56-4.21 3.4-6.98 7.82-6.75 2.41.12 4.95.68 6.82 1.45v5.09h-.77c-.44-2.77-2.19-5.43-5.94-5.65-2.21-.11-4.29.67-4.29 3.1 0 2.44 4.07 3.43 7.03 4.54 2.98 1.11 5.96 2.67 6.29 6.65zm20.25 0c.22 2.54-.88 7.19-8.15 7.53-3.2.11-7.27-.89-8.81-1.56v-6.08h.77c.22.77 1.64 6.3 6.94 6.64 3.07.11 5.39-1.11 5.5-3.66.11-2.87-3.2-3.88-6.17-5.1-3.29-1.32-6.6-2.65-7.04-6.2-.55-4.21 3.41-6.98 7.82-6.75 2.41.11 4.95.66 6.82 1.44v5.09H85c-.44-2.77-2.19-5.43-5.94-5.65-2.21-.11-4.29.67-4.29 3.1 0 2.44 4.07 3.43 7.03 4.54 2.87 1.12 5.84 2.68 6.17 6.66zm-52.4 6.75c4.62-.11 6.28-5.87 6.28-10.63S39.87.88 35.57.88c-4.4 0-6.28 5.87-6.28 10.74-.01 4.76 1.65 10.74 6.28 10.63zm-11.9-10.62C23.67 5.2 28.95 0 35.46 0c6.49 0 11.78 5.2 11.78 11.63 0 6.42-5.29 11.63-11.78 11.63-6.51-.01-11.79-5.21-11.79-11.63zM1.98 20.81c0 .66-.77.99-1.43.99H0v.78h12c4.18 0 8.81-1.99 8.81-6.2.11-4.87-5.06-5.76-6.6-5.87 2.53-.44 5.51-2.43 5.29-5.42-.11-3.1-3.52-4.65-6.72-4.65H.11v.89h.66c.44 0 1.21.11 1.21.78v18.7zm5.07.88V11.08h2.97c3.3 0 5.07 2.32 5.29 4.98.22 3.21-2.21 5.64-5.29 5.64H7.05v-.01zm0-11.39V1.44h2.52c2.43 0 4.41 1.55 4.52 4.32.11 2.65-1.87 4.65-4.4 4.65H7.05v-.11z">
            </path>
           </symbol>
           <use xlink:href="#3272b49c-a0f3-4534-8120-7e2cc525b33b">
           </use>
          </svg>
         </div>
         <div class="cms-brand-stage__content-middle--right">
          <div class="cms-brand-stage__copy cms-core__font__copy cms-core--invert">
           Business, casual and athleisure looks for an impeccable modern wardrobe
          </div>
          <div class="cms-brand-stage__links">
           [ahref]
           
           [link]
           
          </div>
         </div>
         <div class="cms-brand-stage__content-bottom">
         </div>
        </div>
       </section>
       <section class="theme-hugo widget cms-core__fullbleed cms-brand-stage cms-core__module-gap" data-as-promotion='{ "id" : "home-main_brand_stage_tracking", "name" : "Sharp tailoring and casual pieces infused with fashion-forward attitude", "creative":"20181207_S19PS_HC_Holiday_010_sRGB", "position" : "global--home-main--02"}' data-invert="true" data-widgetclass="analytics-promotion-view">
        <div class="cms-image-item cms-image-item--landscape ">
         <picture class="cms-image-item__picture">
          <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_HC_Holiday_010_sRGB?$large$&amp;align=0,-1&amp;cropN=0.0087719298245614035087719298245614,0.447265625,0.99122807017543859649122807017544,0.49609375&amp;fit=crop,1&amp;hei=720&amp;op_brightness=-10&amp;ts=1544206604114&amp;wid=960 " media="(min-width: 64rem)"/>
          <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_HC_Holiday_007_sRGB?$large$&amp;align=0,-1&amp;cropN=0.025390625,0.053435114503816793893129770992366,0.96875,0.94656488549618320610687022900763&amp;fit=crop,1&amp;hei=360&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=480"/>
         </picture>
        </div>
        <div class="cms-brand-stage__content">
         <div class="cms-brand-stage__content-top">
          <svg class="cms-brand-stage__logo cms-brand-stage__logo--hugo_red" viewbox="0 0 88 32" xmlns="http://www.w3.org/2000/svg">
           <symbol id="67f42fd9-017f-454c-bed4-613a2790e169">
            <path d="M39.81 1.22h-4.62v14.25c0 2.79-.76 5.34-4.3 5.34-3.62 0-4.5-2.55-4.5-5.34V1.22h-4.63v14.47c0 4.58 2.76 8.36 9.13 8.36 6.28 0 8.91-3.78 8.91-8.36l.01-14.47zM0 23.49h4.5V13.14h9.02v10.35h4.51V1.22h-4.51V9.8H4.5V1.22H0v22.27zM62.81 6.9C61.15 2.56 57.86.22 53.35.22c-6.6 0-11.11 4.9-11.11 11.92 0 7.56 3.84 11.91 10.78 11.91 1.54 0 4.63-.78 6.16-2.56v1.9h3.86V11.24h-9.57v3.33h5.29c0 3.35-2.3 6.34-5.5 6.34-4.62 0-6.28-4.66-6.28-8.89 0-3.9 1.87-8.91 6.28-8.91 3.63 0 5.07 3.45 5.5 5.23l4.05-1.44zM76.67 0c-6.83 0-11.35 5.23-11.35 12.25 0 7.13 4.52 12.25 11.35 12.25C83.48 24.5 88 19.37 88 12.25S83.48 0 76.67 0m0 3.01c4.5 0 6.37 5.12 6.37 9.13s-1.87 9.13-6.37 9.13c-4.52 0-6.39-5.12-6.39-9.13s1.87-9.13 6.39-9.13">
            </path>
            <path d="M1.5 31.78v-2.07h2.04v2.07h1.07V27H3.54v1.95H1.5V27H.42v4.78H1.5zM13.97 27v2.6c0 .77 0 1.53-1.08 1.53s-1.08-.77-1.08-1.53V27h-1.07v3.04c0 1.31.96 1.85 2.15 1.85s2.15-.65 2.15-1.85V27h-1.07zm10.52 3.04v.98c-.21.11-.54.11-.96.11-.96 0-1.39-.66-1.39-1.75 0-1.08.43-1.73 1.28-1.73.64 0 .96.43.96.87h1.08c0-.97-.85-1.52-2.15-1.52-.96 0-2.36.54-2.36 2.49 0 1.97 1.29 2.51 2.47 2.51.96 0 1.61-.22 2.04-.33v-2.29h-2.04v.77h1.07v-.11zm49.13-1.63c0-.97-.96-1.52-1.84-1.52-.86 0-1.93.54-1.93 1.52 0 .65.54 1.08 1.18 1.3.21.11.54.22.75.22.66.22.87.33.87.77 0 .55-.54.66-.87.66-.75 0-1.07-.43-1.07-.98h-1.07c0 1.09.75 1.63 2.14 1.63 1.09 0 1.94-.54 1.94-1.52 0-.77-.54-1.2-1.28-1.42-.21-.11-.55-.11-.76-.22-.54-.22-.86-.33-.86-.65s.21-.65.86-.65c.55 0 .87.32.87.87l1.07-.01zm10.43 0c0-.97-.98-1.52-1.94-1.52-.86 0-1.93.54-1.93 1.52 0 .65.54 1.08 1.18 1.3.21.11.54.22.75.22.64.22.86.33.86.77 0 .55-.54.66-.86.66-.75 0-1.07-.43-1.07-.98h-1.07c0 1.09.75 1.63 2.14 1.63 1.07 0 1.94-.54 1.94-1.52 0-.77-.55-1.2-1.3-1.42-.21-.11-.54-.11-.75-.22-.54-.22-.85-.33-.85-.65s.21-.65.85-.65c.54 0 .86.32.86.87l1.19-.01zM33.96 32c1.61 0 2.36-1.08 2.36-2.62 0-1.41-.76-2.61-2.36-2.61-1.62 0-2.37 1.09-2.37 2.61-.11 1.53.64 2.62 2.37 2.62zm0-4.35c1.07 0 1.29.98 1.29 1.84 0 .87-.21 1.86-1.29 1.86s-1.29-.98-1.29-1.86c0-.87.21-1.84 1.29-1.84zm16.66 4.24c.96 0 1.94-.43 1.94-1.31 0-.77-.55-1.2-1.19-1.2.43 0 .96-.43.96-1.08 0-.87-.64-1.3-1.71-1.3h-2.16v4.89h2.16zm-1.07-.76v-1.42h.96c.43 0 .86.11.86.66s-.43.77-.86.77l-.96-.01zm0-2.18v-1.3h.96c.43 0 .64.33.64.65 0 .33-.32.65-.75.65h-.85zM61.16 32c1.71 0 2.46-1.08 2.46-2.62 0-1.52-.75-2.61-2.46-2.61-1.73 0-2.48 1.09-2.48 2.61 0 1.53.75 2.62 2.48 2.62zm0-4.35c1.07 0 1.28.98 1.28 1.84 0 .87-.21 1.86-1.28 1.86-1.09 0-1.3-.98-1.3-1.86 0-.98.21-1.84 1.3-1.84z">
            </path>
           </symbol>
           <use xlink:href="#67f42fd9-017f-454c-bed4-613a2790e169">
           </use>
          </svg>
         </div>
         <div class="cms-brand-stage__content-middle">
          <div class="cms-brand-stage__copy cms-core__font__copy cms-core--invert">
           Sharp tailoring and casual pieces infused with fashion-forward attitude
          </div>
          <div class="cms-brand-stage__links">
           [link]
           
           [link]
           
          </div>
         </div>
         <div class="cms-brand-stage__content-bottom">
         </div>
        </div>
       </section>
      </section>
      <section class="theme-boss cms-horizontal-content-selector">
       <section class="widget cms-core__fullbleed--gap " data-as-promotion='{ "id" : "home-main_horizontal_category_selector", "name" : "Horizontal Category Selector", "creative":"20181207", "position" : "global--home-main--03"}' data-widgetclass="analytics-promotion-view">
        <div class="cms-horizontal-content-selector__main">
         <nav class="cms-horizontal-content-selector__nav">
          <ul class="cms-horizontal-content-selector__ul">
           <li class="cms-horizontal-content-selector__nav__item">
            <span class="cms-horizontal-content-selector__nav__item__title">
             MEN
    	                        <li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<li>[ahref]</li>
            </span>
           </li>
           <li class="cms-horizontal-content-selector__nav__item">
            <span class="cms-horizontal-content-selector__nav__item__title">
             WOMEN
    	                        <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
            </span>
           </li>
          </ul>
         </nav>
         <div class="cms-horizontal-content-selector__showcases">
          <div class="cms-horizontal-content-selector__showcases__item">
           <ul class="cms-horizontal-content-selector__showcase-list">
            <li class="cms-horizontal-content-selector__showcase-list__item">
             <a class="cms-links-item cms-links-item--released cms-links-item--unstyled-selector cms-links-item-tracking" href="/us/men-suits/" title="Suits">
              <div class="cms-horizontal-content-selector__showcase-list__item__img">
               <div class="content-asset" data-aid="cms_productpicture">
               </div>
              </div>
              <div class="cms-horizontal-content-selector__showcase-list__item__title">
               <span>
                Suits
    <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[search]</li><li>[ahref]</li>
               </span>
              </div>
             </a>
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [ahref]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [ahref]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [ahref]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             <a class="cms-links-item cms-links-item--released cms-links-item--unstyled-selector cms-links-item-tracking" href="/us/men-tailored-jackets/" title="Sport Coats">
              <div class="cms-horizontal-content-selector__showcase-list__item__img">
               <div class="content-asset" data-aid="cms_productpicture">
               </div>
              </div>
              <div class="cms-horizontal-content-selector__showcase-list__item__title">
               <span>
                Sport Coats
               </span>
              </div>
             </a>
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
           </ul>
          </div>
          <div class="cms-horizontal-content-selector__showcases__item">
           <ul class="cms-horizontal-content-selector__showcase-list">
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [ahref]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [ahref]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             <a class="cms-links-item cms-links-item--released cms-links-item--unstyled-selector cms-links-item-tracking" href="/us/women-skirts/" title="Skirts">
              <div class="cms-horizontal-content-selector__showcase-list__item__img">
               <div class="content-asset" data-aid="cms_productpicture">
               </div>
              </div>
              <div class="cms-horizontal-content-selector__showcase-list__item__title">
               <span>
                Skirts
               </span>
              </div>
             </a>
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
            <li class="cms-horizontal-content-selector__showcase-list__item">
             [link]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </section>
      <section class="theme-boss cms-core__fullbleed cms-multi-categories-teaser cms-core__module-gap" data-motionbreakpoints='{ "timers" : true, "bps" : [ { "75%" : {
"1" : { "clazz" : "l_fadeInUp l_animated-500", "target" : ".cms-multi-categories-teaser__headline", "removeClazz" : true },
"100" : { "clazz" : "l_fadeInUp l_animated-500", "target" : ".cms-multi-categories-teaser__item-spacer-0", "removeClazz" : true },
"200" : { "clazz" : "l_fadeInUp l_animated-500", "target" : ".cms-multi-categories-teaser__item-spacer-1", "removeClazz" : true },
"300" : { "clazz" : "l_fadeInUp l_animated-500", "target" : ".cms-multi-categories-teaser__item-spacer-2", "removeClazz" : true },
"400" : { "clazz" : "l_fadeInUp l_animated-500", "target" : ".cms-multi-categories-teaser__item-spacer-3", "removeClazz" : true }
} } ] }'>
       <div class="cms-multi-categories-teaser__headline l_before-animated">
       </div>
       <div class="cms-multi-categories-teaser__items cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1">
        <div class="spacer cms-multi-categories-teaser__item-spacer-0 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "Meet our influencers on the streets of NYC", "creative":"20181207_IMG_3419_v2", "position" : "global--home-main--04-01"}' data-widgetclass="analytics-promotion-view">
          [ahref]
          
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-1 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "Party Looks For Her &amp; Him", "creative":"20181207_S19PS_BOSS_Evening_003_sRGB", "position" : "global--home-main--04-02"}' data-widgetclass="analytics-promotion-view">
          [ahref]
          
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-2 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "Celebrate in BOSS x Jeremyville", "creative":"20181207_181011_S19PS_BOSS_45Sec_MAIN_HORIZONTAL_Thumbnail", "position" : "global--home-main--04-03"}' data-widgetclass="analytics-promotion-view">
          <a class="cms-links-item cms-links-item--released cms-links-item--unstyled-selector cms-links-item-tracking" href="/us/boss-jeremyville/" title="Discover now">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/181011_S19PS_BOSS_45Sec_MAIN_HORIZONTAL_Thumbnail?$large$&amp;align=0,-1&amp;cropN=0.2998046875,0.16493055555555555555555555555556,0.4462890625,0.70138888888888888888888888888889&amp;fit=crop,1&amp;hei=265&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=300 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/181011_S19PS_BOSS_45Sec_MAIN_HORIZONTAL_Thumbnail?$large$&amp;align=0,-1&amp;cropN=0.2998046875,0.16493055555555555555555555555556,0.4462890625,0.70138888888888888888888888888889&amp;fit=crop,1&amp;hei=265&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=300"/>
            </picture>
           </div>
           <div class="cms-multi-categories-teaser-item__text ">
            <div class="cms-multi-categories-teaser-item__text__headline">
             Celebrate in BOSS x Jeremyville
            </div>
           </div>
          </a>
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-0 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "Say it with HUGO: personalize your look", "creative":"20181207_181015_S19PS_HUGO_Personalisation_Startpage_anim", "position" : "global--home-main--04-04"}' data-widgetclass="analytics-promotion-view">
          [link]
          
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-1 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "Holiday Gift Guide", "creative":"20181207_20180529_HB_CTG_BM_Jeremyville_0259_sRGB", "position" : "global--home-main--04-05"}' data-widgetclass="analytics-promotion-view">
          [ahref]
          
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-2 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "The five knits you need this season", "creative":"20181207_082718_GQHBOSSFALL_RE_SHOT_06_246_wk2", "position" : "global--home-main--04-06"}' data-widgetclass="analytics-promotion-view">
          [ahref]
          
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-0 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "New Takes on The Womenswear Tuxedo", "creative":"20181207_180926_S19PS_BOSS_HUGO-HOLIDAY-selects_781_02_edited", "position" : "global--home-main--04-07"}' data-widgetclass="analytics-promotion-view">
          [ahref]
          
         </div>
        </div>
        <div class="spacer cms-multi-categories-teaser__item-spacer-1 l_before-animated">
         <div class="widget cms-multi-categories-teaser__items--column-count-4 cms-multi-categories-teaser__items--column-count-mobile-2 cms-multi-categories-teaser__items--teaser-layout-1" data-as-promotion='{ "id" : "home-main_multi_categories_teaser", "name" : "Party-Ready in HUGO", "creative":"20181207_S19PS_HC_Holiday_008_sRGB", "position" : "global--home-main--04-08"}' data-widgetclass="analytics-promotion-view">
          [ahref]
          
         </div>
        </div>
       </div>
      </section>
      <section class="theme-boss cms-look-cabinet cms-core__module-gap--last" data-motionbreakpoints='{ "timers" : true, "bps" : [ { "70%" : { "0" : { "clazz" : "l_fadeInUp l_animated-1000", "target" : "cms-look-cabinet__content .slick-slide-0" }, "200" : { "clazz" : "l_fadeInUp l_animated-1000", "target" : ".cms-look-cabinet__content .slick-slide-1" }, "400" : { "clazz" : "l_fadeInUp l_animated-1000", "target" : ".cms-look-cabinet__content .slick-slide-2" } } } ] }' id="cms-look-cabinet__id__ddf3eefa-f846-4624-8714-3952cc59e26a">
       <div class="cms-links-item cms-links-item--close--dark cms-look-cabinet__hide-viewall">
        <span class="cms-links-item__icon">
         <svg class="cms-links-item__icon__source">
          <use xlink:href="#icon_close">
          </use>
         </svg>
        </span>
       </div>
       <h2 class="cms-headline-item cms-core__font__category">
        [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
       </h2>
       <div class="cms-look-cabinet__content">
        <div aria-label="Previous" class="cms-links-item cms-slick-arrow--prev slick-hidden">
         <span class="cms-links-item__icon">
          <svg class="cms-links-item__icon__source">
           <use xlink:href="#icon_showmore">
           </use>
          </svg>
         </span>
        </div>
        <div class="cms-look-cabinet__content__items slick-slider" data-slick-options='{"dots": true, "fade": false, "arrows": true, "prevArrowSelector": true, "nextArrowSelector": true, "infinite": false, "slidesToShow": 3, "slidesToScroll": 3, "appendDots" : "#cms-look-cabinet__id__ddf3eefa-f846-4624-8714-3952cc59e26a .cms-look-cabinet__content__nav", "responsive": [{"breakpoint": 768, "settings": {"slidesToShow": 1, "slidesToScroll": 1}}]}'>
         <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_3", "creative":"20181207_S19PS_BM_CTG_001", "position" : "global--home-main--05-01"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_3/US_BOSS_Men_EW_PS19_Look_3.html
" data-widgetclass="analytics-promotion-view">
          <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_001?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=680&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=383 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_001?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1200&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=675"/>
            </picture>
           </div>
          </div>
         </div>
         <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_2", "creative":"20181207_S19PS_BB_M_020_cutout", "position" : "global--home-main--05-02"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_2/US_BOSS_Men_EW_PS19_Look_2.html
" data-widgetclass="analytics-promotion-view">
          <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_M_020_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=680&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=383 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_M_020_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1200&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=675"/>
            </picture>
           </div>
          </div>
         </div>
         <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Women_EW_PS19_Look_4", "creative":"20181207_S19PS_BB_W_042_cutout", "position" : "global--home-main--05-03"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_women_ew_ps19_look_4/US_BOSS_Women_EW_PS19_Look_4.html
" data-widgetclass="analytics-promotion-view">
          <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_042_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=680&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=383 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_042_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1200&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=675"/>
            </picture>
           </div>
          </div>
         </div>
         <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_4", "creative":"20181207_S19PS_BM_CTG_017", "position" : "global--home-main--05-04"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_4/US_BOSS_Men_EW_PS19_Look_4.html
" data-widgetclass="analytics-promotion-view">
          <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_017?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=680&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=383 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_017?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1200&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=675"/>
            </picture>
           </div>
          </div>
         </div>
         <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Women_EW_PS19_Look_2", "creative":"20181207_S19PS_BB_W_036_cutout", "position" : "global--home-main--05-05"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_women_ew_ps19_look_2/US_BOSS_Women_EW_PS19_Look_2.html
" data-widgetclass="analytics-promotion-view">
          <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_036_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=680&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=383 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_036_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1200&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=675"/>
            </picture>
           </div>
          </div>
         </div>
         <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_5", "creative":"20181207_S19PS_BM_CTG_020", "position" : "global--home-main--05-06"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_5/US_BOSS_Men_EW_PS19_Look_5.html
" data-widgetclass="analytics-promotion-view">
          <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
           <div class="cms-image-item cms-image-item--portrait ">
            <picture class="cms-image-item__picture">
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_020?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=680&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=383 " media="(min-width: 64rem)"/>
             <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_020?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1200&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=675"/>
            </picture>
           </div>
          </div>
         </div>
        </div>
        <div aria-label="Next" class="cms-links-item cms-slick-arrow--next slick-hidden">
         <span class="cms-links-item__icon">
          <svg class="cms-links-item__icon__source">
           <use xlink:href="#icon_showmore">
           </use>
          </svg>
         </span>
        </div>
        <div class="cms-look-cabinet__content__nav">
         <div class="cms-look-cabinet__content__view-all">
          <div class="cms-links-item cms-links-item--arrow-right--bubble">
           <span class="cms-links-item__text">
            View All <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[link][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[link]<li>[link]</li>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[link]
           </span>
           <span class="cms-links-item__icon">
            [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[search]<li>[ahref]</li><li>[link]</li>
           </span>
          </div>
         </div>
        </div>
       </div>
       <div class="cms-look-cabinet__zoom">
        <div class="cms-look-cabinet__zoom__content">
         <div class="cms-look-cabinet__zoom__content-wrapper">
          <div class="cms-links-item cms-links-item--overview">
           <span class="cms-links-item__icon">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_overview">
             </use>
            </svg>
           </span>
           <span class="cms-links-item__text">
            Look Overview<li>[ahref]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[link]</li><li>[link]</li>[ahref]
           </span>
          </div>
          <div aria-label="Previous" class="cms-links-item cms-slick-arrow--prev">
           <span class="cms-links-item__icon">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_showmore">
             </use>
            </svg>
           </span>
          </div>
          <div class="cms-look-cabinet__content__items slick-slider" data-slick-options='{"dots": false, "fade": false, "arrows": true, "prevArrowSelector": true, "nextArrowSelector": true, "infinite": false, "slidesToShow": 1, "slidesToScroll": 1}'>
           <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_3", "creative":"20181207_S19PS_BM_CTG_001", "position" : "global--home-main--05-01"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_3/US_BOSS_Men_EW_PS19_Look_3.html
" data-widgetclass="analytics-promotion-view">
            <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
             <div class="cms-image-item cms-image-item--portrait ">
              <picture class="cms-image-item__picture">
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_001?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900 " media="(min-width: 64rem)"/>
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_001?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900"/>
              </picture>
             </div>
            </div>
           </div>
           <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_2", "creative":"20181207_S19PS_BB_M_020_cutout", "position" : "global--home-main--05-02"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_2/US_BOSS_Men_EW_PS19_Look_2.html
" data-widgetclass="analytics-promotion-view">
            <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
             <div class="cms-image-item cms-image-item--portrait ">
              <picture class="cms-image-item__picture">
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_M_020_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900 " media="(min-width: 64rem)"/>
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_M_020_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900"/>
              </picture>
             </div>
            </div>
           </div>
           <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Women_EW_PS19_Look_4", "creative":"20181207_S19PS_BB_W_042_cutout", "position" : "global--home-main--05-03"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_women_ew_ps19_look_4/US_BOSS_Women_EW_PS19_Look_4.html
" data-widgetclass="analytics-promotion-view">
            <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
             <div class="cms-image-item cms-image-item--portrait ">
              <picture class="cms-image-item__picture">
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_042_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900 " media="(min-width: 64rem)"/>
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_042_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900"/>
              </picture>
             </div>
            </div>
           </div>
           <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_4", "creative":"20181207_S19PS_BM_CTG_017", "position" : "global--home-main--05-04"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_4/US_BOSS_Men_EW_PS19_Look_4.html
" data-widgetclass="analytics-promotion-view">
            <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
             <div class="cms-image-item cms-image-item--portrait ">
              <picture class="cms-image-item__picture">
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_017?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900 " media="(min-width: 64rem)"/>
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_017?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900"/>
              </picture>
             </div>
            </div>
           </div>
           <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Women_EW_PS19_Look_2", "creative":"20181207_S19PS_BB_W_036_cutout", "position" : "global--home-main--05-05"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_women_ew_ps19_look_2/US_BOSS_Women_EW_PS19_Look_2.html
" data-widgetclass="analytics-promotion-view">
            <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
             <div class="cms-image-item cms-image-item--portrait ">
              <picture class="cms-image-item__picture">
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_036_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900 " media="(min-width: 64rem)"/>
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BB_W_036_cutout?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900"/>
              </picture>
             </div>
            </div>
           </div>
           <div class="widget cms-look-cabinet__content__items__item" data-as-promotion='{ "id" : "home-main_look_cabinet", "name" : "Look Set ID US_BOSS_Men_EW_PS19_Look_5", "creative":"20181207_S19PS_BM_CTG_020", "position" : "global--home-main--05-06"}' data-lookset-url="
		https://www.hugoboss.com/us/us_boss_men_ew_ps19_look_5/US_BOSS_Men_EW_PS19_Look_5.html
" data-widgetclass="analytics-promotion-view">
            <div class="cms-look-cabinet__content__items__item__motion-wrapper cms-links-item-tracking">
             <div class="cms-image-item cms-image-item--portrait ">
              <picture class="cms-image-item__picture">
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_020?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900 " media="(min-width: 64rem)"/>
               <source data-srcset="https://images.hugoboss.com/is/image/boss/S19PS_BM_CTG_020?$large$&amp;align=0,-1&amp;fit=crop,1&amp;hei=1600&amp;op_brightness=-0&amp;ts=1544206604114&amp;wid=900"/>
              </picture>
             </div>
            </div>
           </div>
          </div>
          <div aria-label="Next" class="cms-links-item cms-slick-arrow--next">
           <span class="cms-links-item__icon">
            [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[link][ahref][link][link][search]<li>[search]</li><li>[search]</li><li>[ahref]</li><li>[ahref]</li><li>[search]</li>
           </span>
          </div>
         </div>
        </div>
        <div class="cms-look-cabinet__zoom__shop-the-look">
         <div class="cms-look-cabinet__zoom__shop-the-look__header">
          <div class="cms-look-cabinet__zoom__shop-the-look__header__headline cms-core__font__h2">
           Shop the Look
          </div>
          <div class="cms-links-item cms-links-item--close--dark">
           <span class="cms-links-item__icon">
            [link][link]<li>[link]</li><li>[link]</li><li>[ahref]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </div>
         </div>
         <div class="cms-look-cabinet__zoom__shop-the-look__content">
         </div>
         <div class="cms-look-cabinet__zoom__shop-the-look__spinner">
          <div class="preloader-wrapper active">
           <div class="spinner-layer">
            <div class="circle-clipper left">
             <div class="circle">
             </div>
            </div>
            <div class="gap-patch">
             <div class="circle">
             </div>
            </div>
            <div class="circle-clipper right">
             <div class="circle">
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </section>
      <div class="cms-core-viewport">
      </div>
     </div>
    </div>
   </div>
   <div class="sidebar">
    <div class="sidebar__wrapper sidebar__wrapper--level1-from-right sidebar__wrapper--small-width">
     <div class="overlay-content-wrapper overlay-content-wrapper--unpadded">
      <div class="sidebar__content">
      </div>
     </div>
     <button aria-label="Close" class="js-overlays__button-close sidebar__button-close">
      <svg class="icon icon--close icon--close--standard">
       <use xlink:href="#icon_close">
       </use>
      </svg>
      <svg class="icon icon--close icon--close--quickview">
       <use xlink:href="#icon_arrow_to_right">
       </use>
      </svg>
     </button>
    </div>
    <div class="sidebar__wrapper sidebar__wrapper--level2-from-right">
     <div class="overlay-content-wrapper">
      <div class="sidebar__content">
      </div>
     </div>
     <button aria-label="Back" class="js-sidebar--from-right__button-back sidebar__button-back sidebar__button-back--from-right">
      <svg class="icon icon--close">
       <use xlink:href="#icon_arrow_to_right">
       </use>
      </svg>
     </button>
     <button aria-label="Close" class="js-sidebars__button-close sidebar__button-close ">
      <svg class="icon icon--close">
       <use xlink:href="#icon_close">
       </use>
      </svg>
     </button>
    </div>
    <div class="sidebar__wrapper sidebar__wrapper--level1-from-left ">
     <div class="overlay-content-wrapper">
      <div class="sidebar__content">
      </div>
     </div>
     <div class="sidebar__close-bar js-overlays__button-close">
      <button class="sidebar__close-bar-button">
       <svg class="sidebar__close-bar-icon">
        <use xlink:href="#icon_close">
        </use>
       </svg>
       <span class="sidebar__close-bar-text font__cta">
        Close
       </span>
      </button>
     </div>
    </div>
    <div class="sidebar__wrapper sidebar__wrapper--level2-from-left">
     <div class="overlay-content-wrapper">
      <div class="sidebar__content">
      </div>
     </div>
     <button aria-label="Close" class="js-sidebars__button-close sidebar__button-close ">
      <svg class="icon icon--close">
       <use xlink:href="#icon_close">
       </use>
      </svg>
     </button>
     <button aria-label="Back" class="js-sidebar--from-left-lvl2__button-back sidebar__button-back">
      <svg class="icon icon--close">
       <use xlink:href="#icon_arrow_to_left">
       </use>
      </svg>
     </button>
     <div class="js-sidebar--from-left-lvl3">
      LEVEL_3
     </div>
    </div>
    <div class="sidebar__wrapper sidebar__wrapper--level3-from-left">
     <div class="overlay-content-wrapper">
      <div class="sidebar__content">
      </div>
     </div>
     <button aria-label="Close" class="js-sidebars__button-close sidebar__button-close ">
      <svg class="icon icon--close">
       <use xlink:href="#icon_close">
       </use>
      </svg>
     </button>
     <button aria-label="Back" class="js-sidebar--from-left-lvl3__button-back sidebar__button-back">
      <svg class="icon icon--close">
       <use xlink:href="#icon_arrow_to_left">
       </use>
      </svg>
     </button>
    </div>
    <div class="lightbox__wrapper--centered">
     <div class="lightbox__wrapper--centered-content">
      <div class="overlay-content-wrapper overlay-content-wrapper--flex">
       <div class="lightbox__content">
       </div>
      </div>
      <button aria-label="Close" class="js-overlays__button-close lightbox__button-close">
       <svg class="icon icon--close">
        <use xlink:href="#icon_close">
        </use>
       </svg>
      </button>
     </div>
     <div class="js-overlays__button-close lightbox__content-background">
     </div>
    </div>
    <div class="lightbox__wrapper--fullbleed">
     <div class="overlay-content-wrapper">
      <div class="lightbox__content">
      </div>
     </div>
     <button aria-label="Close" class="js-overlays__button-close lightbox__button-close">
      <svg class="icon icon--close">
       <use xlink:href="#icon_close">
       </use>
      </svg>
     </button>
    </div>
    <div class="overlays__background js-overlays__button-close">
    </div>
    <div class="overlays__background-white">
     <div class="loadProgress">
     </div>
    </div>
   </div>
   <footer class="footer__homepage" id="footer" role="contentinfo">
    <div class="newsletter-signin">
     <div class="newsletter-signin__newsletter-box">
      <p class="newsletter-signin__headline font__h2">
       HUGO BOSS Newsletter<li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[ahref]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[search]<li>[search]</li><li>[ahref]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>
      </p>
      <p class="newsletter-signin__subtext">
       Register to receive collection preview mailers from HUGO BOSS
      </p>
      <div class="form form--unpadded form--newsletter-signin">
       <form action="/us/newsletter" class=" " method="post" name="Newsletter-Subscribe">
        <fieldset>
         <div class="form__item " data-required-text="Please enter your email address">
          <label class="form__label form__label--required" for="dwfrm_newsletter_email">
           Email
          </label>
         </div>
         <button class="button--newsletter-signin" tabindex="0">
          <svg class="icon icon--button-large button--newsletter-signin-icon">
           <title>
            Subscribe
           </title>
           <use xlink:href="#icon_arrow_right">
           </use>
          </svg>
         </button>
        </fieldset>
       </form>
      </div>
     </div>
    </div>
    <div class="shop-benefits">
     <div class="html-slot-container clearfix">
      <div class="fs-content-slot-wrapper" style="display: flex;">
       <section class="cms-footer" style="flex: 1 1 0%;">
        <div class="cms-footer__items">
         <div class="cms-footer__item cms-footer__item--first" style="display: block;">
          <div class="cms-footer__item-headline">
           HUGO BOSS EXPERIENCE
           <div class="cms-footer__item-arrow">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
             </use>
            </svg>
           </div>
          </div>
          <div class="cms-footer__item-content-wrapper">
           <div class="cms-footer__item-content">
            <div class="cms-image-item cms-image-item--landscape ">
             [ahref]
             
            </div>
            <div class="cms-footer__item-copy">
             [link]
             
            </div>
           </div>
           <div class="cms-footer__item-link">
            [link]
            
           </div>
          </div>
         </div>
         <div class="cms-footer__item " style="display: block;">
          <div class="cms-footer__item-headline">
           Fashion Guides
           <div class="cms-footer__item-arrow">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
             </use>
            </svg>
           </div>
          </div>
          <div class="cms-footer__item-content-wrapper">
           <div class="cms-footer__item-content">
            <div class="cms-image-item cms-image-item--landscape ">
             [ahref]
             
            </div>
            <div class="cms-footer__item-copy">
             [ahref]
             
            </div>
           </div>
           <div class="cms-footer__item-link">
            [link]
            
           </div>
          </div>
         </div>
        </div>
       </section>
       <section class="cms-freestyle" style="flex: 1 1 0%;">
        <div class="cms-footer__items">
         <div class="cms-footer__item" style="display: block;">
          <div class="cms-footer__item-headline">
           Contact
           <div class="cms-footer__item-arrow">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
             </use>
            </svg>
           </div>
          </div>
          <div class="cms-footer__item-content-wrapper">
           <div class="cms-footer__item-content">
            <div class="cms-footer__item-copy livechat">
             [ahref]
             
             <div id="livePersonChatButtonFooter">
             </div>
             <p class="cms-links-item--readmore--white" style="display: inline;padding-left:0;">
              Live Chat
             </p>
            </div>
            <div class="cms-footer__item-copy">
             <span class="cms-links-item--readmore--white">
              <span class="cms-links-item__icon cms-links-item__icon__phone">
               <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
              </span>
              1 800 484 6267
             </span>
            </div>
            <div class="cms-footer__item-copy">
             [ahref]
             
            </div>
            <div class="cms-footer__item-copy">
             [ahref]
             
            </div>
            <div class="cms-footer__item-copy">
             [link]
             
            </div>
           </div>
           <div class="cms-footer__item-link">
            [link]
            
           </div>
          </div>
         </div>
         <div class="cms-footer__item" style="display: block;">
          <div class="cms-footer__item-headline">
           Services
           <div class="cms-footer__item-arrow">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
             </use>
            </svg>
           </div>
          </div>
          <div class="cms-footer__item-content-wrapper">
           <div class="cms-footer__item-content">
            <div class="cms-footer__item-copy">
             <span class="cms-links-item--readmore--white">
              <li>[link]</li>[search]<li>[ahref]</li><li>[link]</li>[ahref]
             </span>
            </div>
            <div class="cms-footer__item-copy">
             <span class="cms-links-item--readmore--white">
              <span class="cms-links-item__icon cms-links-item__icon__checkbox">
               <li>[ahref]</li><li>[search]</li>[search][search][ahref]
              </span>
              [ahref]
              
             </span>
            </div>
            <div class="cms-footer__item-copy">
             <span class="cms-links-item--readmore--white">
              <span class="cms-links-item__icon cms-links-item__icon__checkbox">
               [search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[ahref]</li><li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]
              </span>
              <a href="/us/customer-service/payment/general-information/general-information-payment.html#ankerCustomerServices">
               Secure Payment
              </a>
             </span>
            </div>
            <div class="cms-footer__item-copy">
             <div class="icon icon-payment-visa payment-dims">
             </div>
             <div class="icon icon-payment-mastercard payment-dims">
             </div>
             <div class="icon icon-payment-american-express payment-dims">
             </div>
             <div class="icon icon-payment-discover payment-dims">
             </div>
             <div class="icon icon-payment-paypal-nl payment-dims">
             </div>
            </div>
           </div>
           <div class="cms-footer__item-link">
            [ahref]
            
           </div>
          </div>
         </div>
         <div class="cms-footer__item cms-footer__item--last" style="display: block;">
          <div class="cms-footer__item-headline">
           Our Company
           <div class="cms-footer__item-arrow">
            <svg class="cms-links-item__icon__source">
             <use xlink:href="#icon_arrow_to_right" xmlns:xlink="http://www.w3.org/1999/xlink">
             </use>
            </svg>
           </div>
          </div>
          <div class="cms-footer__item-content-wrapper">
           <div class="cms-footer__item-content">
            <div class="cms-footer__item-copy">
             [ahref]
             
            </div>
            <div class="cms-footer__item-copy">
             <a class="cms-links-item cms-links-item--readmore--white no-icon" href="/en/investor-relations/" title="Investor Relations">
              Investor Relations
             </a>
            </div>
            <div class="cms-footer__item-copy">
             [ahref]
             
            </div>
            <div class="cms-footer__item-copy">
             [ahref]
             
            </div>
           </div>
           <div class="cms-footer__item-link">
            <a class="cms-links-item cms-links-item--readmore--white" href="/en/" title="Corporate Website">
             <span class="cms-links-item__text">
              Corporate Website
             </span>
             <span class="cms-links-item__icon">
              <svg class="cms-links-item__icon__source">
               <use xlink:href="#icon_arrow_right" xmlns:xlink="http://www.w3.org/1999/xlink">
               </use>
              </svg>
             </span>
            </a>
           </div>
          </div>
         </div>
        </div>
       </section>
      </div>
     </div>
     <div class="content-asset" data-aid="footer-copy">
      <div class="footer__bottom">
       <div class="socialbar widget" data-widgetclass="socialbar">
        <h4 class="socialbar__headline font__h1">
         Follow us
        </h4>
        <a class="socialbar__link" data-href-boss="//instagram.com/boss" data-href-hugo="//instagram.com/hugo_official" href="/boss" rel="noopener" target="_blank">
         <svg class="socialbar__icon">
          <title>
           Instagram
          </title>
          <use xlink:href="#icon_instagram">
          </use>
         </svg>
        </a>
        [link]
        
        [ahref]
        
        [link]
        
        [link]
        
       </div>
       <div class="footer__change-country">
        <div class="">
         Change country:
         [ahref]
         
        </div>
       </div>
       <ul class="footer__links">
        <li>
         <a class="imprint" href="/us/about-hugo-boss/terms-conditions/about-us.html">
          Imprint
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <br>
          [search]<li>[ahref]</li>[ahref][search]<li>[link]</li>
         </br>
        </li>
        <li>
         [link]
         
        </li>
       </ul>
       <p class="footer__copyright">
        © 2017 HUGO BOSS All rights reserved.<li>[search]</li>[link][ahref]<li>[link]</li><li>[link]</li>[ahref]<li>[link]</li>[link][link]<li>[search]</li>
       </p>
      </div>
      <div class="cms-core-viewport">
      </div>
     </div>
    </div>
   </footer>
   <button class="backtotop-bubble widget" data-widgetclass="backToTopBtn">
    <svg class="backtotop-bubble__icon" fill="#FFFFFF" height="22" width="22">
     <title>
      Back to top
     </title>
     <use xlink:href="#icon_arrow-down">
     </use>
    </svg>
   </button>
   <div class="content-asset" data-aid="real-user-monitoring">
   </div>
  </div>
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-KPD539" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0381
  </b>
 </body>
</html>