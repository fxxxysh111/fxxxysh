﻿
<!DOCTYPE html>
<html class="no-js" lang="ko">
 <head>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta charset="utf-8"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="Description"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="Keywords"/>
  <meta content="INDEX,FOLLOW" name="Robots"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="28cfd5023bfc6522700e4743b05b1671" name="p:domain_verify"/>
  <meta content="ea2654258641035a27108faac4177ccac9882123" name="naver-site-verification"/>
 </head>
 <body class="scheme--- Select Colour -- floating-footer" id="ctl00_BodyClass">
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-5H9XR9" style="display: none; visibility: hidden" width="0">
   </iframe>
  </noscript>
  <form action="/ko-kr/cooking-with-kenwood/recipes/rice-and-pasta/pineapple-rice" id="aspnetForm" method="post" name="aspnetForm">
   <div>
   </div>
   <div>
   </div>
   <div id="page">
    <div class="container" id="masterHead">
     <div class="section">
      <div class="logoBox">
       <p class="logo">
        <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[link][ahref][search][search]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[link]<li>[link]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
       </p>
      </div>
      <div class="utilContainer">
       <ul class="utilNav links">
        <li class="mobile lang toggleLanguage">
         <a class="flag ko-kr selected" href="/en-int/language-selector" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_hyperLink">
          <span class="d">
           한국어 (대한민국)
          </span>
          <span class="m">
           ko-kr
          </span>
         </a>
         <div class="selectLang addShadow">
          <p class="close" title="Close language selector">
          </p>
          <p class="offscreen">
           Select your language:
          </p>
          <div class="langCol">
           <dl>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             <a class="flag en-au" href="/en-au" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl02_hyperLink">
              Australia
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             <a class="flag fr-be" href="/fr-be" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl04_hyperLink">
              Belgique (Français)
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             <a class="flag es-cl" href="/es-cl" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl09_hyperLink">
              Chile
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             <a class="flag de-de" href="/de-de" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl11_hyperLink">
              Deutschland
             </a>
            </dd>
            <dd>
             <a class="flag et-ee" href="/et-ee" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl12_hyperLink">
              Eesti
             </a>
            </dd>
            <dd>
             <a class="flag en-meia" href="/en-meia" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl13_hyperLink">
              Egypt (English)
             </a>
            </dd>
            <dd>
             <a class="flag es-es" href="/es-es" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl14_hyperLink">
              España
             </a>
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             <a class="flag en-int" href="/en-int" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl18_hyperLink">
              International
             </a>
            </dd>
            <dd>
             <a class="flag it-it" href="/it-it" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl19_hyperLink">
              Italia
             </a>
            </dd>
            <dd>
             <a class="flag lv-lv" href="/lv-lv" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl20_hyperLink">
              Latvija
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             <a class="flag nl-nl" href="/nl-nl" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl24_hyperLink">
              Nederland
             </a>
            </dd>
            <dd>
             <a class="flag en-nz" href="/en-nz" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages_ctl25_hyperLink">
              New Zealand (English)
             </a>
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
           </dl>
          </div>
          <div class="langCol">
           <dl>
            <dd>
             <a class="flag en-ph" href="/en-ph" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl01_hyperLink">
              Philippines (English)
             </a>
            </dd>
            <dd>
             <a class="flag pl-pl" href="/pl-pl" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl02_hyperLink">
              Polska
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             <a class="flag de-ch" href="/de-ch" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl05_hyperLink">
              Schweiz
             </a>
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             <a class="flag en-za" href="/en-za" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl09_hyperLink">
              South Africa
             </a>
            </dd>
            <dd>
             <a class="flag fr-ch" href="/fr-ch" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl10_hyperLink">
              Suisse (Français)
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             <a class="flag en-tt" href="/en-th" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl13_hyperLink">
              Thailand (English)
             </a>
            </dd>
            <dd>
             <a class="flag vi-vn" href="/vi-vn" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl14_hyperLink">
              Tiếng Việt (Việt Nam)
             </a>
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             <a class="flag en-us" href="/en-us" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl17_hyperLink">
              United States
             </a>
            </dd>
            <dd>
             [ahref]
             
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             <a class="flag ru-ru" href="/ru-ru" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl20_hyperLink">
              Россия
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             [link]
             
            </dd>
            <dd>
             <a class="flag th-th" href="/th-th" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl23_hyperLink">
              ไทย (ไทย)
             </a>
            </dd>
            <dd>
             <a class="flag ko-kr" href="/ko-kr/cooking-with-kenwood/recipes/rice-and-pasta/pineapple-rice" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl24_hyperLink">
              대한민국
             </a>
            </dd>
            <dd>
             <a class="flag zh-tw" href="/zh-tw" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl25_hyperLink">
              中文(台灣)
             </a>
            </dd>
            <dd>
             <a class="flag zh-cn" href="/zh-cn" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_LanguageSelector_LanguageSelectorModule_rptLanguages1_ctl26_hyperLink">
              中华人民共和国
             </a>
            </dd>
            <dd>
             [link]
             
            </dd>
           </dl>
          </div>
         </div>
        </li>
       </ul>
       <ul class="cartUtilNav links">
        <li>
         <a href="/ko-kr/customer-support" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterHeaderLinks_ctl00_HyperlinkPage" title="Contact">
          Contact
         </a>
        </li>
       </ul>
      </div>
      <div class="block" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_PanelSearch">
       <fieldset class="siteSearch radius30" id="skipToSearch">
        <label class="offscreen" for="Search">
         Search this site
        </label>
        <div class="addShadow radius5" id="suggestions">
        </div>
       </fieldset>
       <ul class="tabs" id="skipToNav">
        <li id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl01_LiNavigation">
         <a href="/ko-kr/all-products" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl01_HyperLinkPage" title="제품소개">
          <b>
          </b>
          제품소개
         </a>
        </li>
        <li id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl02_LiNavigation">
         <a href="/ko-kr/customer-support" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl02_HyperLinkPage" title="고객지원">
          <b>
          </b>
          고객지원
         </a>
        </li>
        <li class="on" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl03_LiNavigation">
         [search]
         
        </li>
        <li id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl04_LiNavigation">
         <a href="/ko-kr/event" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl04_HyperLinkPage" title="새소식">
          <b>
          </b>
          새소식
         </a>
        </li>
        <li id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl05_LiNavigation">
         <a href="/ko-kr/promo/school-partnership" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterTopNavigation_ctl05_HyperLinkPage" title="쿠킹스쿨">
          <b>
          </b>
          쿠킹스쿨
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_secondaryNavContainer">
     <div class="container" id="topNav">
      <div class="section">
       <ul class="tabs">
        <li class="on" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterSubNavigation_ctl00_LiNavigation">
         <a href="/ko-kr/cooking-with-kenwood/recipes" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderHeaderArea_ctl00_RepeaterSubNavigation_ctl00_HyperLinkPage">
          <b>
          </b>
          레시피
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="container" id="content">
     <div class="wingLeft" style="background-image: url(/Global/Promo%20Images/Wing%20Images/WingLeft.jpg)">
      <div class="shadow" style="background-image: url(/App_Themes/Kenwood/images/assets/bg_shadow_left.png)">
      </div>
     </div>
     <div class="wingRight" style="background-image: url(/Global/Promo%20Images/Wing%20Images/WingLeft.jpg)">
      <div class="shadow" style="background-image: url(/App_Themes/Kenwood/images/assets/bg_shadow_right.png)">
      </div>
     </div>
     <div class="section" id="ctl00_ContentPlaceHolderAll_divSection" itemscope="" itemtype="http://data-vocabulary.org/Recipe">
      <div class="smallHero" id="skipToContent">
       <div class="breadcrumbs radius30 ">
        <a class="here" href="#">
         위치
        </a>
        <ol>
         <li class="first" id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl01_Li">
          <a href="/ko-kr" id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl01_HyperLinkLink">
           홈
          </a>
         </li>
         <li id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl02_Li">
          <a href="/ko-kr/recipes" id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl02_HyperLinkLink">
           레시피
          </a>
         </li>
         <li id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl03_Li">
          [link]
          
         </li>
         <li id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl04_Li">
          [link]
          
         </li>
         <li id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_BreadcrumbKenwood_RepeaterBreadcrumb_ctl05_Li">
          파인애플 볶음밥
         </li>
        </ol>
       </div>
       <h1 id="ctl00_ContentPlaceHolderAll_HeroContentArea_ctlHeaderArea_ctlPageHeading_h1Tag" itemprop="name">
        <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
       </h1>
       <div class="groupButtons">
       </div>
      </div>
      <div class="recipeOverview blogOverview twoCol70-30">
       <div class="mainImg colMain">
        <p class="ImgDisc" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl00_recipeOverviewHeroBanner_imageDisclaimerText">
         <li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>
        </p>
        <div class="social noPrint">
         <span class="label">
          레시피 공유하기
         </span>
         <ul>
          <li style="margin-right: 0px;">
           <div class="addthis_toolbox addthis_default_style ">
            <a class="addthis_button_facebook_like" href="#">
            </a>
           </div>
          </li>
          <li style="margin-right: -35px;">
           <div class="addthis_toolbox addthis_default_style ">
            <a class="addthis_button_tweet" href="#">
            </a>
           </div>
          </li>
          <li style="margin-right: 0;">
           <div class="addthis_toolbox addthis_default_style ">
            <a class="addthis_button_pinterest_pinit">
            </a>
           </div>
          </li>
         </ul>
        </div>
        <div class="print noPrint" title="">
         <a href="#">
          프린트하기
          <i class="icon">
          </i>
         </a>
        </div>
       </div>
       <div class="body colAside printFull">
        <ul class="recipe">
         <li class="Easy" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl00_ctl00_HtmlLi" title="쉬움">
          난이도: 쉬움
         </li>
         <li class="stars rateGroup">
          <span class="rated star0" title="0 of 5">
           0 of 5<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </span>
         </li>
        </ul>
        <ul class="iconList">
         <li class="reparationTime">
          <i class="icon">
          </i>
          <strong>
           준비 시간:
          </strong>
          <time datetime="PT0M" itemprop="prepTime">
           10분
          </time>
         </li>
         <li class="cookingTime">
          <i class="icon">
          </i>
          <strong>
           요리 시간:
          </strong>
          <time datetime="PT0M" itemprop="cookTime">
           15분
          </time>
         </li>
         <li class="serves">
          <i class="icon">
          </i>
          <strong>
           제공량:
          </strong>
          4인분
         </li>
         <li class="course">
          <i class="icon">
          </i>
          <strong>
           코스:
          </strong>
          메인 요리
         </li>
        </ul>
        <div id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl00_ctl01_panelForRecipe">
         <div class="productSlider box style1 radius3 noPrint">
          <h3>
           [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
          </h3>
          <div class="productSlider-inner">
           <div class="ncj-simpleslider imgFrame" data-options='"matchContentSize":true,"swipeIgnoreSelector":"label, input, a, textarea, select, button"' dir="ltr">
            <ul class="products imgFrame">
             <li>
              <a href="/ko-kr/all-products/food-processors/multipro-compact/fpm250" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl00_ctl01_RepeaterProducts_ctl01_HyperlinkProduct">
               <div class="frameSm">
                <div class="inner">
                </div>
               </div>
               <b class="frameSmBase">
                <i>
                </i>
               </b>
               FPM250
              </a>
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="oneCol">
       <div class="intro addLine">
       </div>
      </div>
      <div class="twoCol70-30">
       <div class="colMain printFull">
        <div class="box style2 radius3">
         <h2>
          [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
         </h2>
         <div class="inner bgIngredient">
          <ul>
           <li>
            밥 4공기
           </li>
           <li>
            파인애플 1통 (각각 반통씩 사용)
           </li>
           <li>
            파프리카 1개
           </li>
           <li>
            가지 1/2개
           </li>
           <li>
            파 약간
           </li>
           <li>
            양파 1개
           </li>
           <li>
            새우 3컵
           </li>
           <li>
            청양고추 3개
           </li>
           <li>
            굴소스 약간
           </li>
           <li>
            참기름 약간
           </li>
           <li>
            다진마늘 1Tsp
           </li>
           <li>
            소금
           </li>
           <li>
            후춧가루 약간
           </li>
          </ul>
          <p>
           필요 도구<li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li>[link][link][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
          </p>
          <ul>
           <li>
            켄우드 푸드 프로세서 KPM 250 (사용 제품)
           </li>
          </ul>
         </div>
        </div>
        <div class="box style2 radius3">
         <div class="article">
          <p id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl01_rptImageGroups_ctl00_pGroupImage">
          </p>
          <p>
           STEP 1[ahref]<li>[search]</li>[ahref]<li>[link]</li>[ahref][search][link][link][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
          </p>
          <ol>
           <span style="font-size: 15px; line-height: 1.4;">
            <li>
             파인애플을 정확히 반으로 갈라 과육을 파내어 준다. (칼과 숟가락 사용)
            </li>
           </span>
           <span style="font-size: 15px; line-height: 1.4;">
            [link]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[search]<li>[link]</li><li>[link]</li>
           </span>
          </ol>
         </div>
         <div class="article">
          <p id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl01_rptImageGroups_ctl01_pGroupImage">
           [search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><li>[ahref]</li>[link]<li>[search]</li><li>[link]</li>
          </p>
          <p>
           STEP 2[search]<li>[ahref]</li>[link]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[search]<li>[ahref]</li><li>[ahref]</li>[link]<li>[ahref]</li>
          </p>
          <ol>
           <span style="font-size: 15px; line-height: 1.4;">
            <li>
             푸드 프로세서의 볼에 새우를 제외한 나머지 재료(파프리카, 가지, 양파, 청양고추)를 넣고 다지기 기능을 사용하여 큼직하게 다져준다.
            </li>
           </span>
           <span style="font-size: 15px; line-height: 1.4;">
            <li>
             다져진 재료를 모두 그릇에 옮겨 놓고, 새우를 넣고 큼직하게 한번 다져준다.
            </li>
           </span>
          </ol>
         </div>
         <div class="article">
          <p id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl01_rptImageGroups_ctl02_pGroupImage">
          </p>
          <p>
           <strong style="font-size: 15px; line-height: 1.4;">
            STEP 3
           </strong>
          </p>
          <ol>
           <span style="font-size: 15px; line-height: 1.4;">
            <li>[search]</li><li>[search]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][ahref]<li>[link]</li>[ahref]
           </span>
           <span style="font-size: 15px; line-height: 1.4;">
            <li>[search]</li>[ahref]<li>[link]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][link]<li>[search]</li>
           </span>
           <span style="font-size: 15px; line-height: 1.4;">
            <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][search]<li>[ahref]</li><li>[ahref]</li>
           </span>
           <span style="font-size: 15px; line-height: 1.4;">
            [ahref]<li>[search]</li><li>[ahref]</li><li>[search]</li>[search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[search]</li>
           </span>
           <span style="font-size: 15px; line-height: 1.4;">
            <li>
             마지막에는 참기름을 조금 넣어 고소함을 더한다.
            </li>
           </span>
          </ol>
         </div>
         <div class="article">
          <p id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl01_rptImageGroups_ctl03_pGroupImage">
          </p>
          <p>
           <strong style="font-size: 15px; line-height: 1.4;">
            STEP 4
           </strong>
          </p>
          <p>
           만들어둔 파인애플 그릇에 담아 내어 완성한다. [ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[ahref]<li>[ahref]</li>[ahref]<li>[search]</li>
          </p>
         </div>
        </div>
        <div class="genericForm noPrint">
         <h2>
          [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
         </h2>
         <fieldset>
          <div class="field">
           <label for="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_txtName" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_lblName">
            이름
           </label>
          </div>
          <div class="field">
           <label for="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_txtEmail" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_lblEmail">
            이메일
           </label>
          </div>
          <div class="field">
           <strong>
            별점
           </strong>
           <div class="starRating">
            <label for="rating1">
            </label>
            <label for="rating2">
            </label>
            <label for="rating3">
            </label>
            <label for="rating4">
            </label>
            <label for="rating5">
            </label>
           </div>
          </div>
          <div class="field">
           <label for="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_txtTitle" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_lblTitle">
            제목
           </label>
          </div>
          <div class="field">
           <label for="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_txtComment" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_ctl02_lblComment">
            내용
           </label>
          </div>
          <div class="button grey">
           <i>
           </i>
          </div>
         </fieldset>
        </div>
       </div>
       <div class="colAside noPrint">
        <div class="box style2 radius3">
         <h2>
          <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
         </h2>
         <div class="inner">
          <div class="inner">
           <ul class="items noBottomSpace">
            <li>
             [link]
             
             <a href="/ko-kr/cooking-with-kenwood/recipes/rice-and-pasta/risotto" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_relatedRecipes_relatedRecipes_ctl00_relatedRecipeImageControl_hrefControl">
             </a>
             <h3>
              [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
             </h3>
             <div class="rateGroup">
              <span class="rated star0" title="0 of 5">
               0 of 5
              </span>
             </div>
            </li>
            <li>
             [link]
             
             [link]
             
             <h3>
              [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
             </h3>
             <div class="rateGroup">
              <span class="rated star0" title="0 of 5">
               0 of 5
              </span>
             </div>
            </li>
            <li class="showHide">
             <div class="showHide-content">
              <ul class="items noBottomSpace">
               <li>
                <h3>
                 [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                </h3>
                <div class="rateGroup">
                 <span class="rated star0" title="0 of 5">
                  0 of 5<li>[link]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li>
                 </span>
                </div>
               </li>
               <li>
                <a id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderMain_ctl02_relatedRecipes_relatedRecipesMore_ctl01_relatedRecipeImageControl_HyperlinkImage1">
                </a>
                [link]
                
                <h3>
                 [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                </h3>
                <div class="rateGroup">
                 <span class="rated star0" title="0 of 5">
                  0 of 5
                 </span>
                </div>
               </li>
              </ul>
             </div>
             [link]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_toolBarContainer">
     <div class="container" id="toolBar">
      <div class="section">
       <div class="inner">
        <div class="social radius30 clearfix" id="SocialMedia">
         <ul>
          <li id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_FooterToolbarSocialMedia_rptSocialMedia_ctl00_li" title="Kenwood Ltd YouTube Channel">
           [ahref]
           
          </li>
          <li style="margin-right: 0px;">
           <div class="addthis_toolbox addthis_default_style ">
            <a class="addthis_button_facebook_like" href="/">
            </a>
           </div>
          </li>
          <li style="margin-right: -35px;">
           <div class="addthis_toolbox addthis_default_style ">
            <a class="addthis_button_tweet" href="/">
            </a>
           </div>
          </li>
          <li style="margin-right: 0px;">
           <div class="addthis_toolbox addthis_default_style ">
            [ahref]
            
           </div>
          </li>
          <li style="margin-right: -25px;">
           <div class="addthis_toolbox addthis_default_style ">
           </div>
          </li>
          <li id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_FooterToolbarSocialMedia_LiSocialMediaLast">
           <div class="addthis_toolbox addthis_default_style ">
            [link]
            
           </div>
          </li>
         </ul>
        </div>
        <div class="pageTools radius30">
         <ul>
          <li class="globe" title="언어 변경">
           <a href="/ko-kr/language">
            언어 변경
           </a>
          </li>
          <li class="print" title="프린트">
          </li>
          <li class="home" title="홈">
           [ahref]
           
          </li>
         </ul>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_panelMobile">
     <div class="container" id="footer">
      <div class="section radius3">
       <div class="superfooter">
        <ul class="utilNav">
         <li>
          [ahref]
          
         </li>
        </ul>
        <div class="colgroup colNo4" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_SuperFooterNavigation1_Panel">
         <div class="col">
          <h3>
           [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
          </h3>
          <div class="block">
           <ul>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/ko-kr/all-products/kitchen-machines" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_SuperFooterNavigation1_RepeaterSuperFooterGroups_ctl01_RepeaterSuperFooterGroupPages_ctl02_HyperLinkPage" title="키친머신">
              키친머신
             </a>
            </li>
            <li>
             [link]
             
            </li>
           </ul>
          </div>
         </div>
         <div class="col">
          <h3>
           [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
          </h3>
          <div class="block">
           <ul>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/ko-kr/terms-and-conditions" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_SuperFooterNavigation1_RepeaterSuperFooterGroups_ctl02_RepeaterSuperFooterGroupPages_ctl03_HyperLinkPage" title="이용약관">
              이용약관
             </a>
            </li>
           </ul>
          </div>
         </div>
         <div class="col">
          <h3>
           [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
          </h3>
          <div class="block">
           <ul>
            <li>
             [link]
             
            </li>
            <li>
             <a href="/ko-kr/customer-support/instruction-manuals" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_SuperFooterNavigation1_RepeaterSuperFooterGroups_ctl03_RepeaterSuperFooterGroupPages_ctl02_HyperLinkPage" title="제품 사용설명서">
              제품 사용설명서
             </a>
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [link]
             
            </li>
           </ul>
          </div>
         </div>
         <div class="col last" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_SuperFooterNavigation1_panelAddressColumn">
          <p>
           De'Longhi Korea Ltd.<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[ahref]</li><li>[ahref]</li><li>[link]</li><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </p>
          <p>
           <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
          </p>
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="container" id="footer-bottom">
      <div class="section radius3">
       <div class="bl">
        <div>
         <p>
          [link][ahref][search][search]<li>[ahref]</li><li>[search]</li><li>[link]</li>[search]<li>[search]</li><li>[link]</li><li>[link]</li><li>[link]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[link]</li>
         </p>
        </div>
        <p class="copy">
         © Copyright 2018 Kenwood Limited
[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[ahref]<li>[ahref]</li>
        </p>
        <div class="bl-links">
         <ul>
          <li>
           <a href="/ko-kr" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_ctl01_RepeaterFooterLinks_ctl01_HyperlinkPage" title="홈">
            홈
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/ko-kr/language" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_ctl01_RepeaterFooterLinks_ctl03_HyperlinkPage" title="언어 선택">
            언어 선택
           </a>
          </li>
          <li>
           <a href="/ko-kr/site-map" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_ctl01_RepeaterFooterLinks_ctl04_HyperlinkPage" title="사이트맵">
            사이트맵
           </a>
          </li>
         </ul>
        </div>
       </div>
      </div>
      <div class="container" id="mobilefooter">
       <ul>
        <li class="toHome">
         <a href="/ko-kr/" id="ctl00_ContentPlaceHolderAll_ContentPlaceHolderFooter_ctl00_hyperLinkHome">
          홈
         </a>
        </li>
        <li class="toTop">
         [link]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div id="overlay">
     <div class="inner">
      [link]
      
      <div class="contentWrap radius3">
      </div>
     </div>
    </div>
   </div>
  </form>
  <div id="ClickTaleDiv" style="display: none;">
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0168
  </b>
 </body>
</html>
