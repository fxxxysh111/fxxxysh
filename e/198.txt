<!DOCTYPE html>
<html lang="en">
 <head>
  <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
  <meta content="Wix.com Website Builder" name="generator"/>
  <meta content="92f82de1-a70f-4ea2-b92d-4718f758847f" http-equiv="X-Wix-Meta-Site-Id"/>
  <meta content="4ba76877-3294-40f6-84d0-ef8f77f9e3fa" http-equiv="X-Wix-Application-Instance-Id"/>
  <meta content="467" http-equiv="X-Wix-Published-Version"/>
  <meta content="6f9375d44bc2881bcab7412228ddf24f" http-equiv="etag"/>
  <meta content="telephone=no" name="format-detection"/>
  <meta content="SKYPE_TOOLBAR_PARSER_COMPATIBLE" name="SKYPE_TOOLBAR"/>
  <meta content="minimum-scale=0.25, maximum-scale=1.2" id="wixMobileViewport" name="viewport"/>
  <meta content="e067c75b8f2603256490c68818e8e3a95cb26149" name="naver-site-verification"/>
  <meta content="!" name="fragment"/>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="gop" name="fb_admins_meta_tag"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
  <meta content="gop" property="fb:admins"/>
 </head>
 <body class="">
  <div id="SITE_CONTAINER">
   <div class="noop visual-focus-on" data-reactroot="" style="position:relative">
    <div>
    </div>
    <div>
    </div>
    <div class="siteBackground" id="SITE_BACKGROUND" style="height:100%;top:0;bottom:;left:;right:;width:;position:absolute">
     <div class="siteBackgroundprevious" id="SITE_BACKGROUND_previous_noPrev">
      <div class="siteBackgroundpreviousImage" id="SITE_BACKGROUNDpreviousImage">
      </div>
      <div class="siteBackgroundpreviousVideo" id="SITE_BACKGROUNDpreviousVideo">
      </div>
      <div class="siteBackgroundpreviousOverlay" id="SITE_BACKGROUND_previousOverlay_noPrev">
      </div>
     </div>
     <div class="siteBackgroundcurrent" data-position="fixed" id="SITE_BACKGROUND_current_cjg9_j2ygdjs4_bg" style="top:0;height:100%;width:100%;background-color:rgba(130, 130, 130, 1);display:;position:fixed">
      <div class="siteBackgroundcurrentImage" data-height="100%" data-type="bgimage" id="SITE_BACKGROUND_currentImage_cjg9_j2ygdjs4_bg" style="position:absolute;top:0;height:100%;width:100%">
      </div>
      <div class="siteBackgroundcurrentVideo" id="SITE_BACKGROUNDcurrentVideo">
      </div>
      <div class="siteBackgroundcurrentOverlay" id="SITE_BACKGROUND_currentOverlay_cjg9_j2ygdjs4_bg" style="position:absolute;top:0;width:100%;height:100%">
      </div>
     </div>
    </div>
    <div class="SITE_ROOT" id="SITE_ROOT" style="width:100%;top:0;padding-bottom:0;min-width:980px">
     <div data-ref="masterPage" id="masterPage" style="top:0;bottom:;right:;width:100%;position:static;visibility:hidden">
      <header class="style-jdh5rv3j" data-header-top="0" data-is-mobile="false" data-site-width="980" data-state="" id="SITE_HEADER" style="position:absolute;left:0;margin-left:0;width:100%;min-width:980px;top:0;bottom:;right:;height:186px">
       <div class="style-jdh5rv3jscreenWidthBackground" id="SITE_HEADERscreenWidthBackground" style="left:0;width:100%">
       </div>
       <div class="style-jdh5rv3jcenteredContent" id="SITE_HEADERcenteredContent">
        <div class="style-jdh5rv3jbg" id="SITE_HEADERbg" style="margin-left:calc((100% - 980px) / 2);width:980px">
        </div>
        <div class="style-jdh5rv3jinlineContent" id="SITE_HEADERinlineContent">
         <div class="wp2" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-exact-height="145" id="comp-j2ygchxk" style="top:19px;bottom:;left:28px;right:;width:115px;height:145px;position:absolute" title="">
          [ahref]
          
         </div>
         <nav class="style-jimrlakd" data-dropalign="center" data-drophposition="" data-label-pad="0" data-menuborder-y="0" data-menubtn-border="0" data-ribbon-els="0" data-ribbon-extra="0" data-state="center notMobile" dir="ltr" id="DrpDwnMn0-5s3" style="overflow-x:hidden;top:72px;bottom:;left:156px;right:;width:792px;height:39px;position:absolute">
          <ul aria-label="Site navigation" class="style-jimrlakditemsContainer" id="DrpDwnMn0-5s3itemsContainer" role="navigation" style="text-align:center">
           <li class="style-jimrlakdrepeaterButton" data-data-id="bmi1i60" data-direction="ltr" data-listposition="left" data-state="menu selected idle link notMobile" id="DrpDwnMn0-5s30">
            <h1>
             [area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]
            </h1>
            <a aria-haspopup="false" class="style-jimrlakdrepeaterButtonlinkElement" data-listposition="left" href="r" id="DrpDwnMn0-5s30linkElement" role="button" tabindex="0" target="_self">
             <div class="style-jimrlakdrepeaterButton_gapper">
              <div class="style-jimrlakdrepeaterButtonbg" id="DrpDwnMn0-5s30bg" style="text-align:center">
               <p class="style-jimrlakdrepeaterButtonlabel" id="DrpDwnMn0-5s30label" style="text-align:center">
                HELLO<li>[link]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>[link]<li>[ahref]</li><li>[ahref]</li>
               </p>
              </div>
             </div>
            </a>
           </li>
           <li class="style-jimrlakdrepeaterButton" data-data-id="dataItem-j6n2tl87" data-direction="ltr" data-listposition="center" data-state="menu  idle link notMobile" id="DrpDwnMn0-5s31">
            <a aria-haspopup="false" class="style-jimrlakdrepeaterButtonlinkElement" data-listposition="center" href="/gopizzastores" id="DrpDwnMn0-5s31linkElement" role="button" tabindex="0" target="_self">
             <div class="style-jimrlakdrepeaterButton_gapper">
              <div class="style-jimrlakdrepeaterButtonbg" id="DrpDwnMn0-5s31bg" style="text-align:center">
               <p class="style-jimrlakdrepeaterButtonlabel" id="DrpDwnMn0-5s31label" style="text-align:center">
                STORES
               </p>
              </div>
             </div>
            </a>
           </li>
           <li class="style-jimrlakdrepeaterButton" data-data-id="dataItem-j4p4ok78" data-direction="ltr" data-listposition="center" data-state="menu  idle link notMobile" id="DrpDwnMn0-5s32">
            <a aria-haspopup="true" class="style-jimrlakdrepeaterButtonlinkElement" data-listposition="center" href="/franchise" id="DrpDwnMn0-5s32linkElement" role="button" tabindex="0" target="_self">
             <div class="style-jimrlakdrepeaterButton_gapper">
              <div class="style-jimrlakdrepeaterButtonbg" id="DrpDwnMn0-5s32bg" style="text-align:center">
               <p class="style-jimrlakdrepeaterButtonlabel" id="DrpDwnMn0-5s32label" style="text-align:center">
                FRANCHISE[link][link][link]<li>[ahref]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][ahref][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<li>[search]</li><li>[link]</li>
               </p>
              </div>
             </div>
            </a>
           </li>
           <li class="style-jimrlakdrepeaterButton" data-data-id="bmi1em7" data-direction="ltr" data-listposition="center" data-state="menu  idle link notMobile" id="DrpDwnMn0-5s33">
            [link]
            
           </li>
           <li class="style-jimrlakdrepeaterButton" data-data-id="dataItem-j2yh2nln" data-direction="ltr" data-listposition="center" data-state="menu  idle link notMobile" id="DrpDwnMn0-5s34">
            [link]
            
           </li>
           <li class="style-jimrlakdrepeaterButton" data-data-id="dataItem-j2yh2hc0" data-direction="ltr" data-listposition="center" data-state="menu  idle link notMobile" id="DrpDwnMn0-5s35">
            [link]
            
           </li>
           <li class="style-jimrlakdrepeaterButton" data-data-id="dataItem-jimg4764" data-direction="ltr" data-listposition="right" data-state="menu  idle link notMobile" id="DrpDwnMn0-5s36">
            [ahref]
            
           </li>
           <li class="style-jimrlakdrepeaterButton" data-listposition="right" data-state="menu  idle header notMobile" id="DrpDwnMn0-5s3__more__">
            [ahref]
            
           </li>
          </ul>
          <div class="style-jimrlakdmoreButton" id="DrpDwnMn0-5s3moreButton">
          </div>
          <nav class="style-jimrlakddropWrapper" data-dropalign="center" data-drophposition="" id="DrpDwnMn0-5s3dropWrapper" style="visibility:hidden">
           <ul class="style-jimrlakdmoreContainer" id="DrpDwnMn0-5s3moreContainer" style="visibility:hidden">
           </ul>
          </nav>
         </nav>
         <div class="style-j4bftsbe" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-exact-height="50" id="comp-j2zysyat" style="top:27px;bottom:;left:526px;right:;width:116px;height:50px;position:absolute" title="">
          [link]
          
         </div>
        </div>
       </div>
      </header>
      <main class="pc1" data-is-mesh="false" data-is-mobile="false" data-site-width="980" data-state="" id="PAGES_CONTAINER" style="left:0;margin-left:0;width:100%;min-width:980px;top:0;bottom:;right:;height:1040px;position:absolute">
       <div class="pc1screenWidthBackground" id="PAGES_CONTAINERscreenWidthBackground" style="left:0">
       </div>
       <div class="pc1centeredContent" id="PAGES_CONTAINERcenteredContent">
        <div class="pc1bg" id="PAGES_CONTAINERbg" style="display:none">
        </div>
        <div class="pc1inlineContent" id="PAGES_CONTAINERinlineContent">
         <div class="s_VOwPageGroupSkin" id="SITE_PAGES" style="width:100%;top:0;bottom:;left:0;right:;height:1040px;position:absolute">
          <div class="p1" data-is-mesh-layout="false" data-ismobile="false" id="cjg9" style="height:1040px;left:0;min-width:980px;min-height:847px;top:0;bottom:;right:;width:100%;position:absolute;visibility:hidden">
           <div class="p1bg" id="cjg9bg" style="margin-left:calc((100% - 980px) / 2);width:980px">
           </div>
           <div class="p1inlineContent" id="cjg9inlineContent">
            <div class="style-j4e7h74k" data-gallery-id="SldShwGllry1-14lw" data-height-diff="0" data-state="hidePlayButton autoplayOn notMobile desktopView touchRollOut " data-text-alignment="left" data-width-diff="0" id="SldShwGllry1-14lw" style="height:484px;overflow:hidden;top:0;bottom:;left:0;right:;width:980px;position:absolute">
             <div class="style-j4e7h74k_border">
             </div>
             <div class="style-j4e7h74kitemsContainer" data-gallery-id="SldShwGllry1-14lw" id="SldShwGllry1-14lwitemsContainer" style="height:100%">
              <div class="style-j4e7h74kimageItem" data-bottom-gap="0" data-displayer-height="967" data-displayer-uri="7efea7_a24b9b9764b6456395876b653655b694~mv2.png" data-displayer-width="1958" data-height-diff="0" data-image-index="1" data-image-wrapper-bottom="0" data-image-wrapper-left="0" data-image-wrapper-right="0" data-image-wrapper-top="0" data-margin-to-container="0" data-state="defaultPanelState desktopView alignLeft unselected clipImage noTransition normal noLink" data-width-diff="0" id="SldShwGllry1-14lwdataItem-jm9yz8x5" itemscope="" itemtype="http://schema.org/ImageObject" style="width:980px;height:484px;position:absolute;left:0;top:0;visibility:hidden">
               <div class="style-j4e7h74kimageItemlink" data-gallery-id="SldShwGllry1-14lw" data-page-item-context="c1138" draggable="false" id="SldShwGllry1-14lwdataItem-jm9yz8x5link" style="cursor:default;height:100%;width:100%;position:absolute;top:0px;left:0px;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-drag:none;-webkit-user-drag:none;-moz-user-drag:none;-ms-user-drag:none;user-modify:read-only;-webkit-user-modify:read-only;-moz-user-modify:read-only;-ms-user-modify:read-only">
                <div class="style-j4e7h74kimageItemimageWrapper" id="SldShwGllry1-14lwdataItem-jm9yz8x5imageWrapper" style="height:484px;width:980px;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0">
                 <div class="style-j4e7h74kimageItemzoom" id="SldShwGllry1-14lwdataItem-jm9yz8x5zoom" style="cursor:default">
                  <div class="style-j4e7h74kimageItemimage" data-style="position:relative;overflow:hidden" id="SldShwGllry1-14lwdataItem-jm9yz8x5image" style="position:relative;overflow:hidden">
                  </div>
                 </div>
                </div>
                <div class="style-j4e7h74kimageItem_pnl style-j4e7h74kimageItempanel" id="SldShwGllry1-14lwdataItem-jm9yz8x5panel">
                 <h3 aria-hidden="true" class="style-j4e7h74kimageItemtitle" id="SldShwGllry1-14lwdataItem-jm9yz8x5title" itemprop="name" style="text-align:left">
                  [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                 </h3>
                 <p class="style-j4e7h74kimageItemdescription" id="SldShwGllry1-14lwdataItem-jm9yz8x5Description" itemprop="description" style="text-align:left">
                 </p>
                </div>
               </div>
              </div>
              <div class="style-j4e7h74kimageItem" data-bottom-gap="0" data-displayer-height="2954" data-displayer-uri="2d3f7c_dcdecc648d8c41529886efade88750a8~mv2_d_5787_2954_s_4_2.jpg" data-displayer-width="5787" data-height-diff="0" data-image-index="3" data-image-wrapper-bottom="0" data-image-wrapper-left="0" data-image-wrapper-right="0" data-image-wrapper-top="0" data-margin-to-container="0" data-state="defaultPanelState desktopView alignLeft unselected clipImage noTransition normal noLink" data-width-diff="0" id="SldShwGllry1-14lwdataItem-jmzzght2" itemscope="" itemtype="http://schema.org/ImageObject" style="width:980px;height:484px;position:absolute;left:0;top:0;visibility:hidden">
               <div class="style-j4e7h74kimageItemlink" data-gallery-id="SldShwGllry1-14lw" data-page-item-context="c1138" draggable="false" id="SldShwGllry1-14lwdataItem-jmzzght2link" style="cursor:default;height:100%;width:100%;position:absolute;top:0px;left:0px;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-drag:none;-webkit-user-drag:none;-moz-user-drag:none;-ms-user-drag:none;user-modify:read-only;-webkit-user-modify:read-only;-moz-user-modify:read-only;-ms-user-modify:read-only">
                <div class="style-j4e7h74kimageItemimageWrapper" id="SldShwGllry1-14lwdataItem-jmzzght2imageWrapper" style="height:484px;width:980px;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0">
                 <div class="style-j4e7h74kimageItemzoom" id="SldShwGllry1-14lwdataItem-jmzzght2zoom" style="cursor:default">
                  <div class="style-j4e7h74kimageItemimage" data-style="position:relative;overflow:hidden" id="SldShwGllry1-14lwdataItem-jmzzght2image" style="position:relative;overflow:hidden">
                  </div>
                 </div>
                </div>
                <div class="style-j4e7h74kimageItem_pnl style-j4e7h74kimageItempanel" id="SldShwGllry1-14lwdataItem-jmzzght2panel">
                 <h3 aria-hidden="true" class="style-j4e7h74kimageItemtitle" id="SldShwGllry1-14lwdataItem-jmzzght2title" itemprop="name" style="text-align:left">
                  [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                 </h3>
                 <p class="style-j4e7h74kimageItemdescription" id="SldShwGllry1-14lwdataItem-jmzzght2Description" itemprop="description" style="text-align:left">
                  [search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li><li>[search]</li><li>[link]</li>[link]
                 </p>
                </div>
               </div>
              </div>
              <div class="style-j4e7h74kimageItem" data-bottom-gap="0" data-displayer-height="2956" data-displayer-uri="2d3f7c_f815aa981e384a6fb3ea640e75319df1~mv2_d_5808_2956_s_4_2.jpg" data-displayer-width="5808" data-height-diff="0" data-image-index="0" data-image-wrapper-bottom="0" data-image-wrapper-left="0" data-image-wrapper-right="0" data-image-wrapper-top="0" data-margin-to-container="0" data-state="defaultPanelState desktopView alignLeft unselected clipImage noTransition normal noLink" data-width-diff="0" id="SldShwGllry1-14lwdataItem-jp93f85o" itemscope="" itemtype="http://schema.org/ImageObject" style="width:980px;height:484px;position:absolute;left:0;top:0">
               <div class="style-j4e7h74kimageItemlink" data-gallery-id="SldShwGllry1-14lw" data-page-item-context="c1138" draggable="false" id="SldShwGllry1-14lwdataItem-jp93f85olink" style="cursor:default;height:100%;width:100%;position:absolute;top:0px;left:0px;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-drag:none;-webkit-user-drag:none;-moz-user-drag:none;-ms-user-drag:none;user-modify:read-only;-webkit-user-modify:read-only;-moz-user-modify:read-only;-ms-user-modify:read-only">
                <div class="style-j4e7h74kimageItemimageWrapper" id="SldShwGllry1-14lwdataItem-jp93f85oimageWrapper" style="height:484px;width:980px;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0">
                 <div class="style-j4e7h74kimageItemzoom" id="SldShwGllry1-14lwdataItem-jp93f85ozoom" style="cursor:default">
                  <div class="style-j4e7h74kimageItemimage" data-style="position:relative;overflow:hidden" id="SldShwGllry1-14lwdataItem-jp93f85oimage" style="position:relative;overflow:hidden">
                  </div>
                 </div>
                </div>
                <div class="style-j4e7h74kimageItem_pnl style-j4e7h74kimageItempanel" id="SldShwGllry1-14lwdataItem-jp93f85opanel">
                 <h3 aria-hidden="true" class="style-j4e7h74kimageItemtitle" id="SldShwGllry1-14lwdataItem-jp93f85otitle" itemprop="name" style="text-align:left">
                  [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                 </h3>
                 <p class="style-j4e7h74kimageItemdescription" id="SldShwGllry1-14lwdataItem-jp93f85oDescription" itemprop="description" style="text-align:left">
                  <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref][search][ahref]<li>[search]</li>[ahref][link]
                 </p>
                </div>
               </div>
              </div>
             </div>
             <div class="style-j4e7h74k_buttons">
              <div class="style-j4e7h74k_btn style-j4e7h74kbuttonPrev" data-gallery-id="SldShwGllry1-14lw" id="SldShwGllry1-14lwbuttonPrev" style="visibility:visible">
              </div>
              <div class="style-j4e7h74k_btn style-j4e7h74kbuttonNext" data-gallery-id="SldShwGllry1-14lw" id="SldShwGllry1-14lwbuttonNext" style="visibility:visible">
              </div>
             </div>
             <div class="style-j4e7h74k_helpers">
              <div class="style-j4e7h74kautoplay" data-gallery-id="SldShwGllry1-14lw" id="SldShwGllry1-14lwautoplay" style="cursor:pointer;visibility:hidden">
               <span>
               </span>
              </div>
              <div class="style-j4e7h74kcounter" data-gallery-id="SldShwGllry1-14lw" id="SldShwGllry1-14lwcounter" style="visibility:visible">
               1/4
              </div>
             </div>
            </div>
            <div class="htco1" data-state="hasContent" id="comp-j4hx5cs8" style="top:493px;bottom:;left:-492px;right:;width:200px;height:200px;position:absolute">
             <div class="htco1iFrameHolder" id="comp-j4hx5cs8iFrameHolder">
              <iframe data-src="https://www-gopizza-kr.filesusr.com/html/6c2b82_2d7548a416f3d65fa0e6f607765b90b5.html" height="100%" scrolling="auto" width="100%">
              </iframe>
             </div>
            </div>
            <div class="wp2" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-exact-height="30" id="comp-jizjtncz" style="top:507px;bottom:;left:12px;right:;width:29px;height:30px;position:absolute" title="">
             <div class="wp2link" id="comp-jizjtnczlink" style="width:29px;height:30px">
              <div class="wp2img" data-style="" id="comp-jizjtnczimg">
              </div>
             </div>
            </div>
            <div class="txtNew" data-packed="true" id="comp-jizjtnd7" style="top:507px;bottom:;left:48px;right:;width:400px;height:auto;position:absolute;pointer-events:none">
             <h2 class="font_2" style="font-size:30px;">
              [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
             </h2>
            </div>
            <div class="style-jizk18hm" id="comp-jizk18co" style="min-height:484px;min-width:484px;visibility:hidden;top:547px;bottom:;left:0;right:;width:484px;height:484px;position:absolute;z-index:">
             <iframe allow="autoplay; camera; microphone; geolocation; vr" allowfullscreen="" allowtransparency="true" aria-label="Instagram Pro" class="style-jizk18hmiframe" data-src="https://wix.elfsight.com/widget/instashow?cacheKiller=1544618054539&amp;compId=comp-jizk18co&amp;currency=KRW&amp;deviceType=desktop&amp;height=484&amp;instance=ivpWLeriREs_UFhHofJPS4TToGga6FlIGbH-fE6nL_U.eyJpbnN0YW5jZUlkIjoiYzllNjBiNTQtN2RmZC00MWIyLThmNzItMzhkNmZlMzFmNzVhIiwiYXBwRGVmSWQiOiIxNDNjYThjYi00ZjA5LTBlM2ItNGFjYS1hZDJmZWZmZTI2ZGIiLCJzaWduRGF0ZSI6IjIwMTgtMTItMTJUMTI6MzQ6NDYuNTUxWiIsInVpZCI6bnVsbCwiaXBBbmRQb3J0IjoiMTI4LjEuMTMzLjE4Ni80MTU5OCIsInZlbmRvclByb2R1Y3RJZCI6Imluc3Rhc2hvd19wcmVtaXVtIiwiZGVtb01vZGUiOmZhbHNlLCJhaWQiOiJmNzFmMDkwYi04Nzc0LTQ4NTctOWRiMy1lMmQwMTYyYTNjYTciLCJzaXRlT3duZXJJZCI6IjZjMmI4MjM1LWZkMmEtNDIzZi1iZTUzLThkMDdkOWRiOTRjNCJ9&amp;locale=en&amp;pageId=cjg9&amp;tz=Asia%2FSeoul&amp;viewMode=site&amp;width=484" frameborder="0" id="comp-jizk18coiframe" name="comp-jizk18co" scrolling="no" style="display:block;width:100%;height:100%;overflow:hidden;position:absolute" title="Instagram Pro">
             </iframe>
             <div class="style-jizk18hmoverlay" id="comp-jizk18cooverlay">
             </div>
            </div>
            <div class="txtNew" data-packed="true" id="comp-j2zwiimu" style="top:507px;bottom:;left:502px;right:;width:400px;height:auto;position:absolute;pointer-events:none">
             <h2 class="font_2" style="font-size:30px;">
              <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
             </h2>
            </div>
            <div class="app1" data-dynamic-height="true" data-state="content" id="comp-j2zz54n8" style="top:552px;bottom:;left:502px;right:;width:480px;height:auto;position:absolute">
             <div class="app1inlineContent" id="comp-j2zz54n8inlineContent" style="height:auto">
              <div class=" " id="TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0" style="direction:ltr;box-sizing:border-box">
               <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_i9eax8l9" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;direction:ltr;box-sizing:border-box">
                <div class="s_pQyQInlineSkin" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_paginatedlist" style="bottom:;right:;box-sizing:border-box">
                 <div class="s_pQyQInlineSkininlineContent" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_paginatedlistinlineContent">
                  <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_0_positionInParent_default" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:100%;box-sizing:border-box">
                   <div class=" " id="TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0" style="box-sizing:border-box">
                    <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                     <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_Top" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:auto;min-width:0;box-sizing:border-box">
                     </div>
                     <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_topSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:0">
                     </div>
                     <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_def_3" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                      <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_Left" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;width:auto;min-width:0;box-sizing:border-box">
                       <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_image_1" style="-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                        <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_image_1" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;margin-right:20px;box-sizing:border-box">
                         [link]
                         
                        </div>
                       </div>
                      </div>
                      <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_leftToCenterSpacer_child" orientation="horizontal" style="box-sizing:border-box;width:0">
                      </div>
                      <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_Center" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;justify-content:flex-start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;-ms-flex-pack:start;-ms-justify-content:flex-start;width:auto;min-width:200px;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_text_1" style="-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                        <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_text_1" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_text_1_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_text_1_proxyrichTextContainer" style="height:initial">
                           <p class="font_8 color_13" style='font-size:17px; font-family:"맑은 고딕","malgun gothic","apple sd gothic neo",applegothic,sans-serif;'>
                            [KAIST 동문 인터뷰] 피자에 대한 새로운 정의를 제시한다!<li>[link]</li><li>[link]</li><li>[ahref]</li>[search]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>
                           </p>
                          </div>
                         </div>
                        </div>
                       </div>
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_i98c2l3a39" style="box-sizing:border-box">
                        <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_i98c2l3a39" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                         <a class="wixAppsLink" data-content="https://m.blog.naver.com/PostView.nhn?blogId=kcbpr&amp;logNo=221408708589&amp;proxyReferer=http%3A%2F%2Fm.facebook.com" data-type="external" href="/PostView.nhn?blogId=kcbpr&amp;logNo=221408708589&amp;proxyReferer=http%3A%2F%2Fm.facebook.com" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;text-align:left;width:100%;height:auto;box-sizing:border-box" target="_blank">
                          <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_i98c2l3a39_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                           <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_i98c2l3a39_proxyrichTextContainer" style="height:initial">
                            <p class="font_8" style="color:#000000;">
                             November 28, 2018
                            </p>
                           </div>
                          </div>
                         </a>
                        </div>
                       </div>
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_hfxs75de" style="box-sizing:border-box">
                        <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_hfxs75de" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin-top:6px;box-sizing:border-box">
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_hfxs75de_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_fld_hfxs75de_proxyrichTextContainer" style="height:initial">
                           <p class="font_8">
                            <span style="color:#000000;">
                             카이스트 출신의 임재원 동문 인터뷰 "피자라는 음식을 선택한 것보다 피자의 새로운 비즈니스 모델을 창조해냈다는 점이 중요.."
                            </span>
                           </p>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                      <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_centerToRightSpacer_child" orientation="horizontal" style="box-sizing:border-box;width:3px">
                      </div>
                      <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_Right" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;justify-content:flex-start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;-ms-flex-pack:start;-ms-justify-content:flex-start;width:auto;min-width:0;box-sizing:border-box">
                      </div>
                     </div>
                     <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_Bottom" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:auto;box-flex-pack:start;min-width:0;box-sizing:border-box">
                     </div>
                     <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_0_0_bottomSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:0">
                     </div>
                    </div>
                   </div>
                   <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_0_footerSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                   </div>
                  </div>
                  <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_1_positionInParent_default" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:100%;box-sizing:border-box">
                   <div class=" " id="TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1" style="box-sizing:border-box">
                    <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                     <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_Top" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:auto;min-width:0;box-sizing:border-box">
                     </div>
                     <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_topSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:0">
                     </div>
                     <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_def_3" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                      <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_Left" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;width:auto;min-width:0;box-sizing:border-box">
                       <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_image_1" style="-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                        <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_image_1" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;margin-right:20px;box-sizing:border-box">
                         <a class="wixAppsLink" data-content="http://www.futurekorea.co.kr/news/articleView.html?idxno=111833" data-type="external" href="/news/articleView.html?idxno=111833" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:142px;height:142px;box-sizing:border-box" target="_blank">
                          <div data-display-mode="fill" data-height="198" data-proxy-name="Image" data-uri="6c2b82_82c03a028d9d48a3829150d414e22f6e~mv2.png" data-width="312" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_image_1_proxy_container" style="bottom:;right:;height:142px;position:relative;min-width:142px;box-sizing:border-box">
                           <div class="wp2" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-exact-height="16" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_image_1_proxy" style="width:16px;height:16px" title="180521-kibo-001.png">
                            <div class="wp2link" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_image_1_proxylink" style="width:16px;height:16px">
                             <div class="wp2img" data-style="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_image_1_proxyimg">
                             </div>
                            </div>
                           </div>
                          </div>
                         </a>
                        </div>
                       </div>
                      </div>
                      <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_leftToCenterSpacer_child" orientation="horizontal" style="box-sizing:border-box;width:0">
                      </div>
                      <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_Center" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;justify-content:flex-start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;-ms-flex-pack:start;-ms-justify-content:flex-start;width:auto;min-width:200px;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_text_1" style="-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                        <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_text_1" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                         <a class="wixAppsLink" data-content="http://www.futurekorea.co.kr/news/articleView.html?idxno=111833" data-type="external" href="/news/articleView.html?idxno=111833" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;text-align:left;width:100%;height:auto;box-sizing:border-box" target="_blank">
                          <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_text_1_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                           <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_text_1_proxyrichTextContainer" style="height:initial">
                            <p class="font_8 color_13" style='font-size:17px; font-family:"맑은 고딕","malgun gothic","apple sd gothic neo",applegothic,sans-serif;'>
                             <strong style="font-weight:bold;">
                              <em style="font-style:normal;">
                               <strike style="text-decoration:none;">
                                <u style="text-decoration:none;">
                                 고피자, 외식업계 첫 프런티어 벤처기업 선정
                                </u>
                               </strike>
                              </em>
                             </strong>
                            </p>
                           </div>
                          </div>
                         </a>
                        </div>
                       </div>
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_fld_i98c2l3a39" style="box-sizing:border-box">
                        <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_fld_i98c2l3a39" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                         [ahref]
                         
                        </div>
                       </div>
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_fld_hfxs75de" style="box-sizing:border-box">
                        <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_fld_hfxs75de" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin-top:6px;box-sizing:border-box">
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_fld_hfxs75de_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_fld_hfxs75de_proxyrichTextContainer" style="height:initial">
                           <p class="font_8">
                            <span style="color:#000000;">
                             기술보증기금(이하 기보)은 외식 프렌차이즈 업계 최초로 고피자를 프런티어 벤처기업으로 선정했다고 밝혔다.<li>[ahref]</li><li>[link]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
                            </span>
                            <br>
                             <li>[search]</li><li>[search]</li><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[search]</li>
                            </br>
                            <br/>
                           </p>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                      <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_centerToRightSpacer_child" orientation="horizontal" style="box-sizing:border-box;width:3px">
                      </div>
                      <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_Right" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;justify-content:flex-start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;-ms-flex-pack:start;-ms-justify-content:flex-start;width:auto;min-width:0;box-sizing:border-box">
                      </div>
                     </div>
                     <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_Bottom" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:auto;box-flex-pack:start;min-width:0;box-sizing:border-box">
                     </div>
                     <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_1_0_bottomSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:0">
                     </div>
                    </div>
                   </div>
                   <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_1_footerSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                   </div>
                  </div>
                  <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_positionInParent_last" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:100%;box-sizing:border-box">
                   <div class=" " id="TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2" style="box-sizing:border-box">
                    <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                     <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_Top" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:auto;min-width:0;box-sizing:border-box">
                     </div>
                     <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_topSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:0">
                     </div>
                     <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_def_3" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                      <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_Left" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;width:auto;min-width:0;box-sizing:border-box">
                       <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_image_1" style="-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                        <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_image_1" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;margin-right:20px;box-sizing:border-box">
                         [link]
                         
                        </div>
                       </div>
                      </div>
                      <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_leftToCenterSpacer_child" orientation="horizontal" style="box-sizing:border-box;width:0">
                      </div>
                      <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_Center" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;justify-content:flex-start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;-ms-flex-pack:start;-ms-justify-content:flex-start;width:auto;min-width:200px;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_text_1" style="-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                        <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_text_1" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                         <a class="wixAppsLink" data-content="http://news.hankyung.com/article/201810249620g" data-type="external" href="/article/201810249620g" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;text-align:left;width:100%;height:auto;box-sizing:border-box" target="_blank">
                          <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_text_1_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                           <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_text_1_proxyrichTextContainer" style="height:initial">
                            <p class="font_8 color_13" style='font-size:17px; font-family:"맑은 고딕","malgun gothic","apple sd gothic neo",applegothic,sans-serif;'>
                             '고피자'…지역맛집 전국구로 키워낸 CJ프레시웨이<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li>
                            </p>
                           </div>
                          </div>
                         </a>
                        </div>
                       </div>
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_fld_i98c2l3a39" style="box-sizing:border-box">
                        <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_fld_i98c2l3a39" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                         [link]
                         
                        </div>
                       </div>
                       <div class="" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_fld_hfxs75de" style="box-sizing:border-box">
                        <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_fld_hfxs75de" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin-top:6px;box-sizing:border-box">
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_fld_hfxs75de_proxy" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_fld_hfxs75de_proxyrichTextContainer" style="height:initial">
                           <p class="font_8">
                            세계 최초의 1인 화덕 피자로 유명한 '고피자(GOPIZZA)'와 전국 식자재  및 물류 공급계약을 체결했다. <li>[search]</li>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[link][search]<li>[search]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[search]</li>[ahref]
                           </p>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                      <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_centerToRightSpacer_child" orientation="horizontal" style="box-sizing:border-box;width:3px">
                      </div>
                      <div class="flex_display flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_Right" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;justify-content:flex-start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;-ms-flex-pack:start;-ms-justify-content:flex-start;width:auto;min-width:0;box-sizing:border-box">
                      </div>
                     </div>
                     <div class=" flex_vbox" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_Bottom" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:auto;box-flex-pack:start;min-width:0;box-sizing:border-box">
                     </div>
                     <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Testimonials_i6f6hb4u1_1__0_0_2_0_bottomSpacer_child" orientation="vertical" style="box-sizing:border-box;min-height:0">
                     </div>
                    </div>
                   </div>
                   <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_10_child" orientation="vertical" style="box-sizing:border-box;min-height:9px">
                   </div>
                   <div class="flex_display" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_paginationNavigationBox" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-webkit-align-items:center;-moz-box-align:center;-ms-flex-align:center;align-items:center;box-align:center;box-sizing:border-box">
                    <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_12_child" orientation="horizontal" style="box-sizing:border-box;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1">
                    </div>
                    <div class="paginationPrev s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_13" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:4px;white-space:normal">
                     <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_13richTextContainer" style="height:initial">
                      <p class="font_8">
                       ◄
                      </p>
                     </div>
                    </div>
                    <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_14" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:4px;white-space:normal">
                     <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_14richTextContainer" style="height:initial">
                      <p class="font_8">
                       1 / 7<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[link]
                      </p>
                     </div>
                    </div>
                    <div class="paginationNext s_usaAWRichTextClickableSkin" data-packed="false" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_15" style="bottom:;right:;height:auto;box-sizing:border-box;white-space:normal">
                     <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_15richTextContainer" style="height:initial">
                      <p class="font_8">
                       ►[search]<li>[link]</li><li>[ahref]</li>[ahref]<li>[link]</li><li>[search]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
                      </p>
                     </div>
                    </div>
                    <div id="comp-j2zz54n8_TestimonialsView_i6f6hb4w2_dup_i6m5p5li155_dup_i6qm3pc3335_dup_i6tgyzus52_dup_i70h8xv6192_dup_i7g5t86w229_dup_i9eax8l9240_j2zz54od_Array__0_0_2_def_16_child" orientation="horizontal" style="box-sizing:border-box;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1">
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class="app1error" id="comp-j2zz54n8error">
              Please reload
             </div>
             <div class="app1loading" id="comp-j2zz54n8loading">
              <p>
              </p>
             </div>
            </div>
            <div class="htco1" data-state="hasContent" id="comp-j4hwyj8l" style="top:537px;bottom:;left:1450px;right:;width:21px;height:5px;position:absolute">
             <div class="htco1iFrameHolder" id="comp-j4hwyj8liFrameHolder">
              <iframe data-src="https://www-gopizza-kr.filesusr.com/html/6c2b82_2d7548a416f3d65fa0e6f607765b90b5.html" height="100%" scrolling="auto" width="100%">
              </iframe>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </main>
      <div class="tpagw0" id="comp-j4hwwfnv" style="min-height:6px;min-width:0;visibility:hidden;top:874px;bottom:;left:1954px;right:;width:0;height:6px;position:fixed;z-index:50">
       <iframe allow="autoplay; camera; microphone; geolocation; vr" allowfullscreen="" allowtransparency="true" aria-label="Wix Chat" class="tpagw0iframe" data-src="https://engage.wixapps.net/_api/crm-inbox-server/chat/renderPublic/index?cacheKiller=1544618054539&amp;compId=comp-j4hwwfnv&amp;currency=KRW&amp;deviceType=desktop&amp;height=6&amp;instance=thk6aGcJOrzvabhALzWfdCaU1v6ZQbUYDF-3T0AP5KI.eyJpbnN0YW5jZUlkIjoiZDJiMzAxNjYtZjI3MS00OWY1LWFhYWYtNWJjZWRkYWM0MGM4IiwiYXBwRGVmSWQiOiIxNDUxN2UxYS0zZmYwLWFmOTgtNDA4ZS0yYmQ2OTUzYzM2YTIiLCJtZXRhU2l0ZUlkIjoiOTJmODJkZTEtYTcwZi00ZWEyLWI5MmQtNDcxOGY3NTg4NDdmIiwic2lnbkRhdGUiOiIyMDE4LTEyLTEyVDEyOjM0OjQ2LjU1M1oiLCJ1aWQiOm51bGwsImlwQW5kUG9ydCI6IjEyOC4xLjEzMy4xODYvNDE1OTgiLCJ2ZW5kb3JQcm9kdWN0SWQiOm51bGwsImRlbW9Nb2RlIjpmYWxzZSwiYWlkIjoiZjcxZjA5MGItODc3NC00ODU3LTlkYjMtZTJkMDE2MmEzY2E3IiwiYmlUb2tlbiI6IjQwNGIyYzg3LTU1N2UtMDc1Ny0xMzgyLTFjZDYyYWY0YzRiNyIsInNpdGVPd25lcklkIjoiNmMyYjgyMzUtZmQyYS00MjNmLWJlNTMtOGQwN2Q5ZGI5NGM0In0&amp;locale=en&amp;pageId=masterPage&amp;tz=Asia%2FSeoul&amp;viewMode=site&amp;width=0" frameborder="0" id="comp-j4hwwfnviframe" name="comp-j4hwwfnv" scrolling="no" style="display:block;width:100%;height:100%;overflow:hidden;position:absolute" title="Wix Chat">
       </iframe>
       <div class="tpagw0overlay" id="comp-j4hwwfnvoverlay">
       </div>
      </div>
      <div class="style-jjnzr51c" id="CONTROLLER_COMP_CUSTOM_ID" style="width:;height:;top:15px;bottom:;left:20px;right:;position:absolute">
      </div>
      <footer class="fc1_footer fc1" data-fixedposition="false" data-isrunninginmobile="false" data-site-width="980" data-state=" " id="SITE_FOOTER" style="bottom:auto;left:0;margin-left:0;width:100%;min-width:980px;top:1226px;right:;height:105px;position:absolute">
       <div class="fc1screenWidthBackground" id="SITE_FOOTERscreenWidthBackground" style="left:0;width:100%">
       </div>
       <div class="fc1centeredContent" id="SITE_FOOTERcenteredContent" style="width:100%">
        <div class="fc1bg" id="SITE_FOOTERbg" style="margin-left:calc((100% - 980px) / 2);width:980px">
        </div>
        <div class="fc1inlineContent" id="SITE_FOOTERinlineContent">
         <div class="txtNew" data-packed="true" id="WRchTxt0-16wb" style="top:12px;bottom:;left:0;right:;width:403px;height:auto;position:absolute;pointer-events:none">
          <p class="font_9">
           © 2018 GOPIZZA Co. All rights reserved.[search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
          </p>
         </div>
         <div class="txtNew" data-min-height="17" data-packed="false" id="comp-j4tkpot9" style="top:13px;bottom:;left:176px;right:;width:740px;height:auto;position:absolute;min-height:17px;pointer-events:none">
          <h6 class="font_6" style="font-size:12px; text-align:right;">
           <span style="font-family:nanumgothic-regular,sans-serif;">
            <span class="color_30">
             <span style="font-weight:bold;">
              <li>[link]</li><li>[ahref]</li>[link]<li>[link]</li><li>[search]</li>[link][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
             </span>
            </span>
           </span>
           <span style="font-family:nanumgothic-regular,sans-serif;">
            3F[search]<li>[search]</li><li>[link]</li>[ahref]<li>[link]</li><li>[link]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]
           </span>
          </h6>
         </div>
         <div class="lb1" data-hide-prejs="true" id="LnkBr0-op1" style="width:57px;height:25px;top:6px;bottom:;left:924px;right:;position:absolute">
          <ul aria-label="Social bar" class="lb1itemsContainer" id="LnkBr0-op1itemsContainer">
           <li class="lb1imageItem" id="LnkBr0-op10image" style="width:25px;height:25px;margin-bottom:0;margin-right:7px;display:inline-block">
            <a class="lb1imageItemlink" data-content="http://www.instagram.com/gopizza.kr" data-type="external" href="/gopizza.kr" id="LnkBr0-op10imagelink" target="_blank">
             <div class="lb1imageItemimage" data-image-info='{"imageData":{"link":{"type":"ExternalLink","id":"dataItem-je5cp38y","metaData":{"isPreset":false,"schemaVersion":"1.0","isHidden":false},"url":"http://www.instagram.com/gopizza.kr","target":"_blank"},"type":"Image","id":"dataItem-j2zyp2hz","metaData":{"isPreset":false,"schemaVersion":"2.0","isHidden":false},"title":"Instagram Social Icon","uri":"8d6893330740455c96d218258a458aa4.png","width":200,"height":200,"alt":"Instagram Social Icon"},"displayMode":"fill"}' data-style="position:absolute" id="LnkBr0-op10imageimage" style="width:25px;height:25px;position:absolute">
             </div>
            </a>
           </li>
           <li class="lb1imageItem" id="LnkBr0-op11image" style="width:25px;height:25px;margin-bottom:0;margin-right:7px;display:inline-block">
            <a class="lb1imageItemlink" data-content="http://www.facebook.com/gopizza.kr" data-type="external" href="/gopizza.kr" id="LnkBr0-op11imagelink" target="_blank">
             <div class="lb1imageItemimage" data-image-info='{"imageData":{"link":{"type":"ExternalLink","id":"85vd","metaData":{"isPreset":false,"schemaVersion":"1.0","isHidden":false},"url":"http://www.facebook.com/gopizza.kr","target":"_blank"},"type":"Image","id":"i0tiy","metaData":{"isPreset":false,"schemaVersion":"2.0","isHidden":false},"title":"Facebook Social Icon","uri":"e316f544f9094143b9eac01f1f19e697.png","description":"","width":200,"height":200,"alt":"Facebook Social Icon"},"displayMode":"fill"}' data-style="position:absolute" id="LnkBr0-op11imageimage" style="width:25px;height:25px;position:absolute">
             </div>
            </a>
           </li>
          </ul>
         </div>
         <div aria-label="Login or Sign up" class="style-jjnzr7ab2" data-is-logged-in="false" data-state="loggedOut ltr left avatarOnly buttons" id="comp-jjnzr761" style="direction:ltr;justify-content:flex-end;top:53px;bottom:;left:862px;right:;width:118px;height:40px;position:absolute">
          <button class="style-jjnzr7ab2login" id="comp-jjnzr761login">
           <div class="style-jjnzr7ab2avatar" data-state="svg" id="comp-jjnzr761avatar" style="width:26px;height:26px">
            <div class="style-jjnzr7ab2avatarimage" id="comp-jjnzr761avatarimage">
            </div>
            <div class="style-jjnzr7ab2avatarsvg" data-display-mode="fit" data-preserve-viewbox="preserve" data-svg-id="3d84bae5ad4d4d8a96de15e9f4b79a08.svg" data-svg-type="shape" data-viewbox="0 0 50 50" id="comp-jjnzr761avatarsvg">
             <div class="style-jjnzr7ab2avatarsvg_comp-jjnzr761avatarsvg style-jjnzr7ab2avatarsvg_non-scaling-stroke style-jjnzr7ab2avatarsvgsvg" id="comp-jjnzr761avatarsvgsvg" style="width:26px;height:26px;opacity:1">
              <svg data-type="shape" height="50" role="img" viewbox="0 0 50 50" width="50" xmlns="http://www.w3.org/2000/svg">
               <g>
                <path d="M25 48.077c-5.924 0-11.31-2.252-15.396-5.921 2.254-5.362 7.492-8.267 15.373-8.267 7.889 0 13.139 3.044 15.408 8.418-4.084 3.659-9.471 5.77-15.385 5.77m.278-35.3c4.927 0 8.611 3.812 8.611 8.878 0 5.21-3.875 9.456-8.611 9.456s-8.611-4.246-8.611-9.456c0-5.066 3.684-8.878 8.611-8.878M25 0C11.193 0 0 11.193 0 25c0 .915.056 1.816.152 2.705.032.295.091.581.133.873.085.589.173 1.176.298 1.751.073.338.169.665.256.997.135.515.273 1.027.439 1.529.114.342.243.675.37 1.01.18.476.369.945.577 1.406.149.331.308.657.472.98.225.446.463.883.714 1.313.182.312.365.619.56.922.272.423.56.832.856 1.237.207.284.41.568.629.841.325.408.671.796 1.02 1.182.22.244.432.494.662.728.405.415.833.801 1.265 1.186.173.154.329.325.507.475l.004-.011A24.886 24.886 0 0 0 25 50a24.881 24.881 0 0 0 16.069-5.861.126.126 0 0 1 .003.01c.172-.144.324-.309.49-.458.442-.392.88-.787 1.293-1.209.228-.232.437-.479.655-.72.352-.389.701-.78 1.028-1.191.218-.272.421-.556.627-.838.297-.405.587-.816.859-1.24a26.104 26.104 0 0 0 1.748-3.216c.208-.461.398-.93.579-1.406.127-.336.256-.669.369-1.012.167-.502.305-1.014.44-1.53.087-.332.183-.659.256-.996.126-.576.214-1.164.299-1.754.042-.292.101-.577.133-.872.095-.89.152-1.791.152-2.707C50 11.193 38.807 0 25 0">
                </path>
               </g>
              </svg>
             </div>
             <div class="style-jjnzr7ab2avatarsvglink" id="comp-jjnzr761avatarsvglink">
             </div>
            </div>
           </div>
           <span>
            Log In<li>[ahref]</li>[link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
           </span>
          </button>
          <nav class="style-jjnzr7ab2buttons" id="comp-jjnzr761buttons">
          </nav>
          <button class="style-jjnzr7ab2user" id="comp-jjnzr761user">
           <div class="style-jjnzr7ab2icon" id="comp-jjnzr761icon">
           </div>
           <div class="style-jjnzr7ab2text" id="comp-jjnzr761text">
           </div>
           <div class="style-jjnzr7ab2arrow" id="comp-jjnzr761arrow">
            <svg height="8" viewbox="0 0 14 8" width="14" xmlns="http://www.w3.org/2000/svg">
             <path d="M1.707.293L.293 1.707l6 6a1 1 0 0 0 1.397.016l6-5.726L12.31.55 7.016 5.602 1.707.292z" fill-rule="nonzero">
             </path>
            </svg>
           </div>
          </button>
          <nav class="style-jjnzr7ab2dropdownMenu" id="comp-jjnzr761dropdownMenu">
          </nav>
         </div>
        </div>
       </div>
      </footer>
     </div>
    </div>
    <div class="siteAspectsContainer">
     <div>
      <div class="s_DtaksTPAWidgetSkin" id="tpaWorker_10" style="min-height:;min-width:;visibility:hidden;top:;bottom:;left:;right:;width:;height:;position:absolute;z-index:">
       <iframe allow="autoplay; camera; microphone; geolocation; vr" allowfullscreen="" allowtransparency="true" aria-label="Visitor Analytics" class="s_DtaksTPAWidgetSkiniframe" data-src="https://loadbalancer.visitor-analytics.io/worker?cacheKiller=1544618054539&amp;compId=tpaWorker_10&amp;currency=KRW&amp;deviceType=desktop&amp;endpointType=worker&amp;instance=XJ4Ui7EIBFR4rGzzninyhVXKSdeRgi2jXw2r4zwxJDk.eyJpbnN0YW5jZUlkIjoiNjM5OGVjMmMtYjI1Ni00MDdhLTgzYjgtZjUzYzE0ODBjMTk4IiwiYXBwRGVmSWQiOiIxM2VlNTNiNC0yMzQzLWI2NDEtYzg0ZC0wNTZkMmU2ZWQyZTYiLCJzaWduRGF0ZSI6IjIwMTgtMTItMTJUMTI6MzQ6NDYuNTUzWiIsInVpZCI6bnVsbCwiaXBBbmRQb3J0IjoiMTI4LjEuMTMzLjE4Ni80MTU5OCIsInZlbmRvclByb2R1Y3RJZCI6bnVsbCwiZGVtb01vZGUiOmZhbHNlLCJhaWQiOiJmNzFmMDkwYi04Nzc0LTQ4NTctOWRiMy1lMmQwMTYyYTNjYTciLCJzaXRlT3duZXJJZCI6IjZjMmI4MjM1LWZkMmEtNDIzZi1iZTUzLThkMDdkOWRiOTRjNCJ9&amp;locale=en&amp;tz=Asia%2FSeoul&amp;viewMode=site" frameborder="0" id="tpaWorker_10iframe" name="tpaWorker_10" scrolling="no" style="display:none;width:100%;height:100%;overflow:hidden;position:absolute" title="Visitor Analytics">
       </iframe>
       <div class="s_DtaksTPAWidgetSkinoverlay" id="tpaWorker_10overlay">
       </div>
      </div>
      <div class="s_DtaksTPAWidgetSkin" id="tpaWorker_8646" style="min-height:;min-width:;top:;bottom:;left:;right:;width:;height:;position:absolute;z-index:">
       <iframe allow="autoplay; camera; microphone; geolocation; vr" allowfullscreen="" allowtransparency="true" aria-label="Forum" class="s_DtaksTPAWidgetSkiniframe" data-src="https://ding.wix.com/asdk/dispatcher.html?cacheKiller=1544618054539&amp;compId=tpaWorker_8646&amp;currency=KRW&amp;deviceType=desktop&amp;endpointType=worker&amp;instance=kcU1il1aoubbbNxTi0ekGsS19j4aXkJxExIEFnFyOQo.eyJpbnN0YW5jZUlkIjoiMTI3ZDM0NDMtOTU1Ny00MDExLThlNjYtNmNkNmMwMjlkYTM3IiwiYXBwRGVmSWQiOiIxNDcyNGYzNS02Nzk0LWNkMWEtMDI0NC0yNWZkMTM4ZjkyNDIiLCJtZXRhU2l0ZUlkIjoiOTJmODJkZTEtYTcwZi00ZWEyLWI5MmQtNDcxOGY3NTg4NDdmIiwic2lnbkRhdGUiOiIyMDE4LTEyLTEyVDEyOjM0OjQ2LjU1NVoiLCJ1aWQiOm51bGwsImlwQW5kUG9ydCI6IjEyOC4xLjEzMy4xODYvNDE1OTgiLCJ2ZW5kb3JQcm9kdWN0SWQiOm51bGwsImRlbW9Nb2RlIjpmYWxzZSwiYWlkIjoiZjcxZjA5MGItODc3NC00ODU3LTlkYjMtZTJkMDE2MmEzY2E3IiwiYmlUb2tlbiI6IjgwODUxOWEyLTMyNTgtMGViMy0zNzRiLTJiY2UzNzcxNWU0OCIsInNpdGVPd25lcklkIjoiNmMyYjgyMzUtZmQyYS00MjNmLWJlNTMtOGQwN2Q5ZGI5NGM0In0&amp;locale=en&amp;tz=Asia%2FSeoul&amp;viewMode=site" frameborder="0" id="tpaWorker_8646iframe" name="tpaWorker_8646" scrolling="no" style="display:none;width:100%;height:100%;overflow:hidden;position:absolute" title="Forum">
       </iframe>
       <div class="s_DtaksTPAWidgetSkinoverlay" id="tpaWorker_8646overlay">
       </div>
      </div>
      <div class="s_DtaksTPAWidgetSkin" id="tpaWorker_10070" style="min-height:;min-width:;visibility:hidden;top:;bottom:;left:;right:;width:;height:;position:absolute;z-index:">
       <iframe allow="autoplay; camera; microphone; geolocation; vr" allowfullscreen="" allowtransparency="true" aria-label="Profile Card" class="s_DtaksTPAWidgetSkiniframe" data-src="https://apps.wix.com/members-area/app-worker?cacheKiller=1544618054539&amp;compId=tpaWorker_10070&amp;currency=KRW&amp;deviceType=desktop&amp;endpointType=worker&amp;instance=hEjf0pbnrc25Ehvs7Qyaukhv3V5z5JcTCaXgCO7RguU.eyJpbnN0YW5jZUlkIjoiOGUyNjQwMDgtN2EyZC00ZmRlLWJjN2YtNDBiNGJlNjJlZDBkIiwiYXBwRGVmSWQiOiIxNGNlMjhmNy03ZWIwLTM3NDUtMjJmOC0wNzRiMGUyNDAxZmIiLCJtZXRhU2l0ZUlkIjoiOTJmODJkZTEtYTcwZi00ZWEyLWI5MmQtNDcxOGY3NTg4NDdmIiwic2lnbkRhdGUiOiIyMDE4LTEyLTEyVDEyOjM0OjQ2LjU1NVoiLCJ1aWQiOm51bGwsImlwQW5kUG9ydCI6IjEyOC4xLjEzMy4xODYvNDE1OTgiLCJ2ZW5kb3JQcm9kdWN0SWQiOm51bGwsImRlbW9Nb2RlIjpmYWxzZSwiYWlkIjoiZjcxZjA5MGItODc3NC00ODU3LTlkYjMtZTJkMDE2MmEzY2E3IiwiYmlUb2tlbiI6IjFjZGU2ZGU5LWRkMjItMDE3Yy0wNTUyLTA3YWM0OTNhNjk3MiIsInNpdGVPd25lcklkIjoiNmMyYjgyMzUtZmQyYS00MjNmLWJlNTMtOGQwN2Q5ZGI5NGM0In0&amp;locale=en&amp;tz=Asia%2FSeoul&amp;viewMode=site" frameborder="0" id="tpaWorker_10070iframe" name="tpaWorker_10070" scrolling="no" style="display:none;width:100%;height:100%;overflow:hidden;position:absolute" title="Profile Card">
       </iframe>
       <div class="s_DtaksTPAWidgetSkinoverlay" id="tpaWorker_10070overlay">
       </div>
      </div>
     </div>
     <div>
     </div>
     <div>
      <div class="font-ruler-container" style="overflow:hidden;visibility:hidden;max-height:0;max-width:0;position:absolute">
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
          <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li><li>[ahref]</li><li>[search]</li><li>[search]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
          [link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search][link][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[search]<li>[search]</li>[link]<li>[search]</li><li>[search]</li>[search][link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref]<li>[ahref]</li>[ahref]
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
          <li>[search]</li><li>[ahref]</li><li>[search]</li>[link][ahref][link]
         </span>
        </div>
       </div>
      </div>
     </div>
     <div id="popoverLayer">
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0200
  </b>
 </body>
</html>
