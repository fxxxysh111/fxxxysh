<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][keyword1][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.33.0-wmf.6" name="generator"/>
  <meta content="origin" name="referrer"/>
  <meta content="origin-when-crossorigin" name="referrer"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-남쪽 rootpage-남쪽 skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   [link]
   
   <div class="mw-body-content" id="siteNotice">
   </div>
   <div class="mw-indicators mw-body-content">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="ko">
    <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div class="noprint" id="siteSub">
     위키낱말사전, 말과 글의 누리
    </div>
    <div id="contentSub">
    </div>
    <div id="jump-to-nav">
    </div>
    <a class="mw-jump-link" href="d">
     둘러보기로 가기
    </a>
    [ahref]
    
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="ko">
     <div class="mw-parser-output">
      <h2>
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <dl>
       <dd>
        <span style="padding-right: .5em; color: #8F390A; font-weight: bold;">
         [ahref]
         
        </span>
        <span style="color: #000; font-size: 100%;">
         [search][ahref]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
        </span>
       </dd>
      </dl>
      <dd>
       <span style="padding-right: .5em; color: #8F390A; font-weight: bold;">
        발음
       </span>
       [
       <span style="font-size:110%">
        남[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
       </span>
       <span style="font-size:110%">
        쪽
       </span>
       ]
      </dd>
      <table style="margin: 0 1em .5em 1.6em;">
       <tbody>
        <tr>
         <td>
          <table cellpadding="1" style="border: 1px solid #DFDFDF; line-height: 9pt; padding: .1em .3em .1em .3em">
           <tbody>
            <tr>
             <td id="subheadline" style="padding: .4em .5em .2em .5em; font-size: 100%;">
              <b>
               [ahref]
               
              </b>
              <br>
               <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li><li>[link]</li><li>[link]</li><li>[ahref]</li>
              </br>
              <span style="padding-left: .3em; font-size: 8pt; font-family: DejaVu Sans; color: #555;">
               Revised Romanization
              </span>
             </td>
             <td class="IPA" id="subheadline" style="padding: .1em .5em; font-size: 100%;">
              namjjok
             </td>
            </tr>
            <tr>
             <td id="subheadline" style="border-bottom: 1px solid #FFF; padding: .4em .5em .2em .5em; font-size: 100%;">
              <b>
               <a class="mw-redirect" href="/wiki/%EC%9C%84%ED%82%A4%EB%82%B1%EB%A7%90%EC%82%AC%EC%A0%84:%EB%A1%9C%EB%A7%88%EC%9E%90_%ED%91%9C%EA%B8%B0%EB%B2%95/%EB%A7%A4%ED%81%94-%EB%9D%BC%EC%9D%B4%EC%83%A4%EC%9B%8C" title="위키낱말사전:로마자 표기법/매큔-라이샤워">
                매큔-라이샤워 표기
               </a>
              </b>
              <br/>
              <span style="padding-left: .3em; font-size: 8pt; font-family: DejaVu Sans; color: #555;">
               McCune-Reischauer<li>[link]</li>[search][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<li>[ahref]</li>[search]<li>[ahref]</li>[ahref]<li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[search][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
              </span>
             </td>
             <td class="IPA" id="subheadline" style="border-bottom: 1px solid #FFF; padding: .1em .5em; font-size: 100%;">
              namtchok
             </td>
            </tr>
            <tr>
             <td id="subheadline" style="padding: .4em .5em .2em .5em; font-size: 100%;">
              <b>
               [ahref]
               
              </b>
              <br>
               <li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[search]</li>[search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref]<li>[link]</li><li>[link]</li>[ahref]
              </br>
              <span style="padding-left: .3em; font-size: 8pt; font-family: DejaVu Sans; color: #555;">
               Yale Romanization[search][link]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[search]</li>
              </span>
             </td>
             <td class="IPA" id="subheadline" style="padding: .1em .5em; font-size: 100%;">
              namccok
             </td>
            </tr>
            <tr class="mw-empty-elt">
            </tr>
           </tbody>
          </table>
         </td>
        </tr>
       </tbody>
      </table>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li>
        어원:
        [ahref]
        
        (한자
        <a href="/wiki/%E5%8D%97" title="南">
         南
        </a>
        ) +
        [ahref]
        
       </li>
       <li>
        <b>
         1.
        </b>
        지구의 방위에서 남극으로 향한 곳.
       </li>
      </ul>
      <dl>
       <dd>
        <ul>
         <li>
          한국의 남쪽 사람과 북쪽 사람이 쓰는 한국어가 발음과 표기에 차이가 있다.
         </li>
        </ul>
       </dd>
      </dl>
      <ul>
       <li>
        유의어:
        [link]
        
       </li>
      </ul>
      <dl>
       <dd>
        <ul>
         <li>
          참고:
          [link]
          
          -
          [link]
          
          -
          [ahref]
          
          -
          <a href="/wiki/%EB%B6%81%EC%AA%BD" title="북쪽">
           북쪽
          </a>
         </li>
        </ul>
       </dd>
      </dl>
      <div class="NavFrame" style="clear: both; margin: .5em 0 1em 2em;">
       <div class="NavHead" style="border-bottom: 1.2px solid #c0c0c0; text-align: left; line-height: 18pt; background-color: transparent; font-size: 100%;">
        <b>
         번역
        </b>
       </div>
       <div class="NavContent">
        <table border="0" style="padding: 3px; background-color: #f5f5f5;" width="100%">
         <tbody>
          <tr>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              고대교회슬라브어(cu):
              [ahref]
              
              (jugŭ) (남성)
             </li>
             <li>
              고대동슬라브어(orv):
              [link]
              
              (남성)
             </li>
             <li>
              그리스어(el):
              [link]
              
              (nótos) (남성)
             </li>
             <li>
              나와틀어(nah):
              [link]
              
             </li>
             <li>
              남부알타이어(alt):
              [ahref]
              
              (tüştük)
             </li>
             <li>
              네덜란드어(nl):
              <a class="new" href="/w/index.php?title=zuiden&amp;action=edit&amp;redlink=1" title="zuiden (없는 문서)">
               zuiden
              </a>
              (중성)
             </li>
             <li>
              노르웨이어(no):
              [ahref]
              
              ,
              [ahref]
              
             </li>
             <li>
              덴마크어(da):
              [link]
              
             </li>
             <li>
              독일어(de):
             </li>
             <li>
              라트비아어(lv):
              [ahref]
              
              (남성/복수형)
             </li>
             <li>
              라틴어(la):
             </li>
             <li>
              러시아어(ru):
              [link]
              
              (jug) (남성)
             </li>
             <li>
              루마니아어(ro):
              [link]
              
              (중성)
             </li>
             <li>
              리보니아어(fiu-liv):
              [link]
              
             </li>
             <li>
              리투아니아어(lt):
              [ahref]
              
              (남성/복수형)
             </li>
             <li>
              마케도니아어(mk):
              [link]
              
              (jug) (남성)
             </li>
             <li>
              말라얄람어(ml):
              [link]
              
              (thekku)
             </li>
             <li>
              말레이어(ms):
              [ahref]
              
             </li>
             <li>
              몰타어(mt):
              [link]
              
              ,
              [ahref]
              
              ,
              [link]
              
             </li>
             <li>
              몽골어(mn):
             </li>
             <li>
              미얀마어(my):
              [ahref]
              
             </li>
             <li>
              바슈키르어(ba):
              <a href="/wiki/%D0%BA%D3%A9%D0%BD%D1%8C%D1%8F%D2%A1" title="көньяҡ">
               көньяҡ
              </a>
              (könyaq)
             </li>
             <li>
              바스크어(eu):
              [ahref]
              
              ,
              [link]
              
             </li>
             <li>
              벨라루스어(be):
              <a class="new" href="/w/index.php?title=%D0%BF%D0%BE%D1%9E%D0%B4%D0%B7%D0%B5%D0%BD%D1%8C&amp;action=edit&amp;redlink=1" title="поўдзень (없는 문서)">
               поўдзень
              </a>
              (키릴)/
              [link]
              
              (라틴)(póŭdzen') (남성)
             </li>
             <li>
              보스니아어(bs):
              [ahref]
              
              (남성)
             </li>
             <li>
              볼라퓌크(vo):
              [link]
              
             </li>
             <li>
              불가리아어(bg):
              [ahref]
              
              (jug) (남성)
             </li>
             <li>
              브르타뉴어(br):
              [link]
              
              (남성),
              <a class="new" href="/w/index.php?title=kreisteiz&amp;action=edit&amp;redlink=1" title="kreisteiz (없는 문서)">
               kreisteiz
              </a>
              (남성)
             </li>
             <li>
              산스크리트어(sa):
             </li>
             <li>
              세르비아어(sr):
              [ahref]
              
              (키릴)/
              [link]
              
              (라틴) (남성)
             </li>
             <li>
              서프리지아어(fy):
              [ahref]
              
              (중성),
              [ahref]
              
             </li>
             <li>
              쇼르어(cjs):
              [link]
              
              (künegey)
             </li>
             <li>
              스와힐리어(sw):
              [ahref]
              
             </li>
             <li>
              스웨덴어(sv):
              [ahref]
              
             </li>
             <li>
              슬로바키아어(sk):
              <a href="/wiki/juh" title="juh">
               juh
              </a>
              (남성)
             </li>
             <li>
              슬로베니아어(sl):
              [ahref]
              
              (남성)
             </li>
             <li>
              아람어(arc):
              [link]
              
              (시리아)/
              [ahref]
              
              (히브리 문자) (taymnā, taymno) (여성)
             </li>
             <li>
              아랍어(ar):
              [ahref]
              
              (janúb)
             </li>
             <li>
              아르메니아어(hy):
              [ahref]
              
              (harav)
             </li>
             <li>
              아미어(ami):
              [link]
              
             </li>
             <li>
              아일랜드어(ga):
              [link]
              
              (남성)
             </li>
             <li>
              아프리칸스어(af):
              <a class="new" href="/w/index.php?title=suid&amp;action=edit&amp;redlink=1" title="suid (없는 문서)">
               suid
              </a>
             </li>
             <li>
              야쿠트어(sah):
              [link]
              
              (soğuruu)
             </li>
             <li>
              알바니아어(sq):
              [link]
              
              (남성)
             </li>
             <li>
              암하라어(am):
              [ahref]
              
              (däbub)
             </li>
            </ul>
           </td>
           <td style="width:1%;" valign="top">
           </td>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              에스토니아어(et):
              [ahref]
              
             </li>
             <li>
              스페인어(es):
              [link]
              
              (남성)
             </li>
             <li>
              에스페란토(eo):
              <a href="/wiki/sudo" title="sudo">
               sudo
              </a>
             </li>
             <li>
              영어(en):
              [link]
              
              (direction)
             </li>
             <li>
              우르두어(ur):
              [link]
              
              (janúb) (남성)
             </li>
             <li>
              우즈베크어(uz):
              [link]
              
             </li>
             <li>
              우크라이나어(uk):
              [ahref]
              
              (pívden′) (남성)
             </li>
             <li>
              웨일스어(cy):
              [link]
              
             </li>
             <li>
              이도(io):
             </li>
             <li>
              이탈리아어(it):
              <a href="/wiki/sud" title="sud">
               sud
              </a>
              ,
              <a href="/wiki/mezzogiorno" title="mezzogiorno">
               mezzogiorno
              </a>
              ,
              [link]
              
             </li>
             <li>
              인도네시아어(id):
              <a href="/wiki/selatan" title="selatan">
               selatan
              </a>
             </li>
             <li>
              인터링구아(ia):
              [link]
              
             </li>
             <li>
              일본어(ja):
              <span lang="ja">
               [link]
               
               (
               [ahref]
               
               )
              </span>
              (minami)
             </li>
             <li>
              자와어(jv):
              [link]
              
             </li>
             <li>
              조지아어(ka):
              <a href="/wiki/%E1%83%A1%E1%83%90%E1%83%9B%E1%83%AE%E1%83%A0%E1%83%94%E1%83%97%E1%83%98" title="სამხრეთი">
               სამხრეთი
              </a>
              (samxret‘i)
             </li>
            </ul>
            <ul>
             <li>
              중국어(zh):
              [ahref]
              
              (nán(표준어), naam4(광둥어))
             </li>
            </ul>
            <ul>
             <li>
              체첸어(ce):
              [link]
              
              (q̇ilbe)
             </li>
             <li>
              체코어(cs):
              [link]
              
              (남성),
              [link]
              
              (중성, 사어)
             </li>
             <li>
              카라차이발카르어(krc):
              [link]
              
              (qıbıla)
             </li>
             <li>
              카자흐어(kk):
              [link]
              
              (oñtüstik)
             </li>
             <li>
              카탈루냐어(ca):
              [link]
              
              (남성),
              [link]
              
              (남성),
              [link]
              
              (남성)
             </li>
             <li>
              코랴크어(kpy):
              [ahref]
              
              (ewtəlañqal)
             </li>
             <li>
              쿠미크어(kum):
              [link]
              
              (qıbla)
             </li>
             <li>
              쿠르드어(ku):
              [link]
              
              ,
              [link]
              
             </li>
             <li>
              크로아티아어(hr):
              [link]
              
              (남성)
             </li>
             <li>
              크림타타르어(crh):
              [ahref]
              
              ,
              [link]
              
             </li>
             <li>
              키르기스어(ky):
              [search]
              
              (tüştük)
             </li>
             <li>
              타갈로그어(tl):
              [ahref]
              
             </li>
             <li>
              타이어(th):
              [link]
              
             </li>
             <li>
              타지크어(tg):
              [link]
              
              (canub)
             </li>
             <li>
              타타르어(tt):
              [link]
              
              , (시베리아);
              [ahref]
              
             </li>
             <li>
              텔루구어(te):
              [ahref]
              
              (dakshiNaM)
             </li>
             <li>
              터키어(tr):
              [link]
              
              ,
              [ahref]
              
              (사어)
             </li>
             <li>
              투르크멘어(tk):
              [link]
              
             </li>
             <li>
              투바어(tyv):
              <a class="new" href="/w/index.php?title=%D0%BC%D1%83%D1%80%D0%BD%D1%83%D1%83_%D1%87%D2%AF%D0%BA&amp;action=edit&amp;redlink=1" title="мурнуу чүк (없는 문서)">
               мурнуу чүк
              </a>
              (murnuu çük)
             </li>
             <li>
              페르시아어(fa):
              [link]
              
              (jonoob),
              [ahref]
              
              (nimruz)
             </li>
             <li>
              포르투갈어(pt):
              [ahref]
              
              (남성)
             </li>
             <li>
              폴란드어(pl):
              [ahref]
              
              (중성)
             </li>
             <li>
              프랑스어(fr):
              <a href="/wiki/sud" title="sud">
               sud
              </a>
              (남성),
              [ahref]
              
              (남성)
             </li>
             <li>
              핀란드어(fi):
              [ahref]
              
             </li>
             <li>
              하카스어(kjh):
              <a href="/wiki/%D3%B1%D1%81%D1%82%D1%96%D0%BD%D0%B7%D0%B0%D1%80%D1%8B%D1%85" title="ӱстінзарых">
               ӱстінзарых
              </a>
              (üstínzarıx)
             </li>
             <li>
              헝가리어(hu):
              [link]
              
             </li>
             <li>
              히브리어(he):
              [ahref]
              
              (darόm) (남성)
             </li>
            </ul>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
     </div>
     <noscript>
     </noscript>
    </div>
    <div class="printfooter">
     원본 주소 "
     [link]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      [link]
      
      :
      <ul>
       <li>
        [link]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <ul>
      <li id="pt-anonuserpage">
       로그인하지 않음
      </li>
      <li id="pt-anontalk">
       [ahref]
       
      </li>
      <li id="pt-anoncontribs">
       [link]
       
      </li>
      <li id="pt-createaccount">
       <a href="/w/index.php?title=%ED%8A%B9%EC%88%98:%EA%B3%84%EC%A0%95%EB%A7%8C%EB%93%A4%EA%B8%B0&amp;returnto=%EB%82%A8%EC%AA%BD" title="계정을 만들고 로그인하는 것이 좋습니다; 하지만, 필수는 아닙니다">
        계정 만들기
       </a>
      </li>
      <li id="pt-login">
       [link]
       
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-main">
        <span>
         [link]
         
        </span>
       </li>
       <li class="new" id="ca-talk">
        <span>
         <li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li class="collapsible selected" id="ca-view">
        <span>
         [link]
         
        </span>
       </li>
       <li class="collapsible" id="ca-edit">
        <span>
         [link]
         
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         <li>[link]</li><li>[link]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>[search]<li>[link]</li>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
     <div id="p-search" role="search">
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     [ahref]
     
    </div>
    <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
     <h3 id="p-navigation-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-mainpage-description">
        [ahref]
        
       </li>
       <li id="n-bulletinboard">
        [ahref]
        
       </li>
       <li id="n-recentchanges">
        [ahref]
        
       </li>
       <li id="n-randompage">
        [link]
        
       </li>
       <li id="n-editroom">
        [ahref]
        
       </li>
       <li id="n-createpage">
        <a href="/wiki/%EC%9C%84%ED%82%A4%EB%82%B1%EB%A7%90%EC%82%AC%EC%A0%84:%EC%83%88_%EA%B8%80_%EC%93%B0%EA%B8%B0" title="기존의 형식을 이용한 새 낱말 만들기">
         새 낱말 쓰기
        </a>
       </li>
       <li id="n-help">
        [link]
        
       </li>
       <li id="n-sitesupport">
        [link]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
     <h3 id="p-coll-print_export-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="coll-create_a_book">
        [link]
        
       </li>
       <li id="coll-download-as-rdf2latex">
        [link]
        
       </li>
       <li id="t-print">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        [ahref]
        
       </li>
       <li id="t-recentchangeslinked">
        [ahref]
        
       </li>
       <li id="t-upload">
        [link]
        
       </li>
       <li id="t-specialpages">
        <a accesskey="q" href="/wiki/%ED%8A%B9%EC%88%98:%ED%8A%B9%EC%88%98%EB%AC%B8%EC%84%9C" title="모든 특수 문서의 목록 [q]">
         특수 문서 목록
        </a>
       </li>
       <li id="t-permalink">
        <a href="/w/index.php?title=%EB%82%A8%EC%AA%BD&amp;oldid=3821267" title="문서의 이 판에 대한 고유링크">
         고유 링크
        </a>
       </li>
       <li id="t-info">
        [link]
        
       </li>
       <li id="t-cite">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
     <h3 id="p-lang-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li class="interlanguage-link interwiki-chr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-en">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-fr">
        <a class="interlanguage-link-target" href="/wiki/%EB%82%A8%EC%AA%BD" hreflang="fr" lang="fr" title="남쪽 – 프랑스어">
         Français
        </a>
       </li>
       <li class="interlanguage-link interwiki-hu">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-ja">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-lt">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mg">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-pl">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-ro">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-ru">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-sk">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-uk">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-zh">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     이 문서는 2018년 6월 18일 (월) 14:01에 마지막으로 편집되었습니다.
    </li>
    <li id="footer-info-copyright">
     내용은
     [link]
     
     에 따라 사용할 수 있으며
추가적인 조건이 적용될 수 있습니다.
자세한 내용은
     [link]
     
     을 참조하십시오.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-privacy">
     [ahref]
     
    </li>
    <li id="footer-places-about">
     [ahref]
     
    </li>
    <li id="footer-places-disclaimer">
     [link]
     
    </li>
    <li id="footer-places-developers">
     [ahref]
     
    </li>
    <li id="footer-places-cookiestatement">
     [ahref]
     
    </li>
    <li id="footer-places-mobileview">
     [ahref]
     
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-copyrightico">
     <a href="/">
     </a>
    </li>
    <li id="footer-poweredbyico">
     [ahref]
     
    </li>
   </ul>
   <div style="clear: both;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0454
  </b>
 </body>
</html>
