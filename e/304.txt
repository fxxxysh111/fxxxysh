<!DOCTYPE html>
<html id="responsive-news" lang="en">
 <head prefix="og: http://ogp.me/ns#">
  <meta content="width=device-width, initial-scale=1, user-scalable=1" name="viewport"/>
  <meta charset="utf-8"/>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="us" name="x-country"/>
  <meta content="US" name="x-audience"/>
  <meta content="US" name="CPS_AUDIENCE"/>
  <meta content="132205098" name="CPS_CHANGEQUEUEID"/>
  <meta content="The Boss - BBC News" property="og:title">
   <meta content="website" property="og:type">
    <meta content="The Boss" property="og:description">
     <meta content="BBC News" property="og:site_name">
      <meta content="en_GB" property="og:locale">
       <meta content="https://www.facebook.com/bbcnews" property="article:author">
        <meta content="Business" property="article:section">
         <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
         <meta content="https://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1" property="og:image"/>
         <meta content="BBC News. BBC News" property="og:image:alt"/>
         <meta content="1143803202301544,317278538359186,1392506827668140,742734325867560,185246968166196,156060587793370,137920769558355,193435954068976,21263239760,156400551056385,929399697073756,154344434967,228735667216,80758950658,260212261199,294662213128,1086451581439054,283348121682053,295830058648,239931389545417,304314573046,310719525611571,647687225371774,1159932557403143,286567251709437,1731770190373618,125309456546,163571453661989,285361880228,512423982152360,238003846549831,176663550714,260967092113,118450564909230,100978706649892,15286229625,122103087870579,120655094632228,102814153147070,124715648647,153132638110668,150467675018739" property="fb:pages"/>
         <meta content="summary_large_image" name="twitter:card"/>
         <meta content="@BBCWorld" name="twitter:site"/>
         <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:title"/>
         <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:description"/>
         <meta content="@BBCWorld" name="twitter:creator"/>
         <meta content="https://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1" name="twitter:image:src"/>
         <meta content="BBC News" name="twitter:image:alt">
          <meta content="www.bbc.com" name="twitter:domain"/>
          <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="apple-mobile-web-app-title"/>
          <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="application-name"/>
          <meta content="BBC News" name="msapplication-TileImage"/>
          <meta content="#bb1919" name="msapplication-TileColor"/>
          <meta content="yes" name="mobile-web-app-capable"/>
          <meta content="on" http-equiv="cleartype"/>
         </meta>
        </meta>
       </meta>
      </meta>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="device--feature" id="asset-type-fix">
  <div class="direction">
   <noscript>
    <p style="position: absolute; top: -999em">
     <li>[link]</li><li>[link]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
    </p>
   </noscript>
   <div class="bbccom_display_none" id="bbccom_interstitial_ad">
   </div>
   <div class="bbccom_display_none" id="bbccom_interstitial">
   </div>
   <div class="bbccom_display_none" id="bbccom_wallpaper_ad">
   </div>
   <div class="bbccom_display_none" id="bbccom_wallpaper">
   </div>
   <div id="cookiePrompt">
   </div>
   <header aria-label="BBC" id="orb-banner" role="banner">
    <div class="orb-nav-pri orb-nav-pri-white orb-nav-empty" dir="ltr" id="orb-header">
     <div class="orb-nav-pri-container b-r b-g-p">
      <div class="orb-nav-section orb-nav-blocks">
       [ahref]
       
      </div>
      <section>
       <div class="orb-skip-links">
        <h2>
         [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
        </h2>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [link]
          
         </li>
        </ul>
       </div>
      </section>
      <div class="orb-nav-section orb-nav-id orb-nav-focus orb-nav-id-default" id="mybbc-wrapper">
       <div class="orb-nav-section orb-nav-focus" id="idcta-statusbar">
        [ahref]
        
       </div>
       [link]
       
      </div>
      <nav aria-label="BBC" class="orb-nav" role="navigation">
       <div class="orb-nav-section orb-nav-links orb-nav-focus" id="orb-nav-links">
        <ul>
         <li class="orb-nav-home">
          [link]
          
         </li>
         <li class="orb-nav-news">
          [ahref]
          
         </li>
         <li class="orb-nav-sport">
          [link]
          
         </li>
         <li class="orb-nav-weather">
          [link]
          
         </li>
         <li class="orb-nav-iplayer">
          <a href="/iplayer">
           iPlayer
          </a>
         </li>
         <li class="orb-nav-sounds">
          [link]
          
         </li>
         <li class="orb-nav-cbbc">
          [ahref]
          
         </li>
         <li class="orb-nav-cbeebies">
          [ahref]
          
         </li>
         <li class="orb-nav-food">
          [link]
          
         </li>
         <li class="orb-nav-bitesize">
          [ahref]
          
         </li>
         <li class="orb-nav-earth">
          [link]
          
         </li>
         <li class="orb-nav-arts">
          [ahref]
          
         </li>
         <li class="orb-nav-digital">
          [link]
          
         </li>
         <li class="orb-nav-taster">
          [link]
          
         </li>
         <li class="orb-nav-local">
          [ahref]
          
         </li>
         <li class="orb-nav-tomorrowsworld">
          [ahref]
          
         </li>
         <li class="orb-nav-tv">
          [link]
          
         </li>
         <li class="orb-nav-radio">
          [link]
          
         </li>
         <li aria-controls="orb-panel-more" id="orb-nav-more" style="width: 88px">
          [ahref]
          
         </li>
        </ul>
       </div>
      </nav>
      <div class="orb-nav-section orb-nav-search">
       <a class="orb-search__button" href="/search?scope=all" title="Search the BBC">
        Search
       </a>
       <form accept-charset="utf-8" action="/search" class="b-f" id="orb-search-form" method="get" role="search">
        <div>
         <label for="orb-search-q">
          Search the BBC
         </label>
         <button class="orb-search__button" id="orb-search-button">
          Search the BBC
         </button>
        </div>
       </form>
      </div>
     </div>
     <div id="orb-panels">
     </div>
    </div>
   </header>
   <div id="orb-modules">
    <div id="site-container">
     <div aria-label="BBC News" class="site-brand site-brand--height" role="banner">
      <div class="site-brand-inner site-brand-inner--height">
       <div class="navigation navigation--primary">
        [link]
        
        <h2 class="navigation__heading off-screen">
         <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
        </h2>
        <div class="nav-buttons">
         [ahref]
         
        </div>
       </div>
      </div>
      <div class="navigation navigation--wide">
       <ul aria-label="BBC News" class="navigation-wide-list" data-panel-id="js-navigation-panel-primary" role="navigation">
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         <a class="navigation-wide-list__link" data-panel-id="js-navigation-panel-US___Canada" href="/news/world/us_and_canada">
          <span>
           US &amp; Canada<li>[ahref]</li>[link][link][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][search]<li>[ahref]</li><li>[link]</li>[link]<li>[search]</li>[ahref]
          </span>
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         <a class="navigation-wide-list__link" href="/news/technology">
          <span>
           Tech[link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[link]<li>[link]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
          </span>
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
        <li>
         [link]
         
        </li>
       </ul>
      </div>
     </div>
     <div aria-hidden="true" class="bbccom_slot " id="bbccom_leaderboard_1_2_3_4">
      <div class="bbccom_advert">
      </div>
     </div>
     <div aria-live="polite" data-polling-url="https://polling.bbc.co.uk/news/latest_breaking_news?audience=US" id="breaking-news-container">
     </div>
     <div class="configurable index " data-story-id="business-22449886" id="page">
      <div role="main">
       <div class="container-width-only">
        <h1 class="index-title 1 " data-index-title-meta='{"id":"comp-index-title","type":"index-title","handler":"indexTitle","deviceGroups":null,"opts":{"alwaysVisible":true,"onFrontPage":false},"template":"index-title"}' id="comp-index-title">
         [area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]
        </h1>
        <div aria-hidden="true" class="bbccom_slot " id="bbccom_sponsor_section_1_2_3_4">
         <div class="bbccom_advert">
         </div>
        </div>
       </div>
       <div class="container">
        <div class="container--primary-and-secondary-columns column-clearfix">
         <div class="column--primary">
          <div class="distinct-component-group container-hawk" id="comp-candy-asset-munger">
           <h2 class="group-title off-screen " data-entityid="#top_stories">
            <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
           </h2>
           <div class="hawk faux-block-link">
            <div class="hawk-item" data-entityid="lead_feature#1">
             <div class="hawk__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Rupert Hunt" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/06A7/production/_104630710_hunt1.jpg" data-width="976">
               </div>
              </div>
             </div>
             [ahref]
             
             [ahref]
             
            </div>
           </div>
          </div>
          <div aria-hidden="true" class="bbccom_slot mpu-ad" id="bbccom_mpu_1_2_3">
           <div class="bbccom_advert">
           </div>
          </div>
          <div class="distinct-component-group container-sparrow-summary" id="comp-candy-asset-munger-2">
           <div class="sparrow-container sparrow-columns">
            <div class="sparrow sparrow__2 sparrow__light">
             <div class="sparrow-item faux-block-link" data-entityid="container_top_stories#1">
              <div class="sparrow-item__image">
               <div class="responsive-image responsive-image--16by9">
                <div class="js-delayed-image-load" data-alt="Anne Wojcicki (left) and her sisters Janet Wojcicki, and Susan Wojcicki" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/460C/production/_104523971_gettyimages-1057574084-1.jpg" data-width="976">
                </div>
               </div>
              </div>
              <div class="sparrow-item__body">
               <a class="title-link" href="/news/business-46361764">
                <h3 class="title-link__title">
                 [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
                </h3>
               </a>
               <p class="sparrow-item__summary">
                Anne Wojcicki and her siblings Susan and Janet have all got the top of their professions, but is their success down to nature or nurture?
               </p>
               <div class="sparrow-item__info">
                <ul class="mini-info-list">
                 <li class="mini-info-list__item">
                  <div class="date date--v2" data-datetime="3 December 2018" data-seconds="1543795288">
                   3 December 2018
                  </div>
                 </li>
                 <li class="mini-info-list__item mini-info-list__item--section">
                  <span class="mini-info-list__section-desc off-screen">
                   From the section
                  </span>
                  <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                   Business
                  </a>
                 </li>
                </ul>
               </div>
              </div>
              [link]
              
             </div>
             <div class="sparrow-item faux-block-link" data-entityid="container_top_stories#2">
              <div class="sparrow-item__image">
               <div class="responsive-image responsive-image--16by9">
                <div class="js-delayed-image-load" data-alt="The Rolling Stones performing in Cardiff, Wales, this year" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/A144/production/_104448214_gettyimages-976136360.jpg" data-width="976">
                </div>
               </div>
              </div>
              <div class="sparrow-item__body">
               [ahref]
               
               <p class="sparrow-item__summary">
               </p>
               <div class="sparrow-item__info">
                <ul class="mini-info-list">
                 <li class="mini-info-list__item">
                  <div class="date date--v2" data-datetime="26 November 2018" data-seconds="1543192689">
                   26 November 2018
                  </div>
                 </li>
                 <li class="mini-info-list__item mini-info-list__item--section">
                  <span class="mini-info-list__section-desc off-screen">
                   From the section <li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                  </span>
                  [ahref]
                  
                 </li>
                </ul>
               </div>
              </div>
              <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-46293623" tabindex="-1">
               Full article 'The Rolling Stones inspired me to go into business'
              </a>
             </div>
            </div>
           </div>
          </div>
          <div class="distinct-component-group " id="comp-candy-asset-munger-3">
           <div class="sparrow-container sparrow-columns">
            <div class="sparrow sparrow__3 sparrow__light">
             <div class="sparrow-item faux-block-link" data-entityid="guides_1#1">
              <div class="sparrow-item__image">
               <div class="responsive-image responsive-image--16by9">
                <div class="js-delayed-image-load" data-alt="Kees Koolen taking part in the Dakar Rally" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/13B40/production/_104340708_quad1.jpg" data-width="976">
                </div>
               </div>
              </div>
              <div class="sparrow-item__body">
               [link]
               
               <p class="sparrow-item__summary">
               </p>
               <div class="sparrow-item__info">
                <ul class="mini-info-list">
                 <li class="mini-info-list__item">
                  <div class="date date--v2" data-datetime="19 November 2018" data-seconds="1542585663">
                   19 November 2018
                  </div>
                 </li>
                 <li class="mini-info-list__item mini-info-list__item--section">
                  <span class="mini-info-list__section-desc off-screen">
                   From the section
                  </span>
                  [link]
                  
                 </li>
                </ul>
               </div>
              </div>
              <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-46197270" tabindex="-1">
               Full article 'I broke 22 bones and lost a year's memory'
              </a>
             </div>
             <div class="sparrow-item faux-block-link" data-entityid="guides_1#2">
              <div class="sparrow-item__image">
               <div class="responsive-image responsive-image--16by9">
                <div class="js-delayed-image-load" data-alt="James Hind, founder and chief executive Carwow" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/15E72/production/_104241798_dsc03006copy.jpg" data-width="976">
                </div>
               </div>
              </div>
              <div class="sparrow-item__body">
               [link]
               
               <p class="sparrow-item__summary">
                [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link][search]<li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[ahref]</li>[ahref]<li>[ahref]</li>
               </p>
               <div class="sparrow-item__info">
                <ul class="mini-info-list">
                 <li class="mini-info-list__item">
                  <div class="date date--v2" data-datetime="12 November 2018" data-seconds="1541981476">
                   12 November 2018
                  </div>
                 </li>
                 <li class="mini-info-list__item mini-info-list__item--section">
                  <span class="mini-info-list__section-desc off-screen">
                   From the section
                  </span>
                  [link]
                  
                 </li>
                </ul>
               </div>
              </div>
              [link]
              
             </div>
             <div class="sparrow-item faux-block-link" data-entityid="guides_1#3">
              <div class="sparrow-item__image">
               <div class="responsive-image responsive-image--16by9">
                <div class="js-delayed-image-load" data-alt="Lee Thompson and Radha Vyas" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/F3AF/production/_104138326_promo1.jpg" data-width="976">
                </div>
               </div>
              </div>
              <div class="sparrow-item__body">
               [link]
               
               <p class="sparrow-item__summary">
                <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
               </p>
               <div class="sparrow-item__info">
                <ul class="mini-info-list">
                 <li class="mini-info-list__item">
                  <div class="date date--v2" data-datetime="5 November 2018" data-seconds="1541377531">
                   5 November 2018
                  </div>
                 </li>
                 <li class="mini-info-list__item mini-info-list__item--section">
                  <span class="mini-info-list__section-desc off-screen">
                   From the section
                  </span>
                  [ahref]
                  
                 </li>
                </ul>
               </div>
              </div>
              <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-46059606" tabindex="-1">
               Full article The first date that created a £10m company
              </a>
             </div>
            </div>
           </div>
          </div>
          <div class="distinct-component-group container-condor compact-tablet-only" id="comp-candy-asset-munger-4">
           <h2 class="group-title " data-entityid="#watch/listen">
            <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
           </h2>
           <div class="condor sparrow-container">
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#1">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Jason Kingsley makes video games for a living. But he strives to live his life according to the values of a medieval knight. Video journalist Greg Brosnan." data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2EE9/production/_95990021_p052g87f.jpg" data-width="1024">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[ahref]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][search]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<li>[ahref]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                  </span>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="15 May 2017" data-seconds="1494802874">
                 15 May 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#2">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Lavanya Nalli" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/17229/production/_90916749_lavanya-nalli.jpg" data-width="976">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[link]<li>[link]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[ahref][search][search][search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search][search][ahref]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  1:53
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="29 August 2016" data-seconds="1472425216">
                 29 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/av/business-37184456/the-88-year-old-sari-company" tabindex="-1">
              Full article The 88-year-old sari company
             </a>
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#3">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Oyo Rooms founder Ritesh Agarwal" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/50E6/production/_85301702_pic5.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[ahref]</li>[link][search][search]<li>[search]</li><li>[ahref]</li>[search][ahref][search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><li>[search]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:28
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 September 2015" data-seconds="1441580183">
                 6 September 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#4">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Lily Cole" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/11689/production/_90450317_lily.jpg" data-width="976">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[link]</li><li>[search]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][link]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  1:02<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li><li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="24 July 2016" data-seconds="1469334393">
                 24 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#5">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Lloyd Dorfman" data-height="1080" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/C1DE/production/_90303694_ceo_travelex1.jpg" data-width="1920">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link][link]<li>[link]</li><li>[link]</li>[ahref][search][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<li>[ahref]</li><li>[link]</li>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  1:04
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="11 July 2016" data-seconds="1468222415">
                 11 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#6">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Justine Roberts" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/B907/production/_90376374_mumsnet1.jpg" data-width="976">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   <span class="off-screen">
                    Video<li>[ahref]</li>[ahref]<li>[link]</li>[link]<li>[link]</li>[ahref]<li>[link]</li>[ahref]<li>[link]</li><li>[link]</li>[search][ahref][search][link][search]<li>[search]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
                   </span>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  0:49
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 July 2016" data-seconds="1468732242">
                 17 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#7">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Isha Johansen" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/15AE2/production/_87320888_ceo_isha2.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><li>[search]</li><li>[link]</li><li>[search]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[link][link][ahref]<li>[link]</li>[search]<li>[ahref]</li><li>[ahref]</li>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  0:58<li>[link]</li>[search]<li>[link]</li><li>[ahref]</li><li>[ahref]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link]
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              <a class="title-link" href="/news/av/business-35152097/females-in-fifa-now-is-our-time">
               <span class="off-screen">
                Video 0:58
               </span>
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="1 February 2016" data-seconds="1454286296">
                 1 February 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search][link][ahref][search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#8">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="William Saito" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/16379/production/_85410019_interview.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[search]</li>[ahref]<li>[link]</li>[search][search][search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link]<li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li>[link]<li>[ahref]</li>[link]<li>[link]</li>[link]<li>[search]</li>[ahref]<li>[ahref]</li>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:38
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="13 September 2015" data-seconds="1442183204">
                 13 September 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#9">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Nadiem Makarim" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10144/production/_85006856_de27.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:03
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="23 August 2015" data-seconds="1440357684">
                 23 August 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/av/business-33966246/indonesia-s-motorbike-revolutionary" tabindex="-1">
              Full article Indonesia's motorbike revolutionary
             </a>
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#10">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Thuy Truong working outside with colleagues" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/BA53/production/_84799674_working-with-colleagues-in-cafe.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[search]</li>[search]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li>[ahref]<li>[search]</li>[link][search][ahref]<li>[link]</li>[ahref]<li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:40
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 August 2015" data-seconds="1439766980">
                 17 August 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[ahref][ahref][search][search]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#11">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Saral Kochar and Josie Tam" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/3A48/production/_84602941_img_0053.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[ahref][link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref][search]<li>[search]</li><li>[link]</li>[search][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[search]</li><li>[search]</li>[search][ahref]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:38
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 August 2015" data-seconds="1439146827">
                 9 August 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[search][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#12">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Aldi Haryopratomo" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/44B1/production/_84258571_aldi1.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:11
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="19 July 2015" data-seconds="1437342820">
                 19 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><li>[link]</li><li>[link]</li>[link][link][search]<li>[ahref]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][ahref]<li>[ahref]</li>[ahref][search]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#13">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Khoo Swee Chiow" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/136B3/production/_84193597_img0056.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[search]</li>[ahref][link][link]<li>[link]</li>[ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref]<li>[ahref]</li>[search][ahref]<li>[ahref]</li>[ahref]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[ahref]</li>[link]
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:20<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[ahref]</li><li>[search]</li><li>[search]</li>[link]
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 July 2015" data-seconds="1436726670">
                 12 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#14">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="janine allis with her staff at Boost juice bar" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/113FE/production/_84045607_janinepic.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link]<li>[ahref]</li>[search]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[ahref]</li>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:13
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 July 2015" data-seconds="1436122113">
                 5 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#15">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Guo Pei dress" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/138A8/production/_83904008_gettyimages-473031394.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[link]</li><li>[ahref]</li>[ahref]<li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search][search][ahref][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[ahref]</li>[ahref]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:29
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 June 2015" data-seconds="1435519931">
                 28 June 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[search]</li>[ahref]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#16">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Simon Lee" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/D004/production/_83725235_man1.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search]<li>[ahref]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[search]</li><li>[ahref]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li>[search][link]<li>[ahref]</li>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:19<li>[search]</li>[link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li>[link]
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="21 June 2015" data-seconds="1434914422">
                 21 June 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#17">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Annie Lennox" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/media/images/82511000/jpg/_82511717_hi000432031.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][ahref][link]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:41
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="27 April 2015" data-seconds="1430089452">
                 27 April 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[link]</li><li>[search]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
           </div>
          </div>
          <div class="distinct-component-group " id="comp-candy-asset-munger-5">
           <div class="robin sparrow-container">
            <div class="robin-item faux-block-link" data-entityid="guides_2#1">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Charlie MacGregor at the beach in Lesbos" data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/103A6/production/_103807466_charlieatbeachinlesboswheretheboatscamein-copyrightmotg.jpg" data-width="1024">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="15 October 2018" data-seconds="1539558282">
                 15 October 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#2">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Peter Reinhardt" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/AAFC/production/_104027734_peterreinhardtsegmentceo.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="29 October 2018" data-seconds="1540772022">
                 29 October 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#3">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="A Five AI car being tested" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/7198/production/_103708092_car-promo1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-45706509">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="8 October 2018" data-seconds="1538953551">
                 8 October 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#4">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ben Francis" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/18682/production/_103107999_sam1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="1 October 2018" data-seconds="1538349885">
                 1 October 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[ahref]<li>[ahref]</li><li>[link]</li>[link]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#5">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Kiran Mazumdar-Shaw" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/CC37/production/_103497225_boss1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="24 September 2018" data-seconds="1537745089">
                 24 September 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#6">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Mark Cuban" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/B22D/production/_103231654_gettyimages-474724673.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="3 September 2018" data-seconds="1535933063">
                 3 September 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-45330897" tabindex="-1">
              Full article The basketball boss who made billions
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#7">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Sharndre Kushor and Jamie Beaton" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1413/production/_103393150_couple1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 September 2018" data-seconds="1537139353">
                 17 September 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-45485254" tabindex="-1">
              Full article 'People thought we were interns but we were in charge'
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#8">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ethan Brown" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/8887/production/_103315943_beyondmeat_ethanbrown_beyondburger.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="10 September 2018" data-seconds="1536534854">
                 10 September 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><li>[link]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#9">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Bill McDermott" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10BA2/production/_103041586_gettyimages-632553438.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="20 August 2018" data-seconds="1534720669">
                 20 August 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#10">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jen Atkinson" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/B30D/production/_102873854_jen-newusethese.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="13 August 2018" data-seconds="1534116084">
                 13 August 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#11">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Rune Sovndah" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1734C/production/_102725059_img_2507full.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 August 2018" data-seconds="1533510229">
                 6 August 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#12">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Brian Harrison and Debbie Williamson, Swoon co-founders" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/14E35/production/_102675558_briananddebbie.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="30 July 2018" data-seconds="1532905780">
                 30 July 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#13">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Mikaila Ulmer" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/83FB/production/_102578733_4b.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-44860428">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="23 July 2018" data-seconds="1532301358">
                 23 July 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-44860428" tabindex="-1">
              Full article Making lemonade
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#14">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Drew Houston and Arash Ferdowsi" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/17906/production/_102481569_co-founders-drew-houston-and-arash-ferdowsi.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="16 July 2018" data-seconds="1531696068">
                 16 July 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#15">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Romana Abdin" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10F1C/production/_102440496_roman-2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-44539546">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 July 2018" data-seconds="1531091178">
                 9 July 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#16">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Justin Woolverton" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/A4DE/production/_102260224_justinwoolvertonimage2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="2 July 2018" data-seconds="1530535868">
                 2 July 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#17">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Stewart Butterfield" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2020/production/_102142280_stewart1111.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="25 June 2018" data-seconds="1529881581">
                 25 June 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li><li>[ahref]</li>[search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#18">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Andrew Hunter" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/E8F0/production/_102023695_hunter2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="18 June 2018" data-seconds="1529278516">
                 18 June 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li><li>[link]</li><li>[ahref]</li><li>[link]</li><li>[link]</li>[search]<li>[link]</li>[link]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#19">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Kendra Scott" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/EA39/production/_101916995_1a.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="11 June 2018" data-seconds="1528671651">
                 11 June 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-44382928" tabindex="-1">
              Full article Glittering career
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#20">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Simon Dolan" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2D86/production/_101745611_use5.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="4 June 2018" data-seconds="1528067092">
                 4 June 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#21">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Flavio Augusto" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/6B4B/production/_101576472_flavio-fer_2216.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-44125977">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="21 May 2018" data-seconds="1526858194">
                 21 May 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#22">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Htet Myet Oo and Isabella Sway-Tin" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/F165/production/_101279716_htetandizzy-bysuzannebearneimg_3751.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="14 May 2018" data-seconds="1526253047">
                 14 May 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li>[ahref][search]<li>[ahref]</li>[link][search]<li>[link]</li>[link][ahref]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#23">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Nicole Eagan" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/06C3/production/_101013710_nicole1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-43879931">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="30 April 2018" data-seconds="1525042988">
                 30 April 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-43879931" tabindex="-1">
              Full article Hunting hackers
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#24">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jo Horgan" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/5AFD/production/_100939232_02_160905_mecca_johorgan_0116_perfumeria.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="23 April 2018" data-seconds="1524438545">
                 23 April 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#25">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="James Park, Fitbit founder" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/5BB6/production/_100687432_jamespark1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="16 April 2018" data-seconds="1523834449">
                 16 April 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#26">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Innocent smoothies" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/8B0C/production/_100569553_juice1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 April 2018" data-seconds="1523228421">
                 9 April 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link]<li>[search]</li><li>[ahref]</li><li>[ahref]</li>[search]<li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#27">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Henrietta Morrison" data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/F7A1/production/_100539336_mediaitem100485179.jpg" data-width="1024">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-43459149">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="26 March 2018" data-seconds="1522019885">
                 26 March 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#28">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ian McInstosh , Red Driving School boss" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/16366/production/_100428909__dsc3869.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="19 March 2018" data-seconds="1521418536">
                 19 March 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-43386597" tabindex="-1">
              Full article Three-point turn
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#29">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Sandra Bullock in Gravity" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/F923/production/_100197736_gravity_still_3.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 March 2018" data-seconds="1520208218">
                 5 March 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[link]</li>[link]<li>[search]</li><li>[link]</li>[ahref]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-43211126" tabindex="-1">
              Full article Making make believe
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#30">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Maria Hatzistefanis" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/115B2/production/_100009017_rodial_20160701_shot_6_72635.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="19 February 2018" data-seconds="1518999594">
                 19 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#31">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Simon Carter" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/DF36/production/_100124175_simoncartercouch.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="26 February 2018" data-seconds="1519605229">
                 26 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#32">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Greg Cox" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/D196/production/_100345635_cox1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 March 2018" data-seconds="1520813424">
                 12 March 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [ahref]<li>[ahref]</li>[ahref]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#33">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Florin and Mariuca Talpes" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/15C88/production/_99842298_couple1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-42889173">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 February 2018" data-seconds="1517792881">
                 5 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#34">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Mandy Watkins and Rupert Youngman" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10B9A/production/_99760586_couple1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="29 January 2018" data-seconds="1517184487">
                 29 January 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li>[link][ahref]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li><li>[search]</li>[ahref]<li>[link]</li>[link][link][search][ahref]<li>[link]</li>[ahref][ahref]<li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#35">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Adam Ringer" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10190/production/_99663956_adamringer2.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="22 January 2018" data-seconds="1516579840">
                 22 January 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#36">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Stutterheim jackets" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10D93/production/_99911096_stutterheim_nyc_store_interior4.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 February 2018" data-seconds="1518394506">
                 12 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#37">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Franco Manca pizza" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/483C/production/_99129481_francomancaguildford-1of1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="8 January 2018" data-seconds="1515370683">
                 8 January 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search]<li>[search]</li>[search]<li>[search]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[ahref]</li>[search]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-42282115" tabindex="-1">
              Full article Lots of dough
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#38">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Valfre" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/6FDC/production/_99163682_ilseb-1of2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="18 December 2017" data-seconds="1513556074">
                 18 December 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#39">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Kikki.K" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/182F1/production/_98975099_kikki.k_profileimagery_kristinakarlsson_kristina_profile_02.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="11 December 2017" data-seconds="1512951559">
                 11 December 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#40">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Tracy Claros" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/83D9/production/_99535733_photo1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="15 January 2018" data-seconds="1515974448">
                 15 January 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[link]</li><li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li>
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#41">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Tej Lalvani" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1F4A/production/_99001080_tejwithperfectfilinstore.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="4 December 2017" data-seconds="1512347429">
                 4 December 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><li>[ahref]</li><li>[search]</li>[ahref]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#42">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Zef Eisenberg on motorbike" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/185B5/production/_98656799_3e971ca2-c8d3-4559-8648-c5a32b52eb78.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="27 November 2017" data-seconds="1511741892">
                 27 November 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-41890905" tabindex="-1">
              Full article Need for speed
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#43">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="John Collison" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/C29F/production/_98732894_johncollisonlandscape.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="20 November 2017" data-seconds="1511136595">
                 20 November 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#44">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Joe Mimran" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2A71/production/_98656801_cbcmimran.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="13 November 2017" data-seconds="1510531629">
                 13 November 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-41909213" tabindex="-1">
              Full article Passion for fashion
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#45">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Isabelle Löwengrip" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/6D19/production/_98492972_lcc_03_037_lowres.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 November 2017" data-seconds="1509927506">
                 6 November 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#46">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Portrait of Rachel Lapierre in Le Book Humanitaire’s office. Behind her, a fridge and food that she keeps for people in need." data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/17271/production/_98533849_dsc_0208.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="30 October 2017" data-seconds="1509328632">
                 30 October 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [ahref][search]<li>[search]</li><li>[ahref]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#47">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Dolly Parton at Glastonbury" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2194/production/_98369580_dollyinglastonburycriangavan_gettyimages.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="23 October 2017" data-seconds="1508713356">
                 23 October 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-41665701" tabindex="-1">
              Full article Nine-to-five
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#48">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="RationalFX" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/749E/production/_98045892_pareshdavdra.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="16 October 2017" data-seconds="1508111380">
                 16 October 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][search][search][link]<li>[link]</li><li>[ahref]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#49">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Munaf Kapadia and his mum Nafisa Kapadia" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/122E9/production/_98137447_indian-boss.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-41467962">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 October 2017" data-seconds="1507556731">
                 9 October 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-41467962" tabindex="-1">
              Full article Mamma spice
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#50">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Laura Kimpton and Michael Garlington's EGO project burns" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/E678/production/_97600095_20d78b10-3634-46ef-bdd7-f5c4fb3b3cd3.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="4 September 2017" data-seconds="1504480026">
                 4 September 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link][ahref]<li>[ahref]</li><li>[ahref]</li><li>[search]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#51">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Greg Steltenpohl, co-founder and CEO of Califia Farms" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/731F/production/_98017492_00b687d5-3330-4fc9-a0f3-1779cd3e70bc.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="2 October 2017" data-seconds="1506901262">
                 2 October 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#52">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Levi stock" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10890/production/_97682776_levi'sstock-82.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="25 September 2017" data-seconds="1506294155">
                 25 September 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [ahref][ahref]<li>[link]</li>[search]<li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#53">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Daniel Hegarty" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1868D/production/_97418999_mediaitem97418998.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="18 September 2017" data-seconds="1505690312">
                 18 September 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#54">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Nathan Blecharczyk, Airbnb co-founder" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/75D9/production/_97496103_img_5267.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 August 2017" data-seconds="1503875423">
                 28 August 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][link]<li>[search]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#55">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Cleusa Maria, 51" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/3C3D/production/_97212451_cleusa.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="21 August 2017" data-seconds="1503270684">
                 21 August 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-40796811" tabindex="-1">
              Full article Piece of cake
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#56">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Giles Fuchs" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/F6B6/production/_97285136_giles1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="14 August 2017" data-seconds="1502665578">
                 14 August 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#57">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Elina Berglund Scherwitzl, co-founder of Natural Cycles" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/16D82/production/_97207539_img_9532.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="7 August 2017" data-seconds="1502062140">
                 7 August 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#58">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Shelly Fireman" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/14485/production/_96977038_harris_150524-9383.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="31 July 2017" data-seconds="1501456825">
                 31 July 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><li>[ahref]</li><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search][ahref][search]<li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][search][ahref][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-40019834" tabindex="-1">
              Full article Hungry for success
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#59">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Susanne Langmuir" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/20D9/production/_96990480_susannelangmuir.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="24 July 2017" data-seconds="1500852525">
                 24 July 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/world-us-canada-39970721" tabindex="-1">
              Full article Lip Queen
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#60">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="David Harrison" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/39D2/production/_96920841_davidharrison005.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 July 2017" data-seconds="1500246932">
                 17 July 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><li>[link]</li>[search]<li>[search]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#61">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Carl Rodrigues" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/D20B/production/_96817735_carl4.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="14 July 2017" data-seconds="1500064087">
                 14 July 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[link]</li>[search][ahref]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#62">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Choe Peng Sum, Frasers Hospitality" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/165CA/production/_96749519_mr.choe.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-40453444">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="3 July 2017" data-seconds="1499037264">
                 3 July 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#63">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="David McCourt" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/134D1/production/_96575097_davidc.mccourtfounderandceoofgranahanmccourtcapitalhasbeendescribedashavingimpeccablecredentialsasatelecomrevolutionarybytheeconomist.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-40353198">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="26 June 2017" data-seconds="1498432112">
                 26 June 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#64">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ayesha Vardag" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/4236/production/_96505961_creditozkoca-1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="19 June 2017" data-seconds="1497827580">
                 19 June 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><li>[search]</li><li>[ahref]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[link]</li>[link]<li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#65">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Anthony Fletcher" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/489D/production/_96398581_graze_anthony_fletcher66.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 June 2017" data-seconds="1497224238">
                 12 June 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#66">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Adrian Fisher" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/17097/production/_96195349_adrian1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 June 2017" data-seconds="1496617276">
                 5 June 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [ahref][ahref][ahref]<li>[ahref]</li>[search]<li>[search]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#67">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Pizzas at Pizza 4Ps" data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/93E5/production/_96116873_p053d0wb.jpg" data-width="1024">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-39961772">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="22 May 2017" data-seconds="1495408246">
                 22 May 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#68">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jason Kingsley" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/16C9E/production/_96024339_knightarmourpic2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="15 May 2017" data-seconds="1494802955">
                 15 May 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#69">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Karen Lynch" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/9EF0/production/_95488604_karenwithbottles2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-39513159">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="10 April 2017" data-seconds="1491779503">
                 10 April 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#70">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Kenny Rogers singing at Glastonbury in 2013" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/4363/production/_95915271_hi020232252.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-39784924">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="8 May 2017" data-seconds="1494199402">
                 8 May 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#71">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Mr Happy" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/E4CB/production/_95717585_happy.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-39653431">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="24 April 2017" data-seconds="1492988615">
                 24 April 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-39653431" tabindex="-1">
              Full article 'You're hired Happy'
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#72">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Aaron Simpson" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2630/production/_95767790_aaronsimpson1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="1 May 2017" data-seconds="1493593293">
                 1 May 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#73">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Saskia Nelson" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/854B/production/_95432143_saskia3.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="3 April 2017" data-seconds="1491174453">
                 3 April 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-39320580" tabindex="-1">
              Full article Swipe right
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#74">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Khalil Rafati" data-height="371" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1561F/production/_95338578_khalil-rafati.jpg" data-width="660">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="27 March 2017" data-seconds="1490569593">
                 27 March 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#75">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Rowan Gormley" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1E99/production/_95033870_rowangormleyinstore.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="13 March 2017" data-seconds="1489363940">
                 13 March 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#76">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Instant Pot CEO Robert Wang" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/C488/production/_94821305_rw-3.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 March 2017" data-seconds="1488758646">
                 6 March 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[link]<li>[link]</li>[link]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#77">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Carolyn Creswell" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/0211/production/_93292500_carolyn20140017.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 January 2017" data-seconds="1483921572">
                 9 January 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#78">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="baby touching a Piccolo pouch" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1594/production/_94242550_alejandrotamagno-2016-piccolonottinghilljune0267.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-38894818">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="20 February 2017" data-seconds="1487549528">
                 20 February 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><li>[ahref]</li>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[link][ahref][search]<li>[search]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#79">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Francisco Fernandez" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/6411/production/_93871652_franciscofernandez2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 February 2017" data-seconds="1486341698">
                 6 February 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#80">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="John Elliott" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/16001/production/_94831109_2016-11-2216.15.46.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="27 February 2017" data-seconds="1488154665">
                 27 February 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-39051964" tabindex="-1">
              Full article The boss giving his firm away
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#81">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Bill Clinton" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/5742/production/_93683322_gettyimages-508401832.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="23 January 2017" data-seconds="1485130286">
                 23 January 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[ahref]<li>[search]</li>[search][ahref]<li>[link]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#82">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Serge Godin" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/6850/production/_93540762_serge_godin_0040_25pct.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-38594679">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="16 January 2017" data-seconds="1484527578">
                 16 January 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-38594679" tabindex="-1">
              Full article 'We lost everything'
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#83">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Cassandra" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/11C5D/production/_89779727_89779726.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 January 2017" data-seconds="1483574583">
                 5 January 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#84">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ryan Longmuir" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/BFA2/production/_92885094_ryanlongmuir-oldpic.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 December 2016" data-seconds="1481500983">
                 12 December 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[ahref]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#85">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Miguel Amaro, Ben Grech and Mariano Kostelec - the founders of Uniplaces" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/19E8/production/_93823660_0founders-uniplaces.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="30 January 2017" data-seconds="1485734704">
                 30 January 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li><li>[ahref]</li><li>[search]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#86">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Chris Gardner" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/52E7/production/_92732212_140208_chrisgardner_-106_original.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 December 2016" data-seconds="1480896186">
                 5 December 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#87">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jamie Bolding" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/A50F/production/_92655224_jamielandscape.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 November 2016" data-seconds="1480291466">
                 28 November 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><li>[ahref]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[link][link]<li>[search]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#88">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="George Gregan" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/15E56/production/_84468698_rugby1.jpg" data-width="624">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-33609567">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="26 July 2015" data-seconds="1437937249">
                 26 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#89">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Clock showing 9.06" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/13EA2/production/_92507518_clockistock.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="21 November 2016" data-seconds="1479687413">
                 21 November 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[link][search]<li>[link]</li>[search]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#90">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jose Neves" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/DC7A/production/_92224465_neves11.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="7 November 2016" data-seconds="1478477430">
                 7 November 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#91">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Charlotte Roach" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/A334/production/_92108714_charlotteheadandshoulders1crdeboraconfortini.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="31 October 2016" data-seconds="1477872377">
                 31 October 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link][ahref]<li>[link]</li>[search][link]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-37727456" tabindex="-1">
              Full article British Bulldog spirit
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#92">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Lisa Skeete Tatum" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/884F/production/_94859843_lisaskeetetatumheadshot-color-full.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="8 March 2017" data-seconds="1488933012">
                 8 March 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][search]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#93">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Michael Donovan" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/11E02/production/_91981237_michaeldonovanexecutivechairmandhxmedia-1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="24 October 2016" data-seconds="1477263644">
                 24 October 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-37702090" tabindex="-1">
              Full article Cartoon king
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#94">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Stephanie Chai" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/140C3/production/_91951128_stephanie_chai_a2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="14 November 2016" data-seconds="1479084345">
                 14 November 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-37677673" tabindex="-1">
              Full article The model who set up a travel firm after a dare
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#95">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Maximo Cavazzani" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/71DC/production/_91884192_max1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 October 2016" data-seconds="1476659010">
                 17 October 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#96">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Isadore Sharp" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/B09E/production/_91541254_4ff3b13e-c8de-4356-aef1-f0f26acdc617.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-37557539">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="10 October 2016" data-seconds="1476054302">
                 10 October 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li><li>[link]</li><li>[search]</li><li>[link]</li><li>[ahref]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-37557539" tabindex="-1">
              Full article A man for all seasons
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#97">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jacob de Geer" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/06DA/production/_91445710_jacob-de-geer-izettle-1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="3 October 2016" data-seconds="1475449783">
                 3 October 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[ahref]</li>[search][link][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#98">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Samantha Kingston" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/D00B/production/_91195235_img_8025.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="19 September 2016" data-seconds="1474239650">
                 19 September 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#99">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Mauricio de Sousa" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/127C4/production/_91061757_man1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 September 2016" data-seconds="1473635041">
                 12 September 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-37284939" tabindex="-1">
              Full article The last laugh
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#100">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jacyn Heavens" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2C06/production/_91007211_jacynintheoffice.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 September 2016" data-seconds="1473031779">
                 5 September 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#101">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Matthew Prince" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/3BFA/production/_91345351_matt1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="25 September 2016" data-seconds="1474843798">
                 25 September 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-37348016" tabindex="-1">
              Full article Saving Eurovision
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#102">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Lavanya Nalli" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/9B6F/production/_90919793_lavanya-nalli.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-36886693">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="29 August 2016" data-seconds="1472425229">
                 29 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#103">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="David Abney" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1855A/production/_90847699_gettyimages-473480266.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="22 August 2016" data-seconds="1471820539">
                 22 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [ahref]<li>[link]</li>[link]<li>[ahref]</li>[ahref][search][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#104">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Lisa Messenger" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/9093/production/_90511073_messenger2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="15 August 2016" data-seconds="1471216494">
                 15 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#105">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Sarah Wood" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/6BC6/production/_90509572_sarahwood.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="8 August 2016" data-seconds="1470612125">
                 8 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#106">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ambarish Mitra" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/86F0/production/_90544543_amb.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="1 August 2016" data-seconds="1470006999">
                 1 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li>[ahref][search]<li>[link]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-36824657" tabindex="-1">
              Full article Slumdog multi-millionaire
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#107">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Gerry Cottle Jr" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/12A13/production/_90470367_57dd66a1-2ede-42bc-8e01-14eccac61f72.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="25 July 2016" data-seconds="1469402039">
                 25 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/business-36843687" tabindex="-1">
              Full article High-flying boss
             </a>
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#108">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Woman on a water slide" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/13FF4/production/_90180918_nyslipnslide-lloydjohnston.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-36681934">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="4 July 2016" data-seconds="1467587640">
                 4 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li><li>[ahref]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#109">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Brad Katsuyama" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1070B/production/_89993376_gettyimages-450764508.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 June 2016" data-seconds="1467098653">
                 28 June 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#110">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Daniel Percival" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/0579/production/_90010410_img_0722.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="20 June 2016" data-seconds="1466377360">
                 20 June 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#111">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jocelyn Chng and a range of Chng Kee's sauces" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/8ABF/production/_89891553_jocelyn_frontfactory.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 June 2016" data-seconds="1465764848">
                 12 June 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li><li>[ahref]</li>[link]<li>[ahref]</li><li>[link]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#112">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="A young Tomasz Czechowicz" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/185FB/production/_89753899_tc-old.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-36341265">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="30 May 2016" data-seconds="1464563267">
                 30 May 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#113">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Micheal and Jodie Fox" data-height="1152" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/5C34/production/_89740632_founders-group.jpg" data-width="2048">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="22 May 2016" data-seconds="1463950860">
                 22 May 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#114">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Ted Nash" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2FD5/production/_89654221_tapdaq27.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="16 May 2016" data-seconds="1463354062">
                 16 May 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search][search][ahref]<li>[search]</li><li>[link]</li><li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#115">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Cassandra" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/CE3D/production/_89779725_89779724.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 June 2016" data-seconds="1465169715">
                 6 June 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#116">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Shots of tequila with lime wedges" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/031E/production/_89589700_thinkstockphotos-469219634.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 May 2016" data-seconds="1462749138">
                 9 May 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#117">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Lee Biggins" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/108EA/production/_89481876_lee-headshot-highres-300ppi.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="2 May 2016" data-seconds="1462146292">
                 2 May 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#118">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Olloclip creator Patrick O'Neill" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/FC57/production/_89099546_patrick-103_crop.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="25 April 2016" data-seconds="1461539203">
                 25 April 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#119">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="romantic fiction on a shelf" data-height="1080" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/C53F/production/_89259405_romanticfictiononashelf.jpg" data-width="1920">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="18 April 2016" data-seconds="1460934882">
                 18 April 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#120">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Vlad Paunescu" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/E3DC/production/_89123385_d25_8059a.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-35985122">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="11 April 2016" data-seconds="1460329733">
                 11 April 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#121">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Zica Assis" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/8298/production/_89023433_zicaassis2.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="4 April 2016" data-seconds="1459725603">
                 4 April 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#122">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Lile Cole" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/09DB/production/_88932520_gettyimages-464328294.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 March 2016" data-seconds="1459119878">
                 28 March 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link][ahref]<li>[link]</li><li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[link]</li><li>[search]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[link]<li>[ahref]</li>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#123">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Jonathan Liebmann" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/181A1/production/_88812789_johnathanliebmanncopyrightpropertuity-1.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="21 March 2016" data-seconds="1458519214">
                 21 March 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[ahref]</li><li>[ahref]</li><li>[ahref]</li><li>[link]</li>[search]<li>[search]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li><li>[search]</li>[link]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#124">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Food at Pied a Terre" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/5654/production/_88700122_searedscallopswithserranoham.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              <a class="title-link" href="/news/business-35715766">
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="14 March 2016" data-seconds="1457913917">
                 14 March 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link]<li>[link]</li>[ahref][search]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><li>[ahref]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="guides_2#125">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="js-delayed-image-load" data-alt="Anna Ross" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/C965/production/_88575515_kester_black_soap0101.jpg" data-width="976">
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 March 2016" data-seconds="1457298083">
                 6 March 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
           </div>
          </div>
          <div class="distinct-component-group " id="comp-candy-asset-munger-11">
           <h2 class="group-title " data-entityid="#more_from_entrepreneurship">
            [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
           </h2>
           <div class="robin sparrow-container">
            <div class="robin-item faux-block-link" data-entityid="features_and_analysis#1">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Caravan" data-height="575" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/1650F/production/_101070419_p065hsp3.jpg" data-width="1024">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li><li>[search]</li><li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
                  </span>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="29 April 2018" data-seconds="1525042675">
                 29 April 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search]<li>[ahref]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[ahref]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="features_and_analysis#2">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="beer bottles" data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/00C8/production/_100200200_p05zjff7.jpg" data-width="1024">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   <span class="off-screen">
                    Video[link][search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref][ahref]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[link]</li>[ahref][link]
                   </span>
                  </span>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 February 2018" data-seconds="1519777854">
                 28 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li><li>[search]</li><li>[link]</li>[ahref]
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="features_and_analysis#3">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Professor Ronald Li of Novoheart" data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/B01B/production/_100138054_p05z10bs.jpg" data-width="1024">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video[ahref][link][link][link][link]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[ahref]</li>[link]<li>[ahref]</li>
                  </span>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="26 February 2018" data-seconds="1519605440">
                 26 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="robin-item faux-block-link" data-entityid="features_and_analysis#4">
             <div class="robin-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Carley Jones" data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/3676/production/_100124931_p05yx81q.jpg" data-width="1024">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[ahref]</li>[link]<li>[link]</li>[link]<li>[ahref]</li><li>[ahref]</li>[link]<li>[ahref]</li>[search]<li>[ahref]</li>
                  </span>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="robin-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="22 February 2018" data-seconds="1519258609">
                 22 February 2018
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[ahref]</li><li>[ahref]</li>[ahref]<li>[search]</li><li>[link]</li><li>[link]</li><li>[ahref]</li><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
           </div>
          </div>
         </div>
         <div class="column--secondary">
          <div aria-hidden="true" class="bbccom_slot mpu-ad" id="bbccom_mpu_4">
           <div class="bbccom_advert">
           </div>
          </div>
          <div class="distinct-component-group container-condor wide-only" id="comp-candy-asset-munger-12">
           <h2 class="group-title " data-entityid="#watch/listen">
            [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
           </h2>
           <div class="condor sparrow-container">
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#1">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Jason Kingsley makes video games for a living. But he strives to live his life according to the values of a medieval knight. Video journalist Greg Brosnan." data-height="576" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/2EE9/production/_95990021_p052g87f.jpg" data-width="1024">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>
                  </span>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="15 May 2017" data-seconds="1494802874">
                 15 May 2017
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[link]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][link]<li>[search]</li>[search][ahref][ahref]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#2">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Lavanya Nalli" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/17229/production/_90916749_lavanya-nalli.jpg" data-width="976">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video[ahref]<li>[search]</li>[search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  1:53[search][ahref]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="29 August 2016" data-seconds="1472425216">
                 29 August 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [ahref][search]<li>[ahref]</li>[ahref][ahref]<li>[ahref]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#3">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Oyo Rooms founder Ritesh Agarwal" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/50E6/production/_85301702_pic5.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   <span class="off-screen">
                    Video<li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li><li>[ahref]</li>[link][link]
                   </span>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:28<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[search][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][ahref]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              <a class="title-link" href="/news/av/business-34116740/india-s-21-year-old-hotel-boss">
               <span class="off-screen">
                Video 3:28
               </span>
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="6 September 2015" data-seconds="1441580183">
                 6 September 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[search]</li>[link][search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/av/business-34116740/india-s-21-year-old-hotel-boss" tabindex="-1">
              Full article India's 21-year-old hotel boss
             </a>
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#4">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Lily Cole" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/11689/production/_90450317_lily.jpg" data-width="976">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[link]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[link][ahref][search]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><li>[link]</li>[search]<li>[ahref]</li>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  1:02[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[ahref]<li>[link]</li>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="24 July 2016" data-seconds="1469334393">
                 24 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link][search][link][search]<li>[search]</li>[search]<li>[link]</li>
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#5">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Lloyd Dorfman" data-height="1080" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/C1DE/production/_90303694_ceo_travelex1.jpg" data-width="1920">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[search]<li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li><li>[search]</li><li>[ahref]</li>[search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  1:04
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="11 July 2016" data-seconds="1468222415">
                 11 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/av/business-36321989/i-ve-recruited-mbas-who-were-useless" tabindex="-1">
              Full article 'I've recruited MBAs who were useless'
             </a>
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#6">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Justine Roberts" data-height="549" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/B907/production/_90376374_mumsnet1.jpg" data-width="976">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[search]</li><li>[ahref]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][ahref][search]<li>[link]</li><li>[link]</li><li>[ahref]</li>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  0:49
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 July 2016" data-seconds="1468732242">
                 17 July 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section <li>[ahref]</li>[link]<li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[ahref]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[ahref]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#7">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Isha Johansen" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/15AE2/production/_87320888_ceo_isha2.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video<li>[link]</li>[link][link][search][search][link]<li>[link]</li>[search]<li>[search]</li><li>[ahref]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  0:58[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li><li>[search]</li>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="1 February 2016" data-seconds="1454286296">
                 1 February 2016
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#8">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="William Saito" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/16379/production/_85410019_interview.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[search]<li>[link]</li>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><li>[search]</li>[ahref][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<li>[ahref]</li>[ahref]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:38[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li><li>[search]</li><li>[ahref]</li>[ahref][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[link]</li>[link][ahref]
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="13 September 2015" data-seconds="1442183204">
                 13 September 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#9">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Nadiem Makarim" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/10144/production/_85006856_de27.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[link]</li><li>[search]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li><li>[search]</li>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][search]<li>[ahref]</li>[ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:03
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="23 August 2015" data-seconds="1440357684">
                 23 August 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link][link]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
                </span>
                <a class="mini-info-list__section" data-entityid="section-label" href="/news/business">
                 Business
                </a>
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#10">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Thuy Truong working outside with colleagues" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/BA53/production/_84799674_working-with-colleagues-in-cafe.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><li>[link]</li><li>[link]</li><li>[ahref]</li><li>[link]</li>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link][search]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:40
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              <a class="title-link" href="/news/av/business-33852884/pioneering-start-ups-in-vietnam">
               <span class="off-screen">
                Video 3:40
               </span>
               <h3 class="title-link__title">
                [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
               </h3>
              </a>
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="17 August 2015" data-seconds="1439766980">
                 17 August 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#11">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Saral Kochar and Josie Tam" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/3A48/production/_84602941_img_0053.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video[search]<li>[ahref]</li><li>[link]</li>[search]<li>[link]</li><li>[link]</li><li>[ahref]</li><li>[ahref]</li>[search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[link]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[ahref]<li>[link]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:38[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]<li>[search]</li>[search]<li>[search]</li>
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="9 August 2015" data-seconds="1439146827">
                 9 August 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [search]<li>[search]</li><li>[link]</li>[link]<li>[search]</li>[link][ahref][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li>
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#12">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Aldi Haryopratomo" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/44B1/production/_84258571_aldi1.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][ahref]<li>[link]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:11
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="19 July 2015" data-seconds="1437342820">
                 19 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section [link]<li>[link]</li><li>[ahref]</li><li>[search]</li>[link][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#13">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Khoo Swee Chiow" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/136B3/production/_84193597_img0056.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   <span class="off-screen">
                    Video<li>[ahref]</li>[link][ahref][search][ahref]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                   </span>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:20
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="12 July 2015" data-seconds="1436726670">
                 12 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#14">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="janine allis with her staff at Boost juice bar" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/113FE/production/_84045607_janinepic.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video[search]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[ahref]<li>[link]</li><li>[ahref]</li><li>[ahref]</li>
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:13
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="5 July 2015" data-seconds="1436122113">
                 5 July 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             <a aria-hidden="true" class="faux-block-link__overlay-link" href="/news/av/business-33324425/bowie-s-barmaid" tabindex="-1">
              Full article Bowie's barmaid
             </a>
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#15">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Guo Pei dress" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/138A8/production/_83904008_gettyimages-473031394.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video[link][ahref][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[link]<li>[link]</li><li>[link]</li>[link]<li>[ahref]</li><li>[link]</li>[ahref][search]<li>[ahref]</li>[search]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:29
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="28 June 2015" data-seconds="1435519931">
                 28 June 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [ahref]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#16">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Simon Lee" data-height="351" data-src="https://ichef.bbci.co.uk/news/200/cpsprodpb/D004/production/_83725235_man1.jpg" data-width="624">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  <span class="svg-icon svg-icon--video-dark">
                   Video[link]<li>[link]</li><li>[search]</li>[ahref][search]<li>[search]</li>[search]
                  </span>
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  4:19
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [link]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="21 June 2015" data-seconds="1434914422">
                 21 June 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [ahref]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
            <div class="condor-item faux-block-link" data-entityid="av-stories-now#17">
             <div class="condor-item__image">
              <div class="responsive-image responsive-image--16by9">
               <div class="responsive-image__inner-for-label">
                <div class="js-delayed-image-load" data-alt="Annie Lennox" data-height="360" data-src="https://ichef.bbci.co.uk/news/200/media/images/82511000/jpg/_82511717_hi000432031.jpg" data-width="640">
                </div>
                <div aria-hidden="true" class="responsive-image__media-and-live-label">
                 <span class="badge-icon-only badge-icon-only--video-for-image">
                  Video<li>[link]</li>[ahref]<li>[search]</li><li>[link]</li><li>[link]</li>[link]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
                 </span>
                 <span class="badge-text-only badge-text-only--duration">
                  3:41[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>[search]
                 </span>
                </div>
               </div>
              </div>
             </div>
             <div class="condor-item__body">
              [ahref]
              
              <ul class="mini-info-list">
               <li class="mini-info-list__item">
                <div class="date date--v2" data-datetime="27 April 2015" data-seconds="1430089452">
                 27 April 2015
                </div>
               </li>
               <li class="mini-info-list__item mini-info-list__item--section">
                <span class="mini-info-list__section-desc off-screen">
                 From the section
                </span>
                [link]
                
               </li>
              </ul>
             </div>
             [link]
             
            </div>
           </div>
          </div>
          <div aria-hidden="true" class="bbccom_slot mpu-bottom-ad" id="bbccom_mpu_bottom_1_2_3_4">
           <div class="bbccom_advert">
           </div>
          </div>
          <div aria-hidden="true" class="bbccom_slot adsense-ad" id="bbccom_adsense_1_2_3_4">
           <div class="bbccom_advert">
           </div>
          </div>
         </div>
        </div>
        <div class="column--single-bottom">
         <div class="hidden" data-post-load-url="/news/pattern-library-components?config_path=fix%2Fnews%2Fgenre%2Fbusiness-22449886&amp;component_id=digest-2&amp;presenter=pattern-library-presenter" id="comp-digest-2">
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="navigation--footer" id="core-navigation">
      <h2 class="navigation--footer__heading">
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <nav aria-label="BBC News" class="navigation navigation--bottom " id="navigation--bottom" role="navigation">
       <span class="navigation-core-title">
        Sections
       </span>
       <ul class="navigation--bottom__toplevel">
        <li class="">
         [link]
         
        </li>
        <li class="">
         [ahref]
         
        </li>
        <li class="">
         [ahref]
         
         <div class="navigation-panel navigation-panel--closed js-navigation-panel-World">
          <div class="navigation-panel__content">
           <ul class="navigation-panel-secondary">
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/news/world/middle_east">
              <span>
               Middle East<li>[ahref]</li><li>[link]</li><li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[link]</li>[link][search][ahref][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
              </span>
             </a>
            </li>
           </ul>
          </div>
         </div>
        </li>
        <li class="">
         [link]
         
         <div class="navigation-panel navigation-panel--closed js-navigation-panel-US___Canada">
          <div class="navigation-panel__content">
           <ul class="navigation-panel-secondary">
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </li>
        <li class="">
         [ahref]
         
         <div class="navigation-panel navigation-panel--closed js-navigation-panel-UK">
          <div class="navigation-panel__content">
           <ul class="navigation-panel-secondary">
            <li>
             [link]
             
            </li>
            <li>
             <a href="/news/england">
              <span>
               England
              </span>
             </a>
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </li>
        <li class="">
         <a class="navigation-arrow" data-panel-id="js-navigation-panel-Business" href="/news/business">
          <span>
           Business
          </span>
         </a>
         <div class="navigation-panel navigation-panel--closed js-navigation-panel-Business">
          <div class="navigation-panel__content">
           <ul class="navigation-panel-secondary">
            <li>
             <a href="/news/business">
              <span>
               Business Home[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[ahref]<li>[link]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
              </span>
             </a>
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [link]
             
            </li>
            <li>
             <a href="/news/business/companies">
              <span>
               Companies
              </span>
             </a>
            </li>
            <li>
             <a href="/news/business-22434141">
              <span>
               Entrepreneurship
              </span>
             </a>
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [link]
             
            </li>
           </ul>
          </div>
         </div>
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         [ahref]
         
        </li>
        <li class="">
         <a class="" href="/news/entertainment_and_arts">
          <span>
           Entertainment &amp; Arts[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[search]</li>
          </span>
         </a>
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         <a class="" href="/news/world_radio_and_tv">
          <span>
           World News TV
          </span>
         </a>
        </li>
        <li class="">
         [ahref]
         
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         [link]
         
        </li>
        <li class="">
         [ahref]
         
        </li>
        <li class="">
         [ahref]
         
        </li>
       </ul>
      </nav>
     </div>
     <div class="distinct-component-group " id="comp-pattern-library-2">
      <div aria-label="BBC News Services" class="blue-tit" id="bbc-news-services" role="navigation">
       <div class="blue-tit__inner">
        <h2 class="blue-tit__title">
         <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
        </h2>
        <ul class="blue-tit__list">
         <li class="blue-tit__list-item">
          [link]
          
         </li>
         <li class="blue-tit__list-item">
          <a class="blue-tit__list-item-link connected-tv" href="/news/help-17655000">
           On your connected tv
          </a>
         </li>
         <li class="blue-tit__list-item">
          [ahref]
          
         </li>
         <li class="blue-tit__list-item">
          <a class="blue-tit__list-item-link contact-us" href="/news/20039682">
           Contact BBC News
          </a>
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="orb-footer" dir="ltr" id="orb-footer">
    <div id="navp-orb-footer-promo">
    </div>
    <aside role="complementary">
     <div class="orb-nav-sec b-r b-g-p" id="orb-aside">
      <div aria-label="BBC" class="orb-footer-inner" role="navigation">
       <h2 class="orb-footer-lead">
        <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
       </h2>
       <div class="orb-footer-primary-links">
        <ul>
         <li class="orb-nav-home">
          [ahref]
          
         </li>
         <li class="orb-nav-news">
          [link]
          
         </li>
         <li class="orb-nav-sport">
          [ahref]
          
         </li>
         <li class="orb-nav-weather">
          [link]
          
         </li>
         <li class="orb-nav-iplayer">
          [link]
          
         </li>
         <li class="orb-nav-sounds">
          [link]
          
         </li>
         <li class="orb-nav-cbbc">
          [ahref]
          
         </li>
         <li class="orb-nav-cbeebies">
          [link]
          
         </li>
         <li class="orb-nav-food">
          [ahref]
          
         </li>
         <li class="orb-nav-bitesize">
          [link]
          
         </li>
         <li class="orb-nav-earth">
          [ahref]
          
         </li>
         <li class="orb-nav-arts">
          <a href="/arts">
           Arts
          </a>
         </li>
         <li class="orb-nav-digital">
          [ahref]
          
         </li>
         <li class="orb-nav-taster">
          [link]
          
         </li>
         <li class="orb-nav-local">
          [link]
          
         </li>
         <li class="orb-nav-tomorrowsworld">
          [link]
          
         </li>
         <li class="orb-nav-tv">
          [link]
          
         </li>
         <li class="orb-nav-radio">
          [link]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </aside>
    <footer role="contentinfo">
     <div class="orb-nav-sec b-r b-g-p" id="orb-contentinfo">
      <div class="orb-footer-inner">
       <ul>
        <li class="orb-footer-terms">
         [link]
         
        </li>
        <li class="orb-footer-about">
         [link]
         
        </li>
        <li class="orb-footer-privacy">
         [ahref]
         
        </li>
        <li class="orb-footer-cookies">
         [link]
         
        </li>
        <li class="orb-footer-accessibility">
         [ahref]
         
        </li>
        <li class="orb-footer-parental">
         [link]
         
        </li>
        <li class="orb-footer-contact">
         [ahref]
         
        </li>
        <li class="orb-footer-newsletter">
         [ahref]
         
        </li>
       </ul>
       <small>
        <em class="orb-hilight">
         Copyright © 2018 BBC.
        </em>
        The BBC is not responsible for the content of external sites.
        <span class="orb-footer-links">
         [link]
         
        </span>
       </small>
      </div>
     </div>
    </footer>
   </div>
   <div class="bbccom_display_none">
    <noscript>
    </noscript>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0307
  </b>
 </body>
</html>
