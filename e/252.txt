<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][keyword1][symbolx][area1][keywordx][bracketl2][site1][bracketr2][bracketl3][contact1][bracketr3][symbolx][area1][keywordx][symbolx][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.33.0-wmf.6" name="generator"/>
  <meta content="origin" name="referrer"/>
  <meta content="origin-when-crossorigin" name="referrer"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
  <meta content="[area1][mkey1][keyword1][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:image"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-Boss_TV_series rootpage-Boss_TV_series skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   [link]
   
   <div class="mw-body-content" id="siteNotice">
   </div>
   <div class="mw-indicators mw-body-content">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="en">
    <b>[area2][keyword2][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx][symbolx][area2][keywordx]</b>
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div class="noprint" id="siteSub">
     From Wikipedia, the free encyclopedia
    </div>
    <div id="contentSub">
    </div>
    <div id="jump-to-nav">
    </div>
    [link]
    
    [ahref]
    
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="en">
     <div class="mw-parser-output">
      <table class="infobox vevent" style="width:22em">
       <tbody>
        <tr>
         <th class="summary" colspan="2" style="text-align:center;font-size:125%;font-weight:bold;font-style: italic; background: #CCCCFF; padding: 0.25em 1em; line-height: 1.5em;">
          Boss
         </th>
        </tr>
        <tr>
         <td colspan="2" style="text-align:center">
          [link]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Genre
         </th>
         <td class="category">
          [ahref]
          
          /
          [link]
          
          <br/>
          <a href="/wiki/Psychological_thriller" title="Psychological thriller">
           Psychological thriller
          </a>
         </td>
        </tr>
        <tr>
         <th scope="row">
          Created by
         </th>
         <td>
          [link]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Starring
         </th>
         <td class="attendee">
          <div class="plainlist">
           <ul>
            <li>
             <a href="/wiki/Kelsey_Grammer" title="Kelsey Grammer">
              Kelsey Grammer
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </td>
        </tr>
        <tr>
         <th scope="row">
          Theme music composer
         </th>
         <td>
          Traditional, arranged by
          [link]
          
          and
          [link]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Opening theme
         </th>
         <td>
          Robert Plant -
          [link]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Ending theme
         </th>
         <td>
          "Satan, Your Kingdom Must Come Down" (instrumental)
         </td>
        </tr>
        <tr>
         <th scope="row">
          Composer(s)
         </th>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-1">
           [ahref]
           
          </sup>
         </td>
        </tr>
        <tr>
         <th scope="row">
          Country of origin
         </th>
         <td>
          United States
         </td>
        </tr>
        <tr>
         <th scope="row">
          Original
          <span class="nowrap">
           language(s)[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][search]<li>[search]</li>[search][link]<li>[link]</li>[link]
          </span>
         </th>
         <td>
          English
         </td>
        </tr>
        <tr>
         <th scope="row">
          <abbr title="Number">
           No.
          </abbr>
          of seasons
         </th>
         <td>
          2
         </td>
        </tr>
        <tr>
         <th scope="row">
          <abbr title="Number">
           No.
          </abbr>
          of episodes
         </th>
         <td>
          18
          <span class="nowrap">
           [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
          </span>
         </td>
        </tr>
        <tr>
         <th class="summary" colspan="2" style="text-align:center;background: #CCCCFF; padding: 0.25em 1em; line-height: 1.5em;">
          Production
         </th>
        </tr>
        <tr>
         <th scope="row">
          Executive
          <span class="nowrap">
           producer(s)[search][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][search]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>
          </span>
         </th>
         <td>
          <div class="plainlist">
           <ul>
            <li>
             Kelsey Grammer
            </li>
            <li>
             Farhad Safinia
            </li>
            <li>
             Dee Johnson
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [link]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             Brian Sher
            </li>
            <li>
             Stella Bulochnikov-Stopler
            </li>
           </ul>
          </div>
         </td>
        </tr>
        <tr>
         <th scope="row">
          Production location(s)
         </th>
         <td>
          [ahref]
          
          ,
          [ahref]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Camera setup
         </th>
         <td>
          Single-camera
         </td>
        </tr>
        <tr>
         <th scope="row">
          Running time
         </th>
         <td>
          54-60 minutes
         </td>
        </tr>
        <tr>
         <th scope="row">
          Production
          <span class="nowrap">
           company(s)<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][ahref]<li>[search]</li>[ahref][link]<li>[link]</li>[ahref]<li>[link]</li>
          </span>
         </th>
         <td>
          <div class="plainlist">
           <ul>
            <li>
             Category 5 Entertainment
            </li>
            <li>
             [link]
             
            </li>
            <li>
             Roya Productions
            </li>
            <li>
             Old Friends Productions
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </td>
        </tr>
        <tr>
         <th class="summary" colspan="2" style="text-align:center;background: #CCCCFF; padding: 0.25em 1em; line-height: 1.5em;">
          Release
         </th>
        </tr>
        <tr>
         <th scope="row">
          Original network
         </th>
         <td>
          [ahref]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Picture format
         </th>
         <td>
          [link]
          
          (
          [link]
          
          )
          <br/>
          [link]
          
          [ahref]
          
         </td>
        </tr>
        <tr>
         <th scope="row">
          Original release
         </th>
         <td>
          October 21, 2011
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2011-10-21
           </span>
           )
          </span>
          – October 19, 2012
          <span style="display:none">
           [ahref]<li>[ahref]</li><li>[search]</li><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>
          </span>
         </td>
        </tr>
        <tr>
         <th class="summary" colspan="2" style="text-align:center;background: #CCCCFF; padding: 0.25em 1em; line-height: 1.5em;">
          External links
         </th>
        </tr>
        <tr>
         <td class="url" colspan="2" style="text-align:center">
          [ahref]
          
         </td>
        </tr>
       </tbody>
      </table>
      <p>
       <li>[link]</li><li>[ahref]</li>[ahref]<li>[link]</li><li>[ahref]</li>[ahref]
      </p>
      <p>
       <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
      </p>
      <p>
       On November 20, 2012, it was announced that Starz had cancelled the show.
       <sup class="reference" id="cite_ref-5">
        [ahref]
        
       </sup>
       A film was being discussed to finish the show's storylines,
       <sup class="reference" id="cite_ref-6">
        [ahref]
        
       </sup>
       but those plans were cancelled after series creator Farhad Safinia declined to move forward with the project.
       <sup class="reference" id="cite_ref-7">
        [link]
        
       </sup>
      </p>
      <div class="toc" id="toc">
       <div class="toctitle" dir="ltr" lang="en">
        <h2>
         <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
        </h2>
        <span class="toctogglespan">
         [link]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
        </span>
       </div>
       <ul>
        <li class="toclevel-1 tocsection-1">
         [ahref]
         
        </li>
        <li class="toclevel-1 tocsection-2">
         [link]
         
         <ul>
          <li class="toclevel-2 tocsection-3">
           [ahref]
           
          </li>
          <li class="toclevel-2 tocsection-4">
           [link]
           
          </li>
         </ul>
        </li>
        <li class="toclevel-1 tocsection-5">
         [ahref]
         
        </li>
        <li class="toclevel-1 tocsection-6">
         [link]
         
         <ul>
          <li class="toclevel-2 tocsection-7">
           [ahref]
           
          </li>
          <li class="toclevel-2 tocsection-8">
           [link]
           
          </li>
          <li class="toclevel-2 tocsection-9">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="toclevel-1 tocsection-10">
         [link]
         
         <ul>
          <li class="toclevel-2 tocsection-11">
           [link]
           
          </li>
          <li class="toclevel-2 tocsection-12">
           [ahref]
           
          </li>
          <li class="toclevel-2 tocsection-13">
           [link]
           
          </li>
         </ul>
        </li>
        <li class="toclevel-1 tocsection-14">
         [ahref]
         
        </li>
        <li class="toclevel-1 tocsection-15">
         [ahref]
         
        </li>
        <li class="toclevel-1 tocsection-16">
         [link]
         
        </li>
       </ul>
      </div>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <p>
       [link][link]<li>[ahref]</li><li>[search]</li>[search][search][link]<li>[search]</li>
      </p>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li>
        [link]
        
        as Tom Kane, the Mayor of Chicago
       </li>
       <li>
        [ahref]
        
        as Meredith Kane, Tom's wife
       </li>
       <li>
        [ahref]
        
        as Emma Kane, Tom Kane's estranged daughter
       </li>
       <li>
        <a href="/wiki/Jeff_Hephner" title="Jeff Hephner">
         Jeff Hephner
        </a>
        as Ben Zajac, Illinois State Treasurer and candidate for Governor
       </li>
       <li>
        <a href="/wiki/Kathleen_Robertson" title="Kathleen Robertson">
         Kathleen Robertson
        </a>
        as Kitty O'Neill, Tom Kane's personal aide
       </li>
       <li>
        [link]
        
        as Ezra Stone (Main cast season 1; Recurring season 2), Tom Kane's senior political advisor
       </li>
       <li>
        [link]
        
        as Sam Miller (Recurring Season 1; Main cast Season 2), a political journalist working for
        <i>
         The Sentinel
        </i>
       </li>
       <li>
        [ahref]
        
        as Ian Todd (Season 2), a political upstart trying to get Kane's ear.
       </li>
       <li>
        [ahref]
        
        as Darius (Recurring Season 1; Main cast Season 2), a drug dealer with whom Emma is romantically involved
       </li>
       <li>
        [link]
        
        as Gerald 'Babe' McGantry.
       </li>
       <li>
        [link]
        
        as Trey (Season 2), a former gang member with designs on a career in Chicago’s City Hall
       </li>
       <li>
        [link]
        
        as Mona Fredricks (Season 2), Tom Kane's new chief of staff.
       </li>
      </ul>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li>
        [ahref]
        
        as McCall "Mac" Cullen (Season 1–2),
        [ahref]
        
        , who is running for re-election
       </li>
       <li>
        [ahref]
        
        as Catherine Walsh (Season 2), the Republican candidate for governor
       </li>
       <li>
        [ahref]
        
        as Maggie Zajac (Season 1–2), Ben Zajac's wife
       </li>
       <li>
        Karen Aldridge as Dr. Ella Harris (Season 1–2), Tom Kane's neurologist
       </li>
       <li>
        James Vincent Meredith as
        [ahref]
        
        Ross (Season 1–2), an
        <a href="/wiki/Alderman" title="Alderman">
         alderman
        </a>
        serving on the Chicago City Council, from the
        [link]
        
       </li>
       <li>
        Anthony Mockus, Sr. as Mayor Rutledge (Season 1–2), Tom Kane's predecessor and Meredith's father, who is in a catatonic state
       </li>
       <li>
        [ahref]
        
        as Vacarro (Season 2), casino investor and Meredith's lover
       </li>
       <li>
        Doug James as the Grey Haired Man
        <sup class="reference" id="cite_ref-8">
         [ahref]
         
        </sup>
        (Season 1–2), Tom Kane's
        [ahref]
        
       </li>
       <li>
        [link]
        
        as Debra Whitehead (Season 1), caretaker/nurse to Tom Kane's father-in-law
       </li>
       <li>
        [link]
        
        as Alderman Mata (Season 1), an alderman serving on the
        [link]
        
        , representing the 30th ward
       </li>
       <li>
        [ahref]
        
        as Moco Ruiz (Season 1), the head of a construction company working on the
        [link]
        
        expansion
       </li>
       <li>
        Steve Lenz as Phone Monkey (Season 1–2), an aide to Tom Kane
       </li>
       <li>
        Mary Hollis Inboden as Jackie Shope (Season 1–2), a journalist at
        <i>
         The Sentinel
        </i>
        working under Sam Miller
       </li>
      </ul>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <p>
       [ahref]
       
       developed
       <i>
        Boss
       </i>
       in late 2009, with creative input from Kelsey Grammer and his production company Grammnet Productions.
       <sup class="reference" id="cite_ref-greenlight_9-0">
        [link]
        
       </sup>
       In November 2010, the script was shopped around to various cable networks and, following a heated and contentious bidding war,
       [ahref]
       
       placed an eight episode order for the series, based solely on the strength of the script.
       <sup class="reference" id="cite_ref-greenlight_9-1">
        [link]
        
       </sup>
       This was in keeping with Starz's business model of not ordering
       [link]
       
       but rather
       [link]
       
       projects straight-to-series.
       <sup class="reference" id="cite_ref-greenlight_9-2">
        [ahref]
        
       </sup>
       Safinia wrote the pilot,
       [link]
       
       was attached to the project as director, with Grammer, Safinia, Van Sant,
       [ahref]
       
       ,
       [link]
       
       , Brian Sher and Stella Bulochnikov-Stopler serving as executive producers.
       <sup class="reference" id="cite_ref-greenlight_9-3">
        [link]
        
       </sup>
       <sup class="reference" id="cite_ref-10">
        [link]
        
       </sup>
      </p>
      <p>
       Casting announcements began in November 2010, with Grammer first to be cast. He portrays Tom Kane, "the Mayor of Chicago who is diagnosed with a degenerative mental condition that only he and his doctor know about".
       <sup class="reference" id="cite_ref-greenlight_9-4">
        [link]
        
       </sup>
       Next to join the series was
       [link]
       
       as Meredith Kane, Tom's wife: "Meredith and Kane have a bad marriage and barely speak when they aren't in public".
       <sup class="reference" id="cite_ref-11">
        <a href="1">
         [11]
        </a>
       </sup>
       <a href="/wiki/Jeff_Hephner" title="Jeff Hephner">
        Jeff Hephner
       </a>
       was next to be cast, as Ben Zajac, "the state's treasurer, an impeccably handsome and ambitious Chicago native who is clearly about to become a major player on the Chicago political scene".
       <sup class="reference" id="cite_ref-12">
        [ahref]
        
       </sup>
       [link]
       
       and
       <a href="/wiki/Kathleen_Robertson" title="Kathleen Robertson">
        Kathleen Robertson
       </a>
       were the last actors to join the main cast, with Ware playing Emma Kane, Tom Kane's estranged daughter, and Robertson playing Kitty O'Neil, Kane's personal aide.
       <sup class="reference" id="cite_ref-production_13-0">
        [link]
        
       </sup>
      </p>
      <p>
       Starz later announced that Martin Donovan, Francis Guinan, Rotimi Akinosho, Karen Aldridge, Troy Garity, Ricardo Gutierrez, James Vincent Meredith, and Joe Minoso had joined the series as recurring guest stars.
       <sup class="reference" id="cite_ref-pressrelease_14-0">
        [link]
        
       </sup>
       <a href="/wiki/Martin_Donovan" title="Martin Donovan">
        Martin Donovan
       </a>
       was cast as Ezra Stone, "A savvy Yale graduate, and senior advisor to Kane, Stone knows the Mayor better than anyone. Whether it's pushing Kane’s agenda, or assisting with personal matters, Ezra always delivers".
       <sup class="reference" id="cite_ref-pressrelease_14-1">
        <a href="4">
         [14]
        </a>
       </sup>
       [ahref]
       
       was cast as Governor McCall "Mac" Cullen, "The governor of Illinois, Cullen hates playing along with the Mayor’s apparent unwavering support for his re-election bid. And his ugly temper is getting even worse".
       <sup class="reference" id="cite_ref-pressrelease_14-2">
        [link]
        
       </sup>
       Rotimi Akinosho was cast as Darius, "a muscular drug dealer who’s covered in tattoos, but he’s smart, well spoken, and cares for his sick uncle".
       <sup class="reference" id="cite_ref-pressrelease_14-3">
        [link]
        
       </sup>
       Karen Aldrige was cast as Dr. Ella Harris, Mayor Kane's neurologist and (initially) the only other person who knows about his current medical condition.
       <sup class="reference" id="cite_ref-pressrelease_14-4">
        [link]
        
       </sup>
       Garity was cast as Sam Miller, "a politically savvy journalist for The Sentinel, with a nose for a real story".
       <sup class="reference" id="cite_ref-pressrelease_14-5">
        [link]
        
       </sup>
       Ricardo Gutierrez was cast as Alderman Mata, "Political boss of the 30th ward, Mata is a thug in a suit who believes the ends justify the means, however vicious".
       <sup class="reference" id="cite_ref-pressrelease_14-6">
        [link]
        
       </sup>
       James Vincent Meredith was cast as Alderman Ross, "Kane’s biggest rival",
       <sup class="reference" id="cite_ref-pressrelease_14-7">
        [ahref]
        
       </sup>
       and Joe Minoso was cast as Moco Ruiz, "A construction worker, Ruiz is one of Mata’s guys".
       <sup class="reference" id="cite_ref-pressrelease_14-8">
        [link]
        
       </sup>
      </p>
      <p>
       The series was filmed between April 27, 2011, and July 27, 2011, on location in
       [ahref]
       
       .
       <sup class="reference" id="cite_ref-production_13-1">
        [ahref]
        
       </sup>
       <sup class="reference" id="cite_ref-15">
        [link]
        
       </sup>
      </p>
      <p>
       At the
       [link]
       
       , Starz announced that
       <i>
        Boss
       </i>
       would premiere on October 21, 2011;
       <sup class="reference" id="cite_ref-premiere_3-1">
        [link]
        
       </sup>
       the second season premiered on August 17, 2012.
       <sup class="reference" id="cite_ref-screenrant_16-0">
        [ahref]
        
       </sup>
       The series was produced by Category 5 Entertainment, Grammnet Productions, and
       [link]
       
       .
       <sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">
        [
        <i>
         [ahref]
         
        </i>
        ]
       </sup>
      </p>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <table class="wikitable plainrowheaders" style="text-align:center">
       <tbody>
        <tr style="text-align:center">
         <th colspan="2" rowspan="2" scope="col" style="padding:0 8px">
          Season
         </th>
         <th colspan="2" rowspan="2" scope="col" style="padding:0 8px">
          Episodes
         </th>
         <th colspan="2" rowspan="1" scope="col">
          Originally aired
         </th>
        </tr>
        <tr>
         <th scope="col">
          First aired
         </th>
         <th scope="col">
          Last aired
         </th>
        </tr>
        <tr>
         <td scope="row" style="background:#000000;width:10px">
         </td>
         <td colspan="1">
          [ahref]
          
         </td>
         <td colspan="2">
          8
         </td>
         <td colspan="1" style="padding:0.2em 0.4em">
          October 21, 2011
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2011-10-21[link]<li>[ahref]</li>[link]<li>[ahref]</li><li>[link]</li>[ahref][ahref]<li>[ahref]</li>
           </span>
           )
          </span>
         </td>
         <td style="padding:0 8px">
          December 9, 2011
          <span style="display:none">
           (
           <span class="dtend">
            2011-12-09<li>[search]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li>[ahref]<li>[link]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li>[ahref][search]
           </span>
           )
          </span>
         </td>
        </tr>
        <tr>
         <td scope="row" style="background:#979797;width:10px">
         </td>
         <td colspan="1">
          [ahref]
          
         </td>
         <td colspan="2">
          10
         </td>
         <td colspan="1" style="padding:0.2em 0.4em">
          August 17, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-08-17<li>[search]</li><li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li><li>[link]</li>
           </span>
           )
          </span>
         </td>
         <td style="padding:0 8px">
          October 19, 2012
          <span style="display:none">
           <li>[search]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li><li>[link]</li>[search][link][search]
          </span>
         </td>
        </tr>
       </tbody>
      </table>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <table class="wikitable plainrowheaders wikiepisodetable" style="width:100%">
       <tbody>
        <tr style="color:white;text-align:center">
         <th scope="col" style="background:#000000;width:6%">
          <abbr title="Number">
           No.
          </abbr>
          <br>
           [link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><li>[link]</li>[ahref]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
          </br>
          overall
         </th>
         <th scope="col" style="background:#000000;width:6%">
          <abbr title="Number">
           No.
          </abbr>
          in
          <br/>
          season
         </th>
         <th scope="col" style="background:#000000;width:20%">
          Title
         </th>
         <th scope="col" style="background:#000000;width:16%">
          Directed by
         </th>
         <th scope="col" style="background:#000000;width:22%">
          Written by
         </th>
         <th scope="col" style="background:#000000;width:18%">
          Original air date
         </th>
         <th scope="col" style="background:#000000;width:12%">
          US viewers
          <br>
           <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li><li>[search]</li><li>[ahref]</li><li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[ahref]</li>
          </br>
          (millions)
         </th>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep1" scope="row" style="text-align:center">
          1
         </th>
         <td>
          1
         </td>
         <td class="summary" style="text-align:left">
          "Listen"
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          October 21, 2011
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2011-10-21
           </span>
           )
          </span>
         </td>
         <td>
          0.659
          <sup class="reference" id="cite_ref-17">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          After the discovery of a serious medical condition, Mayor Tom Kane must set things in motion for the upcoming gubernatorial primary, while attempting to reconnect with his distant wife Meredith and estranged daughter Emma.
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep2" scope="row" style="text-align:center">
          2
         </th>
         <td>
          2
         </td>
         <td class="summary" style="text-align:left">
          "Reflex"
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          Farhad Safinia
         </td>
         <td>
          October 28, 2011
          <span style="display:none">
           <li>[link]</li>[search][link]<li>[search]</li>[link]<li>[link]</li><li>[link]</li><li>[search]</li>[ahref][search]
          </span>
         </td>
         <td>
          0.391
          <sup class="reference" id="cite_ref-18">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          A new political force enters the race with only a few weeks until the primary. When the City Council stands in Kane's way, Kane and his crew must flex their political muscles to stay on top. Meanwhile, Meredith gets some unsettling news that adds to her growing suspicions that her husband is keeping something from her.
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep3" scope="row" style="text-align:center">
          3
         </th>
         <td>
          3
         </td>
         <td class="summary" style="text-align:left">
          "Swallow"
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          [ahref]
          
          &amp; Richard Levine
         </td>
         <td>
          November 4, 2011
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2011-11-04
           </span>
           )
          </span>
         </td>
         <td>
          0.268
          <sup class="reference" id="cite_ref-insidetv_19-0">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          As Zajac's campaign gains momentum, Kane has problems adjusting to his new medical reality. An embarrassing media storm catches Governor Cullen off guard, while Miller stumbles upon a story that seeps much deeper than he imagined.
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep4" scope="row" style="text-align:center">
          4
         </th>
         <td>
          4
         </td>
         <td class="summary" style="text-align:left">
          "Slip"
         </td>
         <td>
          Jim McKay
         </td>
         <td>
          Bradford Winters
         </td>
         <td>
          November 11, 2011
          <span style="display:none">
           <li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>
          </span>
         </td>
         <td>
          0.420
          <sup class="reference" id="cite_ref-20">
           [ahref]
           
          </sup>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          Kane finds himself starting to lose control, both politically and personally, as his supporters begin to question their confidence in him. Zajac ventures into uncharted territory while campaigning, as Miller continues to dig for answers.
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep5" scope="row" style="text-align:center">
          5
         </th>
         <td>
          5
         </td>
         <td class="summary" style="text-align:left">
          "Remembered"
         </td>
         <td>
          [link]
          
         </td>
         <td>
          Angelina Burnett
         </td>
         <td>
          November 18, 2011
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2011-11-18[link][search][search]<li>[search]</li>[ahref][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]
           </span>
           )
          </span>
         </td>
         <td>
          <small>
           <span style="color: #2C2C2C" title="Not available">
            N/A[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][link]<li>[ahref]</li><li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[link]</li>[ahref]<li>[search]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><li>[ahref]</li>[ahref]
           </span>
          </small>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          After long-buried information resurfaces, Kane and his camp find themselves battling the media for control of public perception. With the primary just around the corner, they have to pull out all the stops to contain the situation and keep the upper hand.
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep6" scope="row" style="text-align:center">
          6
         </th>
         <td>
          6
         </td>
         <td class="summary" style="text-align:left">
          "Spit"
         </td>
         <td>
          Mario Van Peebles
         </td>
         <td>
          Lyn Green &amp; Richard Levine
         </td>
         <td>
          November 25, 2011
          <span style="display:none">
           [search]<li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>
          </span>
         </td>
         <td>
          <small>
           <span style="color: #2C2C2C" title="Not available">
            N/A
           </span>
          </small>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          Kane takes an unannounced break from City Hall as his political image hits an all-time low. The election looms and he'll need to enlist the help of others to weather the storm. At an emotional impasse, Kitty makes a bold move, while Meredith, increasingly suspect of Kane's behaviour, seeks opportunities of her own.
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep7" scope="row" style="text-align:center">
          7
         </th>
         <td>
          7
         </td>
         <td class="summary" style="text-align:left">
          "Stasis"
         </td>
         <td>
          Jean de Segonzac
         </td>
         <td>
          Bradford Winters
         </td>
         <td>
          December 2, 2011
          <span style="display:none">
           [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[search]</li>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[search]
          </span>
         </td>
         <td>
          0.353
          <sup class="reference" id="cite_ref-7and8_21-0">
           [ahref]
           
          </sup>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          Just days away from the election, Kane slowly regains control over City Hall. Though a swift political move will help identify his adversaries, will doing the unthinkable improve his public image in time?
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:#F2F2F2">
         <th id="ep8" scope="row" style="text-align:center">
          8
         </th>
         <td>
          8
         </td>
         <td class="summary" style="text-align:left">
          "Choose"
         </td>
         <td>
          Mario Van Peebles
         </td>
         <td>
          Farhad Safinia
         </td>
         <td>
          December 9, 2011
          <span style="display:none">
           <li>[link]</li>[link]<li>[ahref]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
          </span>
         </td>
         <td>
          0.505
          <sup class="reference" id="cite_ref-7and8_21-1">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="expand-child">
         <td class="description" colspan="7" style="border-bottom:solid 3px #000000">
          On Election Day, the race is close, and while the candidates campaign, Kane and Stone must do their part to turn the gears of the political machine. Emma's world is turned upside-down, while Meredith goes to great lengths to prove her allegiance to Kane.
         </td>
        </tr>
       </tbody>
      </table>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <table class="wikitable plainrowheaders wikiepisodetable" style="width:100%">
       <tbody>
        <tr style="color:black;text-align:center">
         <th scope="col" style="background:#979797;width:6%">
          <abbr title="Number">
           No.
          </abbr>
          <br>
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li>[link]<li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[link]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li><li>[ahref]</li>
          </br>
          overall
         </th>
         <th scope="col" style="background:#979797;width:6%">
          <abbr title="Number">
           No.
          </abbr>
          in
          <br>
           [link]<li>[link]</li><li>[link]</li><li>[link]</li><li>[search]</li><li>[search]</li>
          </br>
          season
         </th>
         <th scope="col" style="background:#979797;width:20%">
          Title
         </th>
         <th scope="col" style="background:#979797;width:16%">
          Directed by
         </th>
         <th scope="col" style="background:#979797;width:22%">
          Written by
         </th>
         <th scope="col" style="background:#979797;width:18%">
          Original air date
         </th>
         <th scope="col" style="background:#979797;width:12%">
          US viewers
          <br>
           [link][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[ahref][ahref]<li>[ahref]</li>
          </br>
          (millions)
         </th>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep9" scope="row" style="text-align:center">
          9
         </th>
         <td>
          1
         </td>
         <td class="summary" style="text-align:left">
          "Louder Than Words"
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          [link]
          
         </td>
         <td>
          August 17, 2012
          <span style="display:none">
           [ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[search]</li><li>[ahref]</li>[ahref]
          </span>
         </td>
         <td>
          0.317
          <sup class="reference" id="cite_ref-22">
           <a href="2">
            [22]
           </a>
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep10" scope="row" style="text-align:center">
          10
         </th>
         <td>
          2
         </td>
         <td class="summary" style="text-align:left">
          "Through and Through"
         </td>
         <td>
          [link]
          
         </td>
         <td>
          Bradford Winters
         </td>
         <td>
          August 24, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-08-24
           </span>
           )
          </span>
         </td>
         <td>
          0.229
          <sup class="reference" id="cite_ref-23">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep11" scope="row" style="text-align:center">
          11
         </th>
         <td>
          3
         </td>
         <td class="summary" style="text-align:left">
          "Ablution"
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          Angelina Burnett
         </td>
         <td>
          August 31, 2012
          <span style="display:none">
           [link]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[ahref]</li><li>[ahref]</li>[ahref][search]
          </span>
         </td>
         <td>
          0.371
          <sup class="reference" id="cite_ref-24">
           [ahref]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep12" scope="row" style="text-align:center">
          12
         </th>
         <td>
          4
         </td>
         <td class="summary" style="text-align:left">
          "Redemption"
         </td>
         <td>
          [link]
          
         </td>
         <td>
          [link]
          
         </td>
         <td>
          September 7, 2012
          <span style="display:none">
           <li>[ahref]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[ahref]</li>[ahref]<li>[search]</li>[link]
          </span>
         </td>
         <td>
          0.390
          <sup class="reference" id="cite_ref-25">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep13" scope="row" style="text-align:center">
          13
         </th>
         <td>
          5
         </td>
         <td class="summary" style="text-align:left">
          "Mania"
         </td>
         <td>
          Jean de Segonzac
         </td>
         <td>
          Kevin J. Hynes
         </td>
         <td>
          September 14, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-09-14[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search][search][link][link]
           </span>
           )
          </span>
         </td>
         <td>
          0.382
          <sup class="reference" id="cite_ref-26">
           [ahref]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep14" scope="row" style="text-align:center">
          14
         </th>
         <td>
          6
         </td>
         <td class="summary" style="text-align:left">
          "Backflash"
         </td>
         <td>
          [link]
          
         </td>
         <td>
          Bradford Winters
         </td>
         <td>
          September 21, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-09-21[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[search]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[link]</li>[link]
           </span>
           )
          </span>
         </td>
         <td>
          0.409
          <sup class="reference" id="cite_ref-27">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep15" scope="row" style="text-align:center">
          15
         </th>
         <td>
          7
         </td>
         <td class="summary" style="text-align:left">
          "The Conversation"
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          Angelina Burnett
         </td>
         <td>
          September 28, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-09-28
           </span>
           )
          </span>
         </td>
         <td>
          0.312
          <sup class="reference" id="cite_ref-28">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep16" scope="row" style="text-align:center">
          16
         </th>
         <td>
          8
         </td>
         <td class="summary" style="text-align:left">
          "Consequence"
         </td>
         <td>
          Jean de Segonzac
         </td>
         <td>
          Paul Keables
         </td>
         <td>
          October 5, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-10-05
           </span>
           )
          </span>
         </td>
         <td>
          0.436
          <sup class="reference" id="cite_ref-29">
           [link]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep17" scope="row" style="text-align:center">
          17
         </th>
         <td>
          9
         </td>
         <td class="summary" style="text-align:left">
          "Clinch"
         </td>
         <td>
          Mario Van Peebles
         </td>
         <td>
          Julie Hébert
         </td>
         <td>
          October 12, 2012
          <span style="display:none">
           <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[search][search]<li>[ahref]</li>[link][search]<li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </span>
         </td>
         <td>
          0.340
          <sup class="reference" id="cite_ref-30">
           [ahref]
           
          </sup>
         </td>
        </tr>
        <tr class="vevent" style="text-align:center;background:inherit">
         <th id="ep18" scope="row" style="text-align:center">
          18
         </th>
         <td>
          10
         </td>
         <td class="summary" style="text-align:left">
          "True Enough"
         </td>
         <td>
          Jean de Segonzac
         </td>
         <td>
          Dee Johnson
         </td>
         <td>
          October 19, 2012
          <span style="display:none">
           (
           <span class="bday dtstart published updated">
            2012-10-19<li>[search]</li><li>[ahref]</li>[ahref]<li>[search]</li><li>[ahref]</li>[search]<li>[link]</li>[ahref]<li>[link]</li>
           </span>
           )
          </span>
         </td>
         <td>
          0.442
          <sup class="reference" id="cite_ref-31">
           [ahref]
           
          </sup>
         </td>
        </tr>
       </tbody>
      </table>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <p>
       [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<li>[search]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[ahref]</li>[ahref]
      </p>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <p>
       <li>[search]</li>[ahref][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][search][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
      </p>
      <p>
       <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>[ahref]<li>[ahref]</li><li>[link]</li><li>[search]</li><li>[link]</li>[ahref]<li>[search]</li><li>[ahref]</li><li>[link]</li><li>[search]</li>[search]<li>[link]</li>
      </p>
      <p>
       <li>[link]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[search]</li><li>[link]</li><li>[ahref]</li>
      </p>
      <p>
       <li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link]
      </p>
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <p>
       <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
      </p>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <table class="wikitable sortable">
       <tbody>
        <tr>
         <th>
          Country
         </th>
         <th>
          Network(s)
         </th>
         <th>
          Series premiere
         </th>
         <th>
          Timeslot
         </th>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           [search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][ahref][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][search]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][ahref][search][search]<li>[link]</li><li>[search]</li><li>[link]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
          </span>
          [ahref]
          
         </td>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-41">
           [link]
           
          </sup>
          <sup class="reference" id="cite_ref-Bravo_Canada_42-0">
           [link]
           
          </sup>
         </td>
         <td>
          October 9, 2013
          <sup class="reference" id="cite_ref-Bravo_Canada_42-1">
           [link]
           
          </sup>
         </td>
         <td>
          Wednesday 22.00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>
          </span>
          [ahref]
          
         </td>
         <td>
          [link]
          
          <sup class="reference" id="cite_ref-43">
           [link]
           
          </sup>
         </td>
         <td>
          March 21, 2013
          <sup class="reference" id="cite_ref-44">
           [link]
           
          </sup>
         </td>
         <td>
          Thursday 23.00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           <li>[link]</li><li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[ahref]</li><li>[search]</li>
          </span>
          [ahref]
          
         </td>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-45">
           [ahref]
           
          </sup>
         </td>
         <td>
          October 4, 2012
         </td>
         <td>
          Thursday 21.05
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           <li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
          </span>
          <a href="/wiki/Norway" title="Norway">
           Norway
          </a>
         </td>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-46">
           [ahref]
           
          </sup>
         </td>
         <td>
          September 16, 2012
         </td>
         <td>
          Sunday 22.10
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
          </span>
          [link]
          
         </td>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-47">
           [ahref]
           
          </sup>
         </td>
         <td>
          July 4, 2012
         </td>
         <td>
          Wednesday 21.30
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           [ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[search]</li><li>[ahref]</li><li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<li>[search]</li>[ahref][ahref][link]<li>[ahref]</li><li>[search]</li>
          </span>
          [ahref]
          
         </td>
         <td>
          [link]
          
          <sup class="reference" id="cite_ref-48">
           [link]
           
          </sup>
         </td>
         <td>
          November 16, 2012
         </td>
         <td>
          Friday 22.15
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
          </span>
          [ahref]
          
         </td>
         <td>
          [link]
          
          <sup class="reference" id="cite_ref-49">
           [link]
           
          </sup>
         </td>
         <td>
          December 8, 2012
         </td>
         <td>
          Saturday 21.30
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[link]<li>[ahref]</li><li>[ahref]</li>[link]
          </span>
          [link]
          
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          January 30, 2013
         </td>
         <td>
          Saturday 09.30
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           [link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][link][link][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<li>[search]</li><li>[search]</li><li>[link]</li>[link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[link]</li>
          </span>
          [link]
          
         </td>
         <td>
          [link]
          
         </td>
         <td>
          January 2, 2013
         </td>
         <td>
          Monday 22.00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           <li>[ahref]</li><li>[search]</li><li>[link]</li>[search]<li>[search]</li>[ahref]
          </span>
          [link]
          
         </td>
         <td>
          <a href="/wiki/TG4" title="TG4">
           TG4
          </a>
         </td>
         <td>
          January 2, 2013
         </td>
         <td>
          Monday 23.00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           <li>[ahref]</li><li>[ahref]</li>[ahref][search]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][link]<li>[search]</li><li>[search]</li>[link]<li>[search]</li><li>[search]</li>
          </span>
          [link]
          
         </td>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-50">
           [link]
           
          </sup>
         </td>
         <td>
          March 18, 2013
         </td>
         <td>
          Monday 20.15
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
          </span>
          [link]
          
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          April 7, 2014
         </td>
         <td>
          Monday 23.05
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
           <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref]<li>[link]</li><li>[search]</li><li>[link]</li>
          </span>
          [ahref]
          
         </td>
         <td>
          CVM TV
         </td>
         <td>
          October 23, 2014
         </td>
         <td>
          Thursday 21.00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
          </span>
          [ahref]
          
         </td>
         <td>
          [ahref]
          
         </td>
         <td>
          October 10, 2014
         </td>
         <td>
          Tuesday 21:00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
          </span>
          [ahref]
          
         </td>
         <td>
          [ahref]
          
          <sup class="reference" id="cite_ref-51">
           [link]
           
          </sup>
         </td>
         <td>
          October 27, 2014
         </td>
         <td>
          Monday, Tuesday 23.00
         </td>
        </tr>
        <tr>
         <td>
          <span class="flagicon">
          </span>
          [link]
          
         </td>
         <td>
          SIC Radical
         </td>
         <td>
          February, 2017
         </td>
         <td>
          Tuesday - Friday 23.50
         </td>
        </tr>
       </tbody>
      </table>
      <h2>
       [area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]
      </h2>
      <div class="reflist" style="list-style-type: decimal;">
       <div class="mw-references-wrap mw-references-columns">
        <ol class="references">
         <li id="cite_note-1">
          <span class="mw-cite-backlink">
           <li>[link]</li><li>[link]</li><li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li><li>[search]</li>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [link]
            
            . Film Music Reporter. July 10, 2011
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              August 17,
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brian+Reitzell+to+Score+Starz%E2%80%99s+%E2%80%98Boss%E2%80%99&amp;rft.pub=Film+Music+Reporter&amp;rft.date=2011-07-10&amp;rft_id=http%3A%2F%2Ffilmmusicreporter.com%2F2011%2F07%2F10%2Fbrian-reitzell-to-score-starzs-boss%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-renewal-2">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Andreeva, Nellie (September 27, 2011).
            [ahref]
            
            . Deadline
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              September 27,
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Starz+Renews+New+Series+%E2%80%98Boss%E2%80%99+For+Second+Season+Before+Premiere&amp;rft.pub=Deadline&amp;rft.date=2011-09-27&amp;rft.aulast=Andreeva&amp;rft.aufirst=Nellie&amp;rft_id=http%3A%2F%2Fwww.deadline.com%2F2011%2F09%2Fstarz-renews-new-series-boss-for-second-season-before-premiere%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li>[search]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li><li>[search]</li><li>[ahref]</li>[ahref]<li>[ahref]</li><li>[link]</li>[search][search]
           </span>
          </span>
         </li>
         <li id="cite_note-premiere-3">
          <span class="mw-cite-backlink">
           <li>[link]</li><li>[ahref]</li><li>[ahref]</li>[link]<li>[ahref]</li><li>[ahref]</li><li>[link]</li><li>[search]</li>[link]<li>[link]</li>[link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][link]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li>[ahref]
          </span>
          <span class="reference-text">
           [ahref]<li>[ahref]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
          </span>
         </li>
         <li id="cite_note-4">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation news">
            Goldberg, Lesley (Apr 11, 2012).
            <a class="external text" href="/live-feed/starz-boss-kelsey-grammer-jonathan-groff-season-2-premiere-date-311015" rel="nofollow">
             "Starz Sets Return Date for Kelsey Grammer Starrer 'Boss
             <span class="cs1-kern-right">
              '
             </span>
             "
            </a>
            .
            <i>
             The Hollywood Reporter
            </i>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Hollywood+Reporter&amp;rft.atitle=Starz+Sets+Return+Date+for+Kelsey+Grammer+Starrer+%27Boss%27&amp;rft.date=2012-04-11&amp;rft.aulast=Goldberg&amp;rft.aufirst=Lesley&amp;rft_id=http%3A%2F%2Fwww.hollywoodreporter.com%2Flive-feed%2Fstarz-boss-kelsey-grammer-jonathan-groff-season-2-premiere-date-311015&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-5">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Kondolojy, Amanda (November 20, 2012).
            [ahref]
            
            .
            <i>
             TV by the Numbers
            </i>
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              November 20,[search][ahref][search]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<li>[search]</li>[ahref]
             </span>
             2012
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=%22Boss%22+Cancelled+by+Starz+After+Two+Seasons&amp;rft.date=2012-11-20&amp;rft.aulast=Kondolojy&amp;rft.aufirst=Amanda&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2012%2F11%2F20%2Fboss-canceled-by-starz-after-two-seasons%2F158497%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[link]<li>[ahref]</li><li>[search]</li>[ahref]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]
           </span>
          </span>
         </li>
         <li id="cite_note-6">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Andreeva, Nellie (November 20, 2012).
            [ahref]
            
            .
            <i>
             Deadline.com
            </i>
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              November 20,[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link]<li>[ahref]</li>[ahref][ahref]<li>[link]</li>[ahref]<li>[search]</li><li>[ahref]</li>[link][link]<li>[link]</li><li>[link]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
             </span>
             2012
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Deadline.com&amp;rft.atitle=%22Boss%22+Won%27t+Return+To+Starz+For+Season+3%2C+May+Wrap+Story+With+Two-Hour+Movie&amp;rft.date=2012-11-20&amp;rft.aulast=Andreeva&amp;rft.aufirst=Nellie&amp;rft_id=http%3A%2F%2Fwww.deadline.com%2F2012%2F11%2Fboss-cancelled-starz-after-two-seasons%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li><li>[link]</li>[ahref][ahref][link][link][ahref]<li>[search]</li><li>[ahref]</li>
           </span>
          </span>
         </li>
         <li id="cite_note-7">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <li>[search]</li>[search][ahref]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]
          </span>
         </li>
         <li id="cite_note-8">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [ahref]
            
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              August 30,<li>[search]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li>[search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][search]<li>[search]</li>
             </span>
             2012
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=%22Boss%22+%282011%29+-+Full+cast+and+crew&amp;rft_id=https%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt1833285%2Ffullcredits%23cast&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-greenlight-9">
          <span class="mw-cite-backlink">
           ^
           [link]
           
           [ahref]
           
           [link]
           
           [ahref]
           
           [ahref]
           
          </span>
          <span class="reference-text">
           <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[ahref]</li><li>[search]</li><li>[search]</li>[link]<li>[link]</li><li>[link]</li><li>[ahref]</li>[search]
          </span>
         </li>
         <li id="cite_note-10">
          <span class="mw-cite-backlink">
           [ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Andreeva, Nellie (February 4, 2011).
            [link]
            
            . Deadline
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              August 17,
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=%27Nip%2FTuck%27+Duo+Join+Starz%27s+%27Boss%27+As+EPs&amp;rft.pub=Deadline&amp;rft.date=2011-02-04&amp;rft.aulast=Andreeva&amp;rft.aufirst=Nellie&amp;rft_id=http%3A%2F%2Fwww.deadline.com%2F2011%2F02%2Fniptuck-duo-join-starzs-boss-as-eps%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li><li>[ahref]</li><li>[link]</li>[link]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>
           </span>
          </span>
         </li>
         <li id="cite_note-11">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           [ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][link]<li>[ahref]</li><li>[search]</li>[ahref]
          </span>
         </li>
         <li id="cite_note-12">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Andreeva, Nellie (March 28, 2011).
            [ahref]
            
            . Deadline
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              August 17,
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Jeff+Hephner+To+Co-Star+On+Starz%27s+%27Boss%27&amp;rft.pub=Deadline&amp;rft.date=2011-03-28&amp;rft.aulast=Andreeva&amp;rft.aufirst=Nellie&amp;rft_id=http%3A%2F%2Fwww.deadline.com%2F2011%2F03%2Fjeff-hephner-to-co-star-on-starzs-boss%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-production-13">
          <span class="mw-cite-backlink">
           ^
           [ahref]
           
           [ahref]
           
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Seidman, Robert (April 20, 2011).
            <a class="external text" href="/2011/04/20/kelsey-grammers-the-boss-in-new-drama-from-starz-and-lionsgate/90137/" rel="nofollow">
             "Kelsey Grammer's The "Boss" in New Drama from Starz and Lionsgate"
            </a>
            . TV by the Numbers
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              August 17,
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Kelsey+Grammer%27s+The+%22Boss%22+in+New+Drama+from+Starz+and+Lionsgate&amp;rft.pub=TV+by+the+Numbers&amp;rft.date=2011-04-20&amp;rft.aulast=Seidman&amp;rft.aufirst=Robert&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2011%2F04%2F20%2Fkelsey-grammers-the-boss-in-new-drama-from-starz-and-lionsgate%2F90137%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li>[search]<li>[search]</li><li>[link]</li>[ahref]<li>[search]</li>[search]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
           </span>
          </span>
         </li>
         <li id="cite_note-pressrelease-14">
          <span class="mw-cite-backlink">
           ^
           [ahref]
           
           [ahref]
           
           [link]
           
           <a href="3">
            <sup>
             <i>
              <b>
               d
              </b>
             </i>
            </sup>
           </a>
           [ahref]
           
           [ahref]
           
           [ahref]
           
           [ahref]
           
           [ahref]
           
          </span>
          <span class="reference-text">
           <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][search][ahref]<li>[ahref]</li><li>[link]</li>
          </span>
         </li>
         <li id="cite_note-15">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation news">
            Metz, Nina (July 1, 2011).
            [ahref]
            
            .
            <i>
             [link]
             
            </i>
            <span class="reference-accessdate">
             [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search]<li>[search]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Chicago+Tribune&amp;rft.atitle=Kelsey+Grammer%2C+the+Boss+of+Chicago&amp;rft.date=2011-07-01&amp;rft.aulast=Metz&amp;rft.aufirst=Nina&amp;rft_id=http%3A%2F%2Fwww.chicagotribune.com%2Fentertainment%2Fmovies%2Fct-mov-0701-chicago-closeup-20110702%2C0%2C4360930.column&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-screenrant-16">
          <span class="mw-cite-backlink">
           ^
           [link]
           
           [ahref]
           
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [link]
            
            . Apr 20, 2012.
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Starz+Gives+%E2%80%98Boss%E2%80%99+Season+2+Premiere+Date&amp;rft.date=2012-04-20&amp;rft_id=http%3A%2F%2Fscreenrant.com%2Fboss-season-2-premiere-date-scott-166369%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[link]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][ahref][link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </span>
         </li>
         <li id="cite_note-17">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Gorman, Bill (October 24, 2011).
            [ahref]
            
            .
            <i>
             TV by the Numbers
            </i>
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              October 27,[search]<li>[ahref]</li>[search][search][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+%27Smackdown%21%27+Ties+%27SpongeBob%3B%27+Plus+%27Sanctuary%2C%27+%27Boss%2C%27+%27House+Of+Payne%27+%26+More&amp;rft.date=2011-10-24&amp;rft.aulast=Gorman&amp;rft.aufirst=Bill&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2011%2F10%2F24%2Ffriday-cable-ratings-smackdown-ties-spongebob-plus-sanctuary-boss-house-of-payne-more%2F108154%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            [ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li><li>[link]</li>[ahref]<li>[link]</li><li>[ahref]</li>[link][search]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </span>
         </li>
         <li id="cite_note-18">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Seidman, Robert (October 31, 2011).
            [link]
            
            .
            <i>
             TV by the Numbers
            </i>
            <span class="reference-accessdate">
             [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+Discovery%27s+%27Gold+Rush%27+Tops+Cable+%2B+%27Friday+Night+Smackdown%2C%27+%27Sanctuary%2C%27+%27Boss%27+%26+More&amp;rft.date=2011-10-31&amp;rft.aulast=Seidman&amp;rft.aufirst=Robert&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2011%2F10%2F31%2Ffriday-cable-ratings-discoverys-gold-rush-tops-cable-friday-night-smackdown-sancturary-boss-more%2F109085%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]<li>[ahref]</li>[link][search]<li>[ahref]</li>
           </span>
          </span>
         </li>
         <li id="cite_note-insidetv-19">
          <span class="mw-cite-backlink">
           [search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li><li>[ahref]</li>[search]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Rice, Lynette (November 7, 2011).
            [ahref]
            
            .
            <i>
             Entertainment Weekly
            </i>
            <span class="reference-accessdate">
             <li>[link]</li><li>[ahref]</li>[ahref]<li>[search]</li>[ahref][ahref][search]<li>[ahref]</li>[ahref]<li>[ahref]</li><li>[ahref]</li>[ahref]<li>[link]</li>[link]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Entertainment+Weekly&amp;rft.atitle=%27Boss%27+ratings%3A+Gee%2C+maybe+that+renewal+wasn%27t+such+a+good+idea&amp;rft.date=2011-11-07&amp;rft.aulast=Rice&amp;rft.aufirst=Lynette&amp;rft_id=http%3A%2F%2Finsidetv.ew.com%2F2011%2F11%2F07%2Fboss-ratings-continue-to-drop%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[link]</li><li>[search]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </span>
         </li>
         <li id="cite_note-20">
          <span class="mw-cite-backlink">
           ^<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li>[search][ahref][search][link][link][search]
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Rice, Lynette (November 18, 2011).
            [ahref]
            
            .
            <i>
             Entertainment Weekly
            </i>
            <span class="reference-accessdate">
             [search]<li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li><li>[link]</li>[search][search]<li>[link]</li>[link][ahref]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Entertainment+Weekly&amp;rft.atitle=Sitcom+vets+struggle+to+get+serious&amp;rft.date=2011-11-18&amp;rft.aulast=Rice&amp;rft.aufirst=Lynette&amp;rft_id=http%3A%2F%2Fwww.ew.com%2Farticle%2F2011%2F11%2F18%2Fsitcom-vets-struggle-get-serious&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-7and8-21">
          <span class="mw-cite-backlink">
           ^
           [ahref]
           
           [ahref]
           
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Seidman, Robert (December 12, 2011).
            [ahref]
            
            .
            <i>
             TV by the Numbers
            </i>
            . Archived from
            [link]
            
            on January 8, 2012
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              December 15,
             </span>
             2011
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+%27Gold+Rush%27+Wins+Again+%2B+%27Smackdown%2C%27+%27Sanctuary%2C%27+%27For+Better+or+Worse%27+%26+More&amp;rft.date=2011-12-12&amp;rft.aulast=Seidman&amp;rft.aufirst=Robert&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2011%2F12%2F12%2Ffriday-cable-ratings-gold-rush-wins-again-smackdown-sanctuary-for-better-or-worse-more%2F113483&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-22">
          <span class="mw-cite-backlink">
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref][link][link]<li>[link]</li><li>[ahref]</li><li>[link]</li>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Bibel, Sara (August 20, 2012).
            [ahref]
            
            .
            <i>
             TV by the Numbers
            </i>
            <span class="reference-accessdate">
             [ahref][search]<li>[ahref]</li><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+%27Gold+Rush%3A+The+Jungle%27+Wins+Night%2C+%27WWE+Smackdown%27%2C+%27For+Better+or+Worse%27%2C+%27Beyond+Scared+Straight%27%2C+%27House+of+Payne%2C+%27Lost+Girl%27+%26+More&amp;rft.date=2012-08-20&amp;rft.aulast=Bibel&amp;rft.aufirst=Sara&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2012%2F08%2F20%2Ffriday-cable-ratings-gold-rush-the-jungle-wins-night-wwe-smackdown-for-better-or-worse-beyond-scared-straight-house-of-payne-lost-girl-more%2F145357%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li><li>[ahref]</li><li>[link]</li>[ahref][search]<li>[ahref]</li>[link]<li>[link]</li><li>[ahref]</li>[ahref][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][ahref]<li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </span>
         </li>
         <li id="cite_note-23">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][ahref][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]
          </span>
         </li>
         <li id="cite_note-24">
          <span class="mw-cite-backlink">
           [link]<li>[link]</li>[ahref][link]<li>[link]</li>
          </span>
          <span class="reference-text">
           [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[link]<li>[ahref]</li>
          </span>
         </li>
         <li id="cite_note-25">
          <span class="mw-cite-backlink">
           [search]<li>[link]</li><li>[link]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li>[link]
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Kondolojy, Amanda (September 10, 2012).
            [link]
            
            .
            <i>
             TV by the Numbers
            </i>
            . Archived from
            [link]
            
            on September 15, 2012
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              September 11,[search]<li>[ahref]</li>[ahref][ahref][search]<li>[ahref]</li>
             </span>
             2012
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+WWE+on+Top+%2B+%27Bering+Sea+Gold%3A+Under+The+Ice%27%2C+%27Daily+Show%27%2C+%27American+Pickers%27%2C+%27Hardcore+History%27%2C+%27Yukon+Men%27+%26+More&amp;rft.date=2012-09-10&amp;rft.aulast=Kondolojy&amp;rft.aufirst=Amanda&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2012%2F09%2F10%2Ffriday-cable-ratings-wwe-on-top-bering-sea-gold-under-the-ice-daily-show-american-pickers-hardcore-history-more%2F148009%2Fcomment-page-3%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            [link]<li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>
           </span>
          </span>
         </li>
         <li id="cite_note-26">
          <span class="mw-cite-backlink">
           <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][search]
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Bibel, Sara (September 17, 2012).
            [link]
            
            .
            <i>
             TV by the Numbers
            </i>
            . Archived from
            [ahref]
            
            on September 19, 2012
            <span class="reference-accessdate">
             <li>[search]</li>[link][search][search]<li>[link]</li><li>[search]</li>[search]<li>[search]</li><li>[search]</li>[ahref][link]<li>[link]</li>[link][link]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+%27WWE+Smackdown%27+Wins+Night%2C+%27Yukon+Men%27%2C+%27Bering+Sea+Gold%27%2C+%27Ultimate+Fighter%27%2C+%27Lost+Girl%27%2C+%27Gravity+Falls%27+%26+More&amp;rft.date=2012-09-17&amp;rft.aulast=Bibel&amp;rft.aufirst=Sara&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2012%2F09%2F17%2Ffriday-cable-ratings-wwe-smackdown-wins-night-yukon-men-bering-sea-gold-ultimate-fighter-lost-girl-gravity-falls-more%2F148818%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-27">
          <span class="mw-cite-backlink">
           <li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li><li>[ahref]</li>[link]<li>[ahref]</li>[search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Kondolojy, Amanda (September 24, 2012).
            [ahref]
            
            .
            <i>
             TV by the Numbers
            </i>
            . Archived from
            [ahref]
            
            on September 28, 2012
            <span class="reference-accessdate">
             [search][search]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[link]</li>[search]<li>[ahref]</li>[search]<li>[ahref]</li>[link]<li>[link]</li><li>[link]</li><li>[search]</li><li>[link]</li><li>[ahref]</li>[link][search]<li>[link]</li><li>[ahref]</li>[search]<li>[ahref]</li><li>[link]</li><li>[search]</li>[search]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+%27Friday+Night+Smackdown%27+Wins+Night%2C+%2B+College+Football%2C+%27For+Better+or+Worse%27%2C+%27Haven%27%2C+%27American+Pickers%27+%26+More&amp;rft.date=2012-09-24&amp;rft.aulast=Kondolojy&amp;rft.aufirst=Amanda&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2012%2F09%2F24%2Ffriday-cable-ratings-friday-night-smackdown-wins-night-college-football-for-better-or-worse-haven-american-pickers-more%2F149861%2Fcomment-page-2%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            [ahref]<li>[search]</li><li>[search]</li><li>[ahref]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][search][ahref]<li>[ahref]</li><li>[search]</li><li>[link]</li><li>[ahref]</li>
           </span>
          </span>
         </li>
         <li id="cite_note-28">
          <span class="mw-cite-backlink">
           <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link]<li>[link]</li><li>[search]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>
          </span>
          <span class="reference-text">
           <li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][ahref]<li>[link]</li>
          </span>
         </li>
         <li id="cite_note-29">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <li>[ahref]</li><li>[ahref]</li>[ahref][link]<li>[link]</li>[ahref][link]<li>[search]</li>[ahref]<li>[link]</li>
          </span>
         </li>
         <li id="cite_note-30">
          <span class="mw-cite-backlink">
           <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Bibel, Sara (October 15, 2012).
            [link]
            
            .
            <i>
             TV by the Numbers
            </i>
            . Archived from
            [link]
            
            on 2013-10-17
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              October 17,[search][link][link][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[search][search]<li>[link]</li>[search]<li>[search]</li>[ahref]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
             </span>
             2012
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TV+by+the+Numbers&amp;rft.atitle=Friday+Cable+Ratings%3A+Baseball+Wins+Night%2C+%27Girl+vs.+Monster%27%2C+%27WWE+Smackdown%27%2C+%27Yukon+Men%27%2C+%27Dog+With+a+Blog%27%2C+%27American+Restoration%27+%26+More&amp;rft.date=2012-10-15&amp;rft.aulast=Bibel&amp;rft.aufirst=Sara&amp;rft_id=http%3A%2F%2Ftvbythenumbers.zap2it.com%2F2012%2F10%2F15%2Ffriday-cable-ratings-baseball-wins-night-girl-vs-monster-wwe-smackdown-yukon-men-dog-with-a-blog-american-restoration-more%2F152908%2Fcomment-page-2%2F%23comments&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-31">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           [search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search][search]
          </span>
         </li>
         <li id="cite_note-32">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>
          </span>
         </li>
         <li id="cite_note-33">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [link]
            
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Kelsey+Grammer%27s+%27Boss%27+gets+decent+start+in+ratings&amp;rft_id=http%3A%2F%2Finsidetv.ew.com%2F2011%2F10%2F24%2Fstarz-boss-g%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-34">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[link][ahref][ahref][search]<li>[link]</li><li>[search]</li>[ahref]<li>[ahref]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[link]</li><li>[link]</li>
          </span>
         </li>
         <li id="cite_note-35">
          <span class="mw-cite-backlink">
           ^[link][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][link]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li>[link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[link][link]
          </span>
          <span class="reference-text">
           <cite class="citation news">
            O'Connell, Michael (August 20, 2012).
            [link]
            
            .
            <i>
             The Hollywood Reporter
            </i>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Hollywood+Reporter&amp;rft.atitle=%27Boss%27+Returns+Shy+of+Freshman+Premiere+Ratings%2C+Still+Bests+%27Magic+City%27&amp;rft.date=2012-08-20&amp;rft.aulast=O%27Connell&amp;rft.aufirst=Michael&amp;rft_id=http%3A%2F%2Fwww.hollywoodreporter.com%2Flive-feed%2Fboss-season-2-ratings-kelsey-grammer-starz-364088&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-36">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation news">
            Goldberg, Lesley (November 20, 2012).
            [ahref]
            
            .
            <i>
             The Hollywood Reporter
            </i>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Hollywood+Reporter&amp;rft.atitle=Starz+Cancels+Kelsey+Grammer%27s+%27Boss%27+After+Two+Seasons&amp;rft.date=2012-11-20&amp;rft.aulast=Goldberg&amp;rft.aufirst=Lesley&amp;rft_id=http%3A%2F%2Fwww.hollywoodreporter.com%2Flive-feed%2Fkelsey-grammer-starz-boss-canceled-393242&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[link]</li><li>[link]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </span>
         </li>
         <li id="cite_note-37">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [link]
            
            .
            <i>
             [ahref]
             
            </i>
            <span class="reference-accessdate">
             <li>[ahref]</li>[ahref]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Rotten+Tomatoes&amp;rft.atitle=Boss%3A+Season+1+%282011%29&amp;rft_id=http%3A%2F%2Fwww.rottentomatoes.com%2Ftv%2Fboss%2Fs01%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][link]<li>[link]</li><li>[ahref]</li><li>[link]</li>
           </span>
          </span>
         </li>
         <li id="cite_note-38">
          <span class="mw-cite-backlink">
           <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[link]</li>[link][link]<li>[ahref]</li><li>[search]</li><li>[link]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
          </span>
          <span class="reference-text">
           [link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><li>[search]</li><li>[search]</li>[link]
          </span>
         </li>
         <li id="cite_note-39">
          <span class="mw-cite-backlink">
           <br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>
          </span>
          <span class="reference-text">
           <li>[search]</li>[search]<li>[search]</li><li>[search]</li>[search]<li>[link]</li><li>[link]</li>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]
          </span>
         </li>
         <li id="cite_note-40">
          <span class="mw-cite-backlink">
           <b>
            [link]
            
           </b>
          </span>
          <span class="reference-text">
           <li>[link]</li><li>[link]</li><li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][ahref]
          </span>
         </li>
         <li id="cite_note-41">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           [ahref][search][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][ahref][ahref][link]
          </span>
         </li>
         <li id="cite_note-Bravo_Canada-42">
          <span class="mw-cite-backlink">
           ^
           [link]
           
           [link]
           
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Bird, Christopher (October 7, 2013).
            [link]
            
            <span class="reference-accessdate">
             <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=%27Televisualist%3A+Subtropical+Zombies%27+-+Wednesday&amp;rft.date=2013-10-07&amp;rft.aulast=Bird&amp;rft.aufirst=Christopher&amp;rft_id=http%3A%2F%2Ftorontoist.com%2F2013%2F10%2Ftelevisualist-subtropical-zombies%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            [search][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][search][search]
           </span>
          </span>
         </li>
         <li id="cite_note-43">
          <span class="mw-cite-backlink">
           [search]<li>[ahref]</li><li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][search]<li>[ahref]</li>
          </span>
          <span class="reference-text">
           [link][ahref]<li>[search]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]<li>[ahref]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref]
          </span>
         </li>
         <li id="cite_note-44">
          <span class="mw-cite-backlink">
           <li>[link]</li><li>[ahref]</li><li>[ahref]</li><li>[search]</li>[link]<li>[search]</li><li>[search]</li><li>[ahref]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[search]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[link][search][search]
          </span>
          <span class="reference-text">
           <cite class="citation web">
            Munn, Patrick (March 6, 2013).
            [link]
            
            .
            <i>
             TVWise
            </i>
            <span class="reference-accessdate">
             [link][search][ahref][ahref][search]<li>[link]</li><li>[search]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[search]</li>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[ahref]<li>[search]</li>
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=TVWise&amp;rft.atitle=More4+Sets+UK+Premiere+Date+for+%27Boss%27&amp;rft.date=2013-03-06&amp;rft.aulast=Munn&amp;rft.aufirst=Patrick&amp;rft_id=http%3A%2F%2Fwww.tvwise.co.uk%2F2013%2F03%2Fmore4-sets-uk-premiere-date-for-boss%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-45">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [ahref]
            
            . October 4, 2012
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              October 29,
             </span>
             2012
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Boss%2C+su+Raitre+Kelsey+Grammer+nel+suo+primo+ruolo+drammatico&amp;rft.date=2012-10-04&amp;rft_id=http%3A%2F%2Fwww.tvblog.it%2Fpost%2F85925%2Fboss-serie-tv-raitre-kelsey-grammer&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-46">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [link]
            
            . June 6, 2012.
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=H%C3%B8stens+serier+p%C3%A5+TVNorge%2C+FEM%2C+MAX+og+VOX&amp;rft.date=2012-06-06&amp;rft_id=http%3A%2F%2Fwww.tvnorge.no%2Fprogrammer%2Ftvnorge%2Fh%C3%B8stens-serier-p%C3%A5-tvnorge-fem-max-og-vox-1.18001&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-47">
          <span class="mw-cite-backlink">
           <li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref][search][search]
          </span>
          <span class="reference-text">
           [ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref][search][search][ahref]<li>[ahref]</li>
          </span>
         </li>
         <li id="cite_note-48">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [link]
            
            . December 15, 2011. Archived from
            [link]
            
            on July 29, 2012.
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Kelsey+Grammers+grymme+Boss+till+SVT&amp;rft.date=2011-12-15&amp;rft_id=http%3A%2F%2Fwww.tv6.se%2Fblog%2Fanna-thunman-sk%25C3%25B6ld%2F2011%2F12%2F15%2Fkelsey-grammers-grymme-boss-till-svt&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
           </span>
          </span>
         </li>
         <li id="cite_note-49">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            <a class="external text" href="/web/20130224132304/.www.plus.es/noticias/Todo-Boss-diciembre-CANAL/20121121pluutmsrs_1Tes/" rel="nofollow">
             "Noticias: Todo 'Boss', desde el 8 de diciembre en CANAL+"
            </a>
            . November 21, 2012. Archived from
            [link]
            
            on February 24, 2013.
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Noticias%3A+Todo+%27Boss%27%2C+desde+el+8+de+diciembre+en+CANAL%2B&amp;rft.date=2012-11-21&amp;rft_id=http%3A%2F%2Fwww.plus.es%2Fnoticias%2FTodo-Boss-diciembre-CANAL%2F20121121pluutmsrs_1Tes%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li><li>[ahref]</li>[search][link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][ahref]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
           </span>
          </span>
         </li>
         <li id="cite_note-50">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           [search]<li>[ahref]</li>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]
          </span>
         </li>
         <li id="cite_note-51">
          <span class="mw-cite-backlink">
           <b>
            [ahref]
            
           </b>
          </span>
          <span class="reference-text">
           <cite class="citation web">
            [ahref]
            
            .
            <i>
             NERIT
            </i>
            . Archived from
            [ahref]
            
            on 2014-11-08
            <span class="reference-accessdate">
             . Retrieved
             <span class="nowrap">
              2015-01-13
             </span>
            </span>
            .
           </cite>
           <span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=NERIT&amp;rft.atitle=BOSS-+%CE%A0%CF%81%CE%B5%CE%BC%CE%B9%CE%AD%CF%81%CE%B1+%CF%83%CF%84%CE%B7+%CE%9D%CE%95%CE%A1%CE%99%CE%A4&amp;rft_id=http%3A%2F%2Fwww.nerit.gr%2Feidiseis%2Fpolitismos%2Fboss-premiera-sti-nerit%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ABoss+%28TV+series%29">
            <li>[search]</li><li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref]<li>[link]</li><li>[link]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
           </span>
          </span>
         </li>
        </ol>
       </div>
      </div>
      <h2>
       <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
      </h2>
      <div aria-label="Portals" class="noprint portal plainlist tright" role="navigation" style="margin:0.5em 0 0.5em 1em;border:solid #aaa 1px">
       <ul style="display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold">
        <li style="display:table-row">
         <span style="display:table-cell;padding:0.2em;vertical-align:middle;text-align:center">
          <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][link][link][ahref][link][link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search]<li>[link]</li><li>[ahref]</li>[search]<li>[search]</li>[ahref]<li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]
         </span>
         <span style="display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle">
          [link][search][link]<li>[ahref]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[ahref][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref][link]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link]
         </span>
        </li>
        <li style="display:table-row">
         <span style="display:table-cell;padding:0.2em;vertical-align:middle;text-align:center">
          [link]
          
         </span>
         <span style="display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle">
          [link]
          
         </span>
        </li>
       </ul>
      </div>
      <ul>
       <li>
        [ahref]
        
        on
        [link]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
        at
        [link]
        
       </li>
      </ul>
      <div aria-labelledby="Starz_original_programming" class="navbox" role="navigation" style="padding:3px">
       <table class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
        <tbody>
         <tr>
          <th class="navbox-title" colspan="2" scope="col">
           <div class="plainlinks hlist navbar mini">
            <ul>
             <li class="nv-view">
              [ahref]
              
             </li>
             <li class="nv-talk">
              [ahref]
              
             </li>
             <li class="nv-edit">
              [link]
              
             </li>
            </ul>
           </div>
           <div id="Starz_original_programming" style="font-size:114%;margin:0 4em">
            [link]
            
            [link]
            
           </div>
          </th>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           Current
          </th>
          <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              <span class="nowrap">
               <i>
                [ahref]
                
               </i>
               (since 2014)
              </span>
             </li>
             <li>
              <span class="nowrap">
               <li>[link]</li><li>[search]</li><li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][link][search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[search]</li><li>[link]</li>[link]<li>[search]</li>[link]
              </span>
             </li>
             <li>
              <span class="nowrap">
               <i>
                [ahref]
                
               </i>
               (since 2016)
              </span>
             </li>
             <li>
              <span class="nowrap">
               <i>
                [link]
                
               </i>
               (since 2017)
              </span>
             </li>
             <li>
              <span class="nowrap">
               <li>[search]</li><li>[link]</li><li>[ahref]</li><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[link]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>
              </span>
             </li>
             <li>
              <span class="nowrap">
               <i>
                [link]
                
               </i>
               (since 2018)
              </span>
             </li>
             <li>
              <span class="nowrap">
               <i>
                [link]
                
               </i>
               (since 2018)
              </span>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           Former
          </th>
          <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
           </div>
           <table class="nowraplinks navbox-subgroup" style="border-spacing:0">
            <tbody>
             <tr>
              <th class="navbox-group" scope="row" style="width:1%">
               2000s debuts
              </th>
              <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
               <div style="padding:0em 0.25em">
                <ul>
                 <li>
                  <span class="nowrap">
                   <i>
                    [link]
                    
                   </i>
                   (2007)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [search]<li>[search]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[link]</li>[link]<li>[search]</li><li>[link]</li>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [search]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li><li>[link]</li>[search][link][search]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[ahref]<li>[ahref]</li>[search]<li>[search]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    <a href="/wiki/Crash_(2008_TV_series)" title="Crash (2008 TV series)">
                     Crash
                    </a>
                   </i>
                   (2008–09)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[search]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li>
                  </span>
                 </li>
                </ul>
               </div>
              </td>
             </tr>
             <tr>
              <th class="navbox-group" scope="row" style="width:1%">
               2010s debuts
              </th>
              <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
               <div style="padding:0em 0.25em">
                <ul>
                 <li>
                  <span class="nowrap">
                   <i>
                    [ahref]
                    
                   </i>
                   (2010)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    [link]
                    
                   </i>
                   (2010)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[ahref]</li>[ahref][link][search][link]<li>[ahref]</li>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [ahref]<li>[ahref]</li>[ahref][search]<li>[ahref]</li>[search][ahref]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[link]</li>[ahref][link]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[search]</li>[search][search][ahref]
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    [link]
                    
                   </i>
                   (2011)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    [link]
                    
                   </i>
                   (2011–12)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[search]</li><li>[link]</li>[ahref][link][ahref]
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[ahref]</li>[ahref]<li>[link]</li>[ahref]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li>[search]
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref][ahref]<li>[search]</li>[search][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><li>[link]</li>[ahref]<li>[search]</li>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[search][search][ahref]
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    [ahref]
                    
                   </i>
                   (2014–17)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [search]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[search]<li>[ahref]</li>[ahref][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[search]<li>[link]</li>[link][search][search][search][link]<li>[search]</li>[ahref]<br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[link]</li>[search][search]<li>[link]</li>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    [link]
                    
                   </i>
                   (2014–17)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <i>
                    [ahref]
                    
                   </i>
                   (2015–16)
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[search]</li><li>[link]</li>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   <p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[link]<li>[link]</li>[search]<li>[search]</li><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link][search][search]
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][ahref]<li>[ahref]</li><li>[ahref]</li><li>[link]</li>
                  </span>
                 </li>
                 <li>
                  <span class="nowrap">
                   [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[search]</li>[link]<li>[search]</li>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><li>[ahref]</li>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br>
                  </span>
                 </li>
                </ul>
               </div>
              </td>
             </tr>
            </tbody>
           </table>
           <div>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%">
           Upcoming
          </th>
          <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              <span class="nowrap">
               <i>
                [link]
                
               </i>
               (2019)
              </span>
             </li>
             <li>
              <span class="nowrap">
               <i>
                [link]
                
               </i>
               (TBA)
              </span>
             </li>
             <li>
              <span class="nowrap">
               <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span><li>[link]</li><li>[ahref]</li>[ahref][ahref][ahref]
              </span>
             </li>
            </ul>
           </div>
          </td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <noscript>
     </noscript>
    </div>
    <div class="printfooter">
     Retrieved from "
     [ahref]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      [link]
      
      :
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/wiki/Category:2012_American_television_series_endings" title="Category:2012 American television series endings">
         2012 American television series endings
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [link]
        
       </li>
       <li>
        [link]
        
       </li>
      </ul>
     </div>
     <div class="mw-hidden-catlinks mw-hidden-cats-hidden" id="mw-hidden-catlinks">
      Hidden categories:
      <ul>
       <li>
        [link]
        
       </li>
       <li>
        [link]
        
       </li>
       <li>
        [link]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    <b>[area3][keyword3][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx][symbolx][area3][keywordx]</b>
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <ul>
      <li id="pt-anonuserpage">
       Not logged in
      </li>
      <li id="pt-anontalk">
       [ahref]
       
      </li>
      <li id="pt-anoncontribs">
       [link]
       
      </li>
      <li id="pt-createaccount">
       [link]
       
      </li>
      <li id="pt-login">
       [ahref]
       
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-main">
        <span>
         [ahref]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[ahref][ahref][link][ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li>[ahref][ahref][link][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[link]</li>[link][link]
        </span>
       </li>
       <li id="ca-talk">
        <span>
         <li>[search]</li><li>[link]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[link][link]<li>[link]</li><li>[search]</li><br>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</br><li>[ahref]</li><li>[ahref]</li><li>[search]</li>[link]<li>[search]</li>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul>
       <li class="collapsible selected" id="ca-view">
        <span>
         [areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<li>[ahref]</li><li>[ahref]</li><span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][link][search]<p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][search][ahref][search]<li>[search]</li>[link]<li>[link]</li>
        </span>
       </li>
       <li class="collapsible" id="ca-edit">
        <span>
         <span>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]<span>[search][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search][ahref]<li>[ahref]</li><p>[areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx]</p>[link]<li>[search]</li><li>[link]</li><li>[ahref]</li><li>[search]</li>[ahref]
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         [link]
         
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
     <div id="p-search" role="search">
      <h3>
       [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     [ahref]
     
    </div>
    <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
     <h3 id="p-navigation-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-mainpage-description">
        [link]
        
       </li>
       <li id="n-contents">
        [link]
        
       </li>
       <li id="n-featuredcontent">
        [link]
        
       </li>
       <li id="n-currentevents">
        [ahref]
        
       </li>
       <li id="n-randompage">
        [link]
        
       </li>
       <li id="n-sitesupport">
        [ahref]
        
       </li>
       <li id="n-shoplink">
        [link]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-interaction-label" class="portal" id="p-interaction" role="navigation">
     <h3 id="p-interaction-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-help">
        [link]
        
       </li>
       <li id="n-aboutsite">
        [link]
        
       </li>
       <li id="n-portal">
        [link]
        
       </li>
       <li id="n-recentchanges">
        [link]
        
       </li>
       <li id="n-contactpage">
        [link]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        [ahref]
        
       </li>
       <li id="t-recentchangeslinked">
        [ahref]
        
       </li>
       <li id="t-upload">
        [link]
        
       </li>
       <li id="t-specialpages">
        [link]
        
       </li>
       <li id="t-permalink">
        [ahref]
        
       </li>
       <li id="t-info">
        [ahref]
        
       </li>
       <li id="t-wikibase">
        [ahref]
        
       </li>
       <li id="t-cite">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
     <h3 id="p-coll-print_export-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="coll-create_a_book">
        [link]
        
       </li>
       <li id="coll-download-as-rdf2latex">
        [link]
        
       </li>
       <li id="t-print">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
     <h3 id="p-lang-label">
      [area4][keyword4][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx][symbolx][area4][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li class="interlanguage-link interwiki-de">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-es">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-fr">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-hr">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-it">
        <a class="interlanguage-link-target" href="/wiki/Boss_(serie_televisiva_2011)" hreflang="it" lang="it" title="Boss (serie televisiva 2011) – Italian">
         Italiano
        </a>
       </li>
       <li class="interlanguage-link interwiki-pl">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-pt">
        [link]
        
       </li>
       <li class="interlanguage-link interwiki-ru">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-fi">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-sv">
        [ahref]
        
       </li>
      </ul>
      <div class="after-portlet after-portlet-lang">
       <span class="wb-langlinks-edit wb-langlinks-link">
        [ahref][areax][keywordx][symbolx][areax][keywordx][symbolx][bracketl2][search][bracketr2][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][symbolx][areax][keywordx][search]<li>[link]</li>[search][search]
       </span>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     This page was last edited on 23 November 2018, at 18:37
     <span class="anonymous-show">
      (UTC)
     </span>
     .
    </li>
    <li id="footer-info-copyright">
     Text is available under the
     [ahref]
     
     [ahref]
     
     ;
additional terms may apply.  By using this site, you agree to the
     [ahref]
     
     and
     [ahref]
     
     . Wikipedia® is a registered trademark of the
     [link]
     
     , a non-profit organization.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-privacy">
     [ahref]
     
    </li>
    <li id="footer-places-about">
     [link]
     
    </li>
    <li id="footer-places-disclaimer">
     [ahref]
     
    </li>
    <li id="footer-places-contact">
     [ahref]
     
    </li>
    <li id="footer-places-developers">
     [ahref]
     
    </li>
    <li id="footer-places-cookiestatement">
     [ahref]
     
    </li>
    <li id="footer-places-mobileview">
     [link]
     
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-copyrightico">
     [link]
     
    </li>
    <li id="footer-poweredbyico">
     [ahref]
     
    </li>
   </ul>
   <div style="clear: both;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice12-ipp11-we-ze-0254
  </b>
 </body>
</html>
